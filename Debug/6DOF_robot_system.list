
6DOF_robot_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e210  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c34  0800e4b0  0800e4b0  0001e4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080130e4  080130e4  000230e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080130e8  080130e8  000230e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  24000000  080130ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002740  2400008c  08013178  0003008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240027cc  08013178  000327cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c41a  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000439c  00000000  00000000  0004c517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016e0  00000000  00000000  000508b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003cf25  00000000  00000000  00051f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00023d48  00000000  00000000  0008eebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016590b  00000000  00000000  000b2c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112f  00000000  00000000  00218510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006884  00000000  00000000  00219640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006d  00000000  00000000  0021fec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e498 	.word	0x0800e498

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	0800e498 	.word	0x0800e498

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <tft_write_bus>:




void tft_write_bus(uint8_t high_byte,uint8_t low_byte)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]

	PORTD->ODR = (PORTD->ODR & 0xffff0000) | low_byte| high_byte<<8;
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <tft_write_bus+0x48>)
 80003c2:	695a      	ldr	r2, [r3, #20]
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <tft_write_bus+0x4c>)
 80003c6:	4013      	ands	r3, r2
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	4313      	orrs	r3, r2
 80003cc:	79fa      	ldrb	r2, [r7, #7]
 80003ce:	0212      	lsls	r2, r2, #8
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a09      	ldr	r2, [pc, #36]	; (80003f8 <tft_write_bus+0x48>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6153      	str	r3, [r2, #20]
	asm("nop");
 80003d8:	bf00      	nop
	pin_low(WR_PORT,WR_PIN);
 80003da:	2200      	movs	r2, #0
 80003dc:	2110      	movs	r1, #16
 80003de:	4808      	ldr	r0, [pc, #32]	; (8000400 <tft_write_bus+0x50>)
 80003e0:	f005 f8ac 	bl	800553c <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2110      	movs	r1, #16
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <tft_write_bus+0x50>)
 80003ea:	f005 f8a7 	bl	800553c <HAL_GPIO_WritePin>

}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	58020c00 	.word	0x58020c00
 80003fc:	ffff0000 	.word	0xffff0000
 8000400:	58020800 	.word	0x58020800

08000404 <Lcd_Write_Data>:



void Lcd_Write_Data(uint16_t data)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	80fb      	strh	r3, [r7, #6]

  tft_write_bus(data>>8,data&0x00ff);
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	0a1b      	lsrs	r3, r3, #8
 8000412:	b29b      	uxth	r3, r3
 8000414:	b2db      	uxtb	r3, r3
 8000416:	88fa      	ldrh	r2, [r7, #6]
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ffc7 	bl	80003b0 <tft_write_bus>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <Lcd_Write_Cmd>:

void Lcd_Write_Cmd(uint16_t data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
  pin_low(RS_PORT,RS_PIN);
 8000436:	2200      	movs	r2, #0
 8000438:	2108      	movs	r1, #8
 800043a:	480b      	ldr	r0, [pc, #44]	; (8000468 <Lcd_Write_Cmd+0x3c>)
 800043c:	f005 f87e 	bl	800553c <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000440:	88fb      	ldrh	r3, [r7, #6]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b29b      	uxth	r3, r3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	88fa      	ldrh	r2, [r7, #6]
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ffae 	bl	80003b0 <tft_write_bus>
  pin_high(RS_PORT,RS_PIN);
 8000454:	2201      	movs	r2, #1
 8000456:	2108      	movs	r1, #8
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <Lcd_Write_Cmd+0x3c>)
 800045a:	f005 f86f 	bl	800553c <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58020800 	.word	0x58020800

0800046c <Lcd_SetArea>:


void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4604      	mov	r4, r0
 8000474:	4608      	mov	r0, r1
 8000476:	4611      	mov	r1, r2
 8000478:	461a      	mov	r2, r3
 800047a:	4623      	mov	r3, r4
 800047c:	80fb      	strh	r3, [r7, #6]
 800047e:	4603      	mov	r3, r0
 8000480:	80bb      	strh	r3, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	807b      	strh	r3, [r7, #2]
 8000486:	4613      	mov	r3, r2
 8000488:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 800048a:	202a      	movs	r0, #42	; 0x2a
 800048c:	f7ff ffce 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 8000490:	88fb      	ldrh	r3, [r7, #6]
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	b29b      	uxth	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ffb4 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 800049c:	88fb      	ldrh	r3, [r7, #6]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ffae 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 80004a8:	88bb      	ldrh	r3, [r7, #4]
 80004aa:	0a1b      	lsrs	r3, r3, #8
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ffa8 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 80004b4:	88bb      	ldrh	r3, [r7, #4]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ffa2 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 80004c0:	202b      	movs	r0, #43	; 0x2b
 80004c2:	f7ff ffb3 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 80004c6:	887b      	ldrh	r3, [r7, #2]
 80004c8:	0a1b      	lsrs	r3, r3, #8
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff99 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 80004d2:	887b      	ldrh	r3, [r7, #2]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff93 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 80004de:	883b      	ldrh	r3, [r7, #0]
 80004e0:	0a1b      	lsrs	r3, r3, #8
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff8d 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 80004ea:	883b      	ldrh	r3, [r7, #0]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff87 	bl	8000404 <Lcd_Write_Data>
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd90      	pop	{r4, r7, pc}

080004fe <Lcd_SetPixel>:
                }
	}
}

void Lcd_SetPixel(int16_t x, int16_t y, int16_t color)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	80fb      	strh	r3, [r7, #6]
 8000508:	460b      	mov	r3, r1
 800050a:	80bb      	strh	r3, [r7, #4]
 800050c:	4613      	mov	r3, r2
 800050e:	807b      	strh	r3, [r7, #2]
Lcd_SetArea(x, x, y, y);
 8000510:	88f8      	ldrh	r0, [r7, #6]
 8000512:	88f9      	ldrh	r1, [r7, #6]
 8000514:	88ba      	ldrh	r2, [r7, #4]
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	f7ff ffa8 	bl	800046c <Lcd_SetArea>
Lcd_Write_Cmd(0x2c);
 800051c:	202c      	movs	r0, #44	; 0x2c
 800051e:	f7ff ff85 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(color);
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff6d 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Cmd(0x0);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ff7e 	bl	800042c <Lcd_Write_Cmd>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <Init_SSD1963>:



void Init_SSD1963(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

	pin_high(CS_PORT,CS_PIN);
 800053c:	2201      	movs	r2, #1
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4873      	ldr	r0, [pc, #460]	; (8000710 <Init_SSD1963+0x1d8>)
 8000542:	f004 fffb 	bl	800553c <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 8000546:	2201      	movs	r2, #1
 8000548:	2120      	movs	r1, #32
 800054a:	4871      	ldr	r0, [pc, #452]	; (8000710 <Init_SSD1963+0x1d8>)
 800054c:	f004 fff6 	bl	800553c <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	486e      	ldr	r0, [pc, #440]	; (8000710 <Init_SSD1963+0x1d8>)
 8000556:	f004 fff1 	bl	800553c <HAL_GPIO_WritePin>
	pin_low(REST_PORT,REST_PIN);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	486b      	ldr	r0, [pc, #428]	; (8000710 <Init_SSD1963+0x1d8>)
 8000562:	f004 ffeb 	bl	800553c <HAL_GPIO_WritePin>

	HAL_Delay(20);
 8000566:	2014      	movs	r0, #20
 8000568:	f004 fcf8 	bl	8004f5c <HAL_Delay>
	pin_high(REST_PORT,REST_PIN);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000572:	4867      	ldr	r0, [pc, #412]	; (8000710 <Init_SSD1963+0x1d8>)
 8000574:	f004 ffe2 	bl	800553c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000578:	2014      	movs	r0, #20
 800057a:	f004 fcef 	bl	8004f5c <HAL_Delay>
	pin_low(CS_PORT,CS_PIN);
 800057e:	2200      	movs	r2, #0
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	4863      	ldr	r0, [pc, #396]	; (8000710 <Init_SSD1963+0x1d8>)
 8000584:	f004 ffda 	bl	800553c <HAL_GPIO_WritePin>


Lcd_Write_Cmd(0xE2);		//PLL multiplier, set PLL clock to 120M
 8000588:	20e2      	movs	r0, #226	; 0xe2
 800058a:	f7ff ff4f 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x27);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 800058e:	2027      	movs	r0, #39	; 0x27
 8000590:	f7ff ff38 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff35 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x54);
 800059a:	2054      	movs	r0, #84	; 0x54
 800059c:	f7ff ff32 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Cmd(0xE0);		// PLL enable
 80005a0:	20e0      	movs	r0, #224	; 0xe0
 80005a2:	f7ff ff43 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ff2c 	bl	8000404 <Lcd_Write_Data>
HAL_Delay(10);
 80005ac:	200a      	movs	r0, #10
 80005ae:	f004 fcd5 	bl	8004f5c <HAL_Delay>
Lcd_Write_Cmd(0xE0);
 80005b2:	20e0      	movs	r0, #224	; 0xe0
 80005b4:	f7ff ff3a 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f7ff ff23 	bl	8000404 <Lcd_Write_Data>
HAL_Delay(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f004 fccc 	bl	8004f5c <HAL_Delay>
Lcd_Write_Cmd(0x01);		// software reset
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff ff31 	bl	800042c <Lcd_Write_Cmd>
HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f004 fcc6 	bl	8004f5c <HAL_Delay>
Lcd_Write_Cmd(0xE6);		//PLL setting for PCLK, depends on resolution
 80005d0:	20e6      	movs	r0, #230	; 0xe6
 80005d2:	f7ff ff2b 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x04);
 80005d6:	2004      	movs	r0, #4
 80005d8:	f7ff ff14 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x93);
 80005dc:	2093      	movs	r0, #147	; 0x93
 80005de:	f7ff ff11 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0xE0);
 80005e2:	20e0      	movs	r0, #224	; 0xe0
 80005e4:	f7ff ff0e 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB0);		//LCD SPECIFICATION
 80005e8:	20b0      	movs	r0, #176	; 0xb0
 80005ea:	f7ff ff1f 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x00);		// 0x24
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff ff08 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ff05 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x03);		//Set HDP	799
 80005fa:	2003      	movs	r0, #3
 80005fc:	f7ff ff02 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x1F);
 8000600:	201f      	movs	r0, #31
 8000602:	f7ff feff 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//Set VDP	479
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff fefc 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0xDF);
 800060c:	20df      	movs	r0, #223	; 0xdf
 800060e:	f7ff fef9 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff fef6 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB4);		//HSYNC
 8000618:	20b4      	movs	r0, #180	; 0xb4
 800061a:	f7ff ff07 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);		//Set HT	928
 800061e:	2003      	movs	r0, #3
 8000620:	f7ff fef0 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0xA0);
 8000624:	20a0      	movs	r0, #160	; 0xa0
 8000626:	f7ff feed 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set HPS	46
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff feea 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x2E);
 8000630:	202e      	movs	r0, #46	; 0x2e
 8000632:	f7ff fee7 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x30);		//Set HPW	48
 8000636:	2030      	movs	r0, #48	; 0x30
 8000638:	f7ff fee4 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set LPS	15
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff fee1 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x0F);
 8000642:	200f      	movs	r0, #15
 8000644:	f7ff fede 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff fedb 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB6);		//VSYNC
 800064e:	20b6      	movs	r0, #182	; 0xb6
 8000650:	f7ff feec 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x02);		//Set VT	525
 8000654:	2002      	movs	r0, #2
 8000656:	f7ff fed5 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x0D);
 800065a:	200d      	movs	r0, #13
 800065c:	f7ff fed2 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set VPS	16
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fecf 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x10);
 8000666:	2010      	movs	r0, #16
 8000668:	f7ff fecc 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x10);		//Set VPW	16
 800066c:	2010      	movs	r0, #16
 800066e:	f7ff fec9 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set FPS	8
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fec6 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff fec3 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0xBA);
 800067e:	20ba      	movs	r0, #186	; 0xba
 8000680:	f7ff fed4 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x05);		//GPIO[3:0] out 1
 8000684:	2005      	movs	r0, #5
 8000686:	f7ff febd 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB8);
 800068a:	20b8      	movs	r0, #184	; 0xb8
 800068c:	f7ff fece 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x07);	    //GPIO3=input, GPIO[2:0]=output
 8000690:	2007      	movs	r0, #7
 8000692:	f7ff feb7 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//GPIO0 normal
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff feb4 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0xba);		//rotation
 800069c:	20ba      	movs	r0, #186	; 0xba
 800069e:	f7ff fec5 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff feae 	bl	8000404 <Lcd_Write_Data>


Lcd_Write_Cmd(0xF0);		//pixel data interface
 80006a8:	20f0      	movs	r0, #240	; 0xf0
 80006aa:	f7ff febf 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 80006ae:	2003      	movs	r0, #3
 80006b0:	f7ff fea8 	bl	8000404 <Lcd_Write_Data>


HAL_Delay(10);
 80006b4:	200a      	movs	r0, #10
 80006b6:	f004 fc51 	bl	8004f5c <HAL_Delay>

Lcd_SetArea(0, 0, 799, 479);
 80006ba:	f240 13df 	movw	r3, #479	; 0x1df
 80006be:	f240 321f 	movw	r2, #799	; 0x31f
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fed1 	bl	800046c <Lcd_SetArea>
Lcd_Write_Cmd(0x29);		//display on
 80006ca:	2029      	movs	r0, #41	; 0x29
 80006cc:	f7ff feae 	bl	800042c <Lcd_Write_Cmd>

Lcd_Write_Cmd(0xBE);		//set PWM for B/L
 80006d0:	20be      	movs	r0, #190	; 0xbe
 80006d2:	f7ff feab 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x06);
 80006d6:	2006      	movs	r0, #6
 80006d8:	f7ff fe94 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 80006dc:	20f0      	movs	r0, #240	; 0xf0
 80006de:	f7ff fe91 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x01);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff fe8e 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 80006e8:	20f0      	movs	r0, #240	; 0xf0
 80006ea:	f7ff fe8b 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fe88 	bl	8000404 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fe85 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0xD0);
 80006fa:	20d0      	movs	r0, #208	; 0xd0
 80006fc:	f7ff fe96 	bl	800042c <Lcd_Write_Cmd>
Lcd_Write_Data(0x0D);
 8000700:	200d      	movs	r0, #13
 8000702:	f7ff fe7f 	bl	8000404 <Lcd_Write_Data>

Lcd_Write_Cmd(0x2C);
 8000706:	202c      	movs	r0, #44	; 0x2c
 8000708:	f7ff fe90 	bl	800042c <Lcd_Write_Cmd>

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58020800 	.word	0x58020800

08000714 <TFT_Set_X>:



void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	460a      	mov	r2, r1
 800071e:	80fb      	strh	r3, [r7, #6]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002A);
 8000724:	202a      	movs	r0, #42	; 0x2a
 8000726:	f7ff fe81 	bl	800042c <Lcd_Write_Cmd>
	Lcd_Write_Data(start_x>>8);
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fe67 	bl	8000404 <Lcd_Write_Data>
	Lcd_Write_Data(start_x&0x00ff);
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	b29b      	uxth	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe61 	bl	8000404 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_x>>8);
 8000742:	88bb      	ldrh	r3, [r7, #4]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b29b      	uxth	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fe5b 	bl	8000404 <Lcd_Write_Data>
	Lcd_Write_Data(end_x&0x00ff);
 800074e:	88bb      	ldrh	r3, [r7, #4]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe55 	bl	8000404 <Lcd_Write_Data>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <TFT_Set_Y>:


void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	460a      	mov	r2, r1
 800076c:	80fb      	strh	r3, [r7, #6]
 800076e:	4613      	mov	r3, r2
 8000770:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002B);
 8000772:	202b      	movs	r0, #43	; 0x2b
 8000774:	f7ff fe5a 	bl	800042c <Lcd_Write_Cmd>
	Lcd_Write_Data(start_y>>8);
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	b29b      	uxth	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fe40 	bl	8000404 <Lcd_Write_Data>
	Lcd_Write_Data(start_y&0x00ff);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	b29b      	uxth	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fe3a 	bl	8000404 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_y>>8);
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe34 	bl	8000404 <Lcd_Write_Data>
	Lcd_Write_Data(end_y&0x00ff);
 800079c:	88bb      	ldrh	r3, [r7, #4]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fe2e 	bl	8000404 <Lcd_Write_Data>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <TFT_Set_Work_Area>:
}



void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	80fb      	strh	r3, [r7, #6]
 80007c2:	4603      	mov	r3, r0
 80007c4:	80bb      	strh	r3, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	807b      	strh	r3, [r7, #2]
 80007ca:	4613      	mov	r3, r2
 80007cc:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80007ce:	88fa      	ldrh	r2, [r7, #6]
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	4413      	add	r3, r2
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	3b01      	subs	r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff98 	bl	8000714 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 80007e4:	88ba      	ldrh	r2, [r7, #4]
 80007e6:	883b      	ldrh	r3, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	3b01      	subs	r3, #1
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffb4 	bl	8000762 <TFT_Set_Y>
	Lcd_Write_Cmd(0x2C);
 80007fa:	202c      	movs	r0, #44	; 0x2c
 80007fc:	f7ff fe16 	bl	800042c <Lcd_Write_Cmd>
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bd90      	pop	{r4, r7, pc}

08000808 <TFT_Clear_Screen>:




void TFT_Clear_Screen(uint16_t color)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 8000816:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800081a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800081e:	2100      	movs	r1, #0
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff ffc5 	bl	80007b0 <TFT_Set_Work_Area>

	for(i=0; i < 384000; i++)
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e00c      	b.n	8000846 <TFT_Clear_Screen+0x3e>
	{
		  tft_write_bus(color>>8,color&0x00ff);
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b29b      	uxth	r3, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	88fa      	ldrh	r2, [r7, #6]
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fdb8 	bl	80003b0 <tft_write_bus>
	for(i=0; i < 384000; i++)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <TFT_Clear_Screen+0x50>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d9ee      	bls.n	800082c <TFT_Clear_Screen+0x24>
	}
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	0005dbff 	.word	0x0005dbff

0800085c <TFT_Draw_HLine>:
	}
}


void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4604      	mov	r4, r0
 8000864:	4608      	mov	r0, r1
 8000866:	4611      	mov	r1, r2
 8000868:	461a      	mov	r2, r3
 800086a:	4623      	mov	r3, r4
 800086c:	80fb      	strh	r3, [r7, #6]
 800086e:	4603      	mov	r3, r0
 8000870:	80bb      	strh	r3, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	807b      	strh	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 800087a:	2300      	movs	r3, #0
 800087c:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 800087e:	883b      	ldrh	r3, [r7, #0]
 8000880:	887a      	ldrh	r2, [r7, #2]
 8000882:	88b9      	ldrh	r1, [r7, #4]
 8000884:	88f8      	ldrh	r0, [r7, #6]
 8000886:	f7ff ff93 	bl	80007b0 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 800088a:	2300      	movs	r3, #0
 800088c:	81fb      	strh	r3, [r7, #14]
 800088e:	e006      	b.n	800089e <TFT_Draw_HLine+0x42>
	Lcd_Write_Data(color);
 8000890:	8c3b      	ldrh	r3, [r7, #32]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fdb6 	bl	8000404 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	3301      	adds	r3, #1
 800089c:	81fb      	strh	r3, [r7, #14]
 800089e:	89fa      	ldrh	r2, [r7, #14]
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	8839      	ldrh	r1, [r7, #0]
 80008a4:	fb01 f303 	mul.w	r3, r1, r3
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf1      	blt.n	8000890 <TFT_Draw_HLine+0x34>
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}

080008b6 <TFT_Set_Read_Area>:

void TFT_Set_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4604      	mov	r4, r0
 80008be:	4608      	mov	r0, r1
 80008c0:	4611      	mov	r1, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	4623      	mov	r3, r4
 80008c6:	80fb      	strh	r3, [r7, #6]
 80008c8:	4603      	mov	r3, r0
 80008ca:	80bb      	strh	r3, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80008d4:	88fa      	ldrh	r2, [r7, #6]
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	4413      	add	r3, r2
 80008da:	b29b      	uxth	r3, r3
 80008dc:	3b01      	subs	r3, #1
 80008de:	b29a      	uxth	r2, r3
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff15 	bl	8000714 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 80008ea:	88ba      	ldrh	r2, [r7, #4]
 80008ec:	883b      	ldrh	r3, [r7, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3b01      	subs	r3, #1
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	88bb      	ldrh	r3, [r7, #4]
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff31 	bl	8000762 <TFT_Set_Y>
	Lcd_Write_Cmd(0x2E);
 8000900:	202e      	movs	r0, #46	; 0x2e
 8000902:	f7ff fd93 	bl	800042c <Lcd_Write_Cmd>
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}

0800090e <TFT_Draw_List>:

uint16_t TFT_Draw_List(uint16_t x, uint16_t y, uint16_t width, char *title, char * options,  uint16_t *save, const GFXfont *p_font)
{
 800090e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000912:	b093      	sub	sp, #76	; 0x4c
 8000914:	af04      	add	r7, sp, #16
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4603      	mov	r3, r0
 800091a:	82fb      	strh	r3, [r7, #22]
 800091c:	460b      	mov	r3, r1
 800091e:	82bb      	strh	r3, [r7, #20]
 8000920:	4613      	mov	r3, r2
 8000922:	827b      	strh	r3, [r7, #18]
 8000924:	466b      	mov	r3, sp
 8000926:	60bb      	str	r3, [r7, #8]
	uint16_t height=47+1+34;
 8000928:	2352      	movs	r3, #82	; 0x52
 800092a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t counter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t start=0;
 8000930:	2300      	movs	r3, #0
 8000932:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t line_y_pos=y+48;
 8000934:	8abb      	ldrh	r3, [r7, #20]
 8000936:	3330      	adds	r3, #48	; 0x30
 8000938:	867b      	strh	r3, [r7, #50]	; 0x32

	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 800093a:	2300      	movs	r3, #0
 800093c:	863b      	strh	r3, [r7, #48]	; 0x30
 800093e:	e00b      	b.n	8000958 <TFT_Draw_List+0x4a>
	{
		if (options[text_pos ]== ' ')
 8000940:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000942:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000944:	4413      	add	r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b20      	cmp	r3, #32
 800094a:	d102      	bne.n	8000952 <TFT_Draw_List+0x44>
			counter+=1;
 800094c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800094e:	3301      	adds	r3, #1
 8000950:	86fb      	strh	r3, [r7, #54]	; 0x36
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 8000952:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000954:	3301      	adds	r3, #1
 8000956:	863b      	strh	r3, [r7, #48]	; 0x30
 8000958:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800095a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800095c:	f7ff fcca 	bl	80002f4 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	429c      	cmp	r4, r3
 8000964:	d3ec      	bcc.n	8000940 <TFT_Draw_List+0x32>
	}

	height+=35*counter;
 8000966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000968:	461a      	mov	r2, r3
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	4413      	add	r3, r2
 800096e:	461a      	mov	r2, r3
 8000970:	00d2      	lsls	r2, r2, #3
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	b29a      	uxth	r2, r3
 8000976:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000978:	4413      	add	r3, r2
 800097a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	lcd_Read_Area(x, y, width, height, save);
 800097c:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 800097e:	8a7a      	ldrh	r2, [r7, #18]
 8000980:	8ab9      	ldrh	r1, [r7, #20]
 8000982:	8af8      	ldrh	r0, [r7, #22]
 8000984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	4623      	mov	r3, r4
 800098a:	f000 f937 	bl	8000bfc <lcd_Read_Area>
	TFT_Draw_Fill_Round_Rect (x, y, width, height, 20,  0xDEDB);
 800098e:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 8000990:	8a7a      	ldrh	r2, [r7, #18]
 8000992:	8ab9      	ldrh	r1, [r7, #20]
 8000994:	8af8      	ldrh	r0, [r7, #22]
 8000996:	f64d 63db 	movw	r3, #57051	; 0xdedb
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	2314      	movs	r3, #20
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4623      	mov	r3, r4
 80009a2:	f000 faf0 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
	LCD_centered_Font (x, y+23,  width, title, p_font, 2,  BLACK);
 80009a6:	8abb      	ldrh	r3, [r7, #20]
 80009a8:	3317      	adds	r3, #23
 80009aa:	b299      	uxth	r1, r3
 80009ac:	8a7a      	ldrh	r2, [r7, #18]
 80009ae:	8af8      	ldrh	r0, [r7, #22]
 80009b0:	2300      	movs	r3, #0
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	2302      	movs	r3, #2
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f000 fbfc 	bl	80011ba <LCD_centered_Font>
	TFT_Draw_HLine(x, line_y_pos, width,  1, 	0xB5B6);
 80009c2:	8a7a      	ldrh	r2, [r7, #18]
 80009c4:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80009c6:	8af8      	ldrh	r0, [r7, #22]
 80009c8:	f24b 53b6 	movw	r3, #46518	; 0xb5b6
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	f7ff ff44 	bl	800085c <TFT_Draw_HLine>
	while(counter>0)
 80009d4:	e00e      	b.n	80009f4 <TFT_Draw_List+0xe6>
	{
		line_y_pos+=35;
 80009d6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80009d8:	3323      	adds	r3, #35	; 0x23
 80009da:	867b      	strh	r3, [r7, #50]	; 0x32
		TFT_Draw_HLine(x, line_y_pos, width,  1, 	0xB5B6);
 80009dc:	8a7a      	ldrh	r2, [r7, #18]
 80009de:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80009e0:	8af8      	ldrh	r0, [r7, #22]
 80009e2:	f24b 53b6 	movw	r3, #46518	; 0xb5b6
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2301      	movs	r3, #1
 80009ea:	f7ff ff37 	bl	800085c <TFT_Draw_HLine>
		counter-=1;
 80009ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80009f0:	3b01      	subs	r3, #1
 80009f2:	86fb      	strh	r3, [r7, #54]	; 0x36
	while(counter>0)
 80009f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1ed      	bne.n	80009d6 <TFT_Draw_List+0xc8>
	}
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80009fe:	e061      	b.n	8000ac4 <TFT_Draw_List+0x1b6>
	{
		if (options[text_pos ]== ' ')
 8000a00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b20      	cmp	r3, #32
 8000a0a:	d158      	bne.n	8000abe <TFT_Draw_List+0x1b0>
		{
 8000a0c:	466b      	mov	r3, sp
 8000a0e:	461c      	mov	r4, r3
/*			char temp[50];
			strncpy(temp, options + start, text_pos - start);
			temp[text_pos - start] = '\0'; // Dodanie zakończenia ciągu
			 LCD_centered_Font(x, y + 47 + 17 + counter * 35, width, temp, p_font, 1,  BLACK);*/
			char newString[text_pos-start];
 8000a10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a14:	1ad1      	subs	r1, r2, r3
 8000a16:	1e4b      	subs	r3, r1, #1
 8000a18:	623b      	str	r3, [r7, #32]
 8000a1a:	460a      	mov	r2, r1
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	4615      	mov	r5, r2
 8000a20:	461e      	mov	r6, r3
 8000a22:	f04f 0200 	mov.w	r2, #0
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	00f3      	lsls	r3, r6, #3
 8000a2c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8000a30:	00ea      	lsls	r2, r5, #3
 8000a32:	460a      	mov	r2, r1
 8000a34:	2300      	movs	r3, #0
 8000a36:	603a      	str	r2, [r7, #0]
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	00c3      	lsls	r3, r0, #3
 8000a46:	6838      	ldr	r0, [r7, #0]
 8000a48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a4c:	6838      	ldr	r0, [r7, #0]
 8000a4e:	00c2      	lsls	r2, r0, #3
 8000a50:	460b      	mov	r3, r1
 8000a52:	3307      	adds	r3, #7
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	ebad 0d03 	sub.w	sp, sp, r3
 8000a5c:	ab04      	add	r3, sp, #16
 8000a5e:	3300      	adds	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
			memcpy(newString, options+start*sizeof(char), text_pos-start);
 8000a62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a66:	18d1      	adds	r1, r2, r3
 8000a68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	69f8      	ldr	r0, [r7, #28]
 8000a72:	f00c fdf6 	bl	800d662 <memcpy>
			newString[text_pos - start] = '\0';
 8000a76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	69fa      	ldr	r2, [r7, #28]
 8000a7e:	2100      	movs	r1, #0
 8000a80:	54d1      	strb	r1, [r2, r3]
		    LCD_centered_Font (x, y+47+17+counter*35,  width, newString, p_font, 1,  BLACK);
 8000a82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000a84:	461a      	mov	r2, r3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	8abb      	ldrh	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	3340      	adds	r3, #64	; 0x40
 8000a9a:	b299      	uxth	r1, r3
 8000a9c:	8a7a      	ldrh	r2, [r7, #18]
 8000a9e:	8af8      	ldrh	r0, [r7, #22]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9302      	str	r3, [sp, #8]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f000 fb84 	bl	80011ba <LCD_centered_Font>
			start=text_pos;
 8000ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ab4:	86bb      	strh	r3, [r7, #52]	; 0x34
			counter+=1;
 8000ab6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ab8:	3301      	adds	r3, #1
 8000aba:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000abc:	46a5      	mov	sp, r4
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 8000abe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000ac4:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8000ac6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000ac8:	f7ff fc14 	bl	80002f4 <strlen>
 8000acc:	4603      	mov	r3, r0
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	d396      	bcc.n	8000a00 <TFT_Draw_List+0xf2>
		}
	}
	char newString[strlen(options)-start];
 8000ad2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000ad4:	f7ff fc0e 	bl	80002f4 <strlen>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000adc:	1ad1      	subs	r1, r2, r3
 8000ade:	460b      	mov	r3, r1
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	468a      	mov	sl, r1
 8000ae8:	469b      	mov	fp, r3
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	f04f 0300 	mov.w	r3, #0
 8000af2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000af6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000afe:	2300      	movs	r3, #0
 8000b00:	4688      	mov	r8, r1
 8000b02:	4699      	mov	r9, r3
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b18:	1dcb      	adds	r3, r1, #7
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	ebad 0d03 	sub.w	sp, sp, r3
 8000b22:	ab04      	add	r3, sp, #16
 8000b24:	3300      	adds	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(newString, options+start*sizeof(char), strlen(options)-start);
 8000b28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b2c:	18d4      	adds	r4, r2, r3
 8000b2e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000b30:	f7ff fbe0 	bl	80002f4 <strlen>
 8000b34:	4602      	mov	r2, r0
 8000b36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b40:	f00c fd8f 	bl	800d662 <memcpy>
	newString[strlen(options) - start] = '\0';
 8000b44:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000b46:	f7ff fbd5 	bl	80002f4 <strlen>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b52:	2100      	movs	r1, #0
 8000b54:	54d1      	strb	r1, [r2, r3]
    LCD_centered_Font (x, y+47+17+counter*35,  width, newString, p_font, 1,  BLACK);
 8000b56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b58:	461a      	mov	r2, r3
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	461a      	mov	r2, r3
 8000b60:	00d2      	lsls	r2, r2, #3
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	8abb      	ldrh	r3, [r7, #20]
 8000b68:	4413      	add	r3, r2
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	3340      	adds	r3, #64	; 0x40
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	8a7a      	ldrh	r2, [r7, #18]
 8000b72:	8af8      	ldrh	r0, [r7, #22]
 8000b74:	2300      	movs	r3, #0
 8000b76:	9302      	str	r3, [sp, #8]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	f000 fb1a 	bl	80011ba <LCD_centered_Font>
	//LCD_centered_Font (x, y+47+17+counter*35,  length, memcopy(options, start, strlen(options)), p_font, 1,  BLACK);

	return counter;
 8000b86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b88:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	373c      	adds	r7, #60	; 0x3c
 8000b90:	46bd      	mov	sp, r7
 8000b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b96 <TFT_Restore_Area>:
    LCD_centered_Font (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2)+80,  length,  text, p_font, 1,  BLACK);

}

void TFT_Restore_Area (uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *save)
{
 8000b96:	b590      	push	{r4, r7, lr}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	80fb      	strh	r3, [r7, #6]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	80bb      	strh	r3, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(x, y, length, width);
 8000bb8:	883b      	ldrh	r3, [r7, #0]
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	88b9      	ldrh	r1, [r7, #4]
 8000bbe:	88f8      	ldrh	r0, [r7, #6]
 8000bc0:	f7ff fdf6 	bl	80007b0 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e00a      	b.n	8000be0 <TFT_Restore_Area+0x4a>
	{
		Lcd_Write_Data(save[i]);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	6a3a      	ldr	r2, [r7, #32]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc15 	bl	8000404 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	883a      	ldrh	r2, [r7, #0]
 8000be4:	fb02 f303 	mul.w	r3, r2, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d3ec      	bcc.n	8000bca <TFT_Restore_Area+0x34>
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd90      	pop	{r4, r7, pc}
	...

08000bfc <lcd_Read_Area>:

void lcd_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *save)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4604      	mov	r4, r0
 8000c04:	4608      	mov	r0, r1
 8000c06:	4611      	mov	r1, r2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	80fb      	strh	r3, [r7, #6]
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80bb      	strh	r3, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	807b      	strh	r3, [r7, #2]
 8000c16:	4613      	mov	r3, r2
 8000c18:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
	TFT_Set_Read_Area(x, y, length, width);
 8000c1e:	883b      	ldrh	r3, [r7, #0]
 8000c20:	887a      	ldrh	r2, [r7, #2]
 8000c22:	88b9      	ldrh	r1, [r7, #4]
 8000c24:	88f8      	ldrh	r0, [r7, #6]
 8000c26:	f7ff fe46 	bl	80008b6 <TFT_Set_Read_Area>
	PORTD->MODER = (PORTD->MODER & 0x00000000);
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <lcd_Read_Area+0x78>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <lcd_Read_Area+0x78>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]


	for(i=0; i < length*width; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e00a      	b.n	8000c50 <lcd_Read_Area+0x54>
	{
		save[i] = lcd_Read_bus();
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	6a3a      	ldr	r2, [r7, #32]
 8000c40:	18d4      	adds	r4, r2, r3
 8000c42:	f000 f819 	bl	8000c78 <lcd_Read_bus>
 8000c46:	4603      	mov	r3, r0
 8000c48:	8023      	strh	r3, [r4, #0]
	for(i=0; i < length*width; i++)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	883a      	ldrh	r2, [r7, #0]
 8000c54:	fb02 f303 	mul.w	r3, r2, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d3ec      	bcc.n	8000c3a <lcd_Read_Area+0x3e>
	}

	PORTD->MODER = (PORTD->MODER | 0x55555555);
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <lcd_Read_Area+0x78>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <lcd_Read_Area+0x78>)
 8000c66:	f043 3355 	orr.w	r3, r3, #1431655765	; 0x55555555
 8000c6a:	6013      	str	r3, [r2, #0]

}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	58020c00 	.word	0x58020c00

08000c78 <lcd_Read_bus>:

uint16_t lcd_Read_bus()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

	pin_low(RD_PORT,RD_PIN);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <lcd_Read_bus+0x40>)
 8000c84:	f004 fc5a 	bl	800553c <HAL_GPIO_WritePin>

/*	for(int i =0; i<100; i++)
	{
		asm("nop");
	}*/
	uint8_t high_byte =(PORTD->IDR)>>8 ;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <lcd_Read_bus+0x44>)
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	71fb      	strb	r3, [r7, #7]
	uint8_t low_byte =PORTD->IDR ;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <lcd_Read_bus+0x44>)
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	71bb      	strb	r3, [r7, #6]
	pin_high(RD_PORT,RD_PIN);//stan wysoki ustawiamy po zakończeniu odczytu
 8000c96:	2201      	movs	r2, #1
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <lcd_Read_bus+0x40>)
 8000c9c:	f004 fc4e 	bl	800553c <HAL_GPIO_WritePin>


/*	uint8_t low_byte =0 ;
	uint8_t high_byte =0 ;*/

	return ((high_byte<<8)|low_byte);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	b29b      	uxth	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	58020800 	.word	0x58020800
 8000cbc:	58020c00 	.word	0x58020c00

08000cc0 <TFT_Draw_Bitmap_Without_Background>:

void TFT_Draw_Bitmap_Without_Background(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t *array)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4623      	mov	r3, r4
 8000cd0:	80fb      	strh	r3, [r7, #6]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80bb      	strh	r3, [r7, #4]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	807b      	strh	r3, [r7, #2]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	803b      	strh	r3, [r7, #0]
	uint16_t color, color_R, color_G, color_B;
	for(int i =0;i<height;i+=1)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e03e      	b.n	8000d62 <TFT_Draw_Bitmap_Without_Background+0xa2>
	{
		for(int b =0;b<width;b+=1)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	e034      	b.n	8000d54 <TFT_Draw_Bitmap_Without_Background+0x94>
		{
			color=array[i*width+b];
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	fb03 f202 	mul.w	r2, r3, r2
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cfa:	4413      	add	r3, r2
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	81fb      	strh	r3, [r7, #14]
			color_R=(0xF800&color)>>11;
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	0adb      	lsrs	r3, r3, #11
 8000d04:	81bb      	strh	r3, [r7, #12]
			color_G=(0x7E0&color)>>5;
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	095b      	lsrs	r3, r3, #5
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d10:	817b      	strh	r3, [r7, #10]
			color_B=0x1F&color;
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	813b      	strh	r3, [r7, #8]
			if (!(color_R>26&&color_G>53&&color_B>26))
 8000d1a:	89bb      	ldrh	r3, [r7, #12]
 8000d1c:	2b1a      	cmp	r3, #26
 8000d1e:	d905      	bls.n	8000d2c <TFT_Draw_Bitmap_Without_Background+0x6c>
 8000d20:	897b      	ldrh	r3, [r7, #10]
 8000d22:	2b35      	cmp	r3, #53	; 0x35
 8000d24:	d902      	bls.n	8000d2c <TFT_Draw_Bitmap_Without_Background+0x6c>
 8000d26:	893b      	ldrh	r3, [r7, #8]
 8000d28:	2b1a      	cmp	r3, #26
 8000d2a:	d810      	bhi.n	8000d4e <TFT_Draw_Bitmap_Without_Background+0x8e>
			{
				Lcd_SetPixel(x+b,y+i, color);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	4413      	add	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b218      	sxth	r0, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f7ff fbd8 	bl	80004fe <Lcd_SetPixel>
		for(int b =0;b<width;b+=1)
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	3301      	adds	r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbc6      	blt.n	8000cea <TFT_Draw_Bitmap_Without_Background+0x2a>
	for(int i =0;i<height;i+=1)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	883b      	ldrh	r3, [r7, #0]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	dbbc      	blt.n	8000ce4 <TFT_Draw_Bitmap_Without_Background+0x24>
			}
		}
	}
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <TFT_Draw_VLine>:
		}
	}
}

void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4603      	mov	r3, r0
 8000d88:	80bb      	strh	r3, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	807b      	strh	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	883a      	ldrh	r2, [r7, #0]
 8000d9a:	88b9      	ldrh	r1, [r7, #4]
 8000d9c:	88f8      	ldrh	r0, [r7, #6]
 8000d9e:	f7ff fd07 	bl	80007b0 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	81fb      	strh	r3, [r7, #14]
 8000da6:	e006      	b.n	8000db6 <TFT_Draw_VLine+0x42>
	Lcd_Write_Data(color);
 8000da8:	8c3b      	ldrh	r3, [r7, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fb2a 	bl	8000404 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	3301      	adds	r3, #1
 8000db4:	81fb      	strh	r3, [r7, #14]
 8000db6:	89fa      	ldrh	r2, [r7, #14]
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	8839      	ldrh	r1, [r7, #0]
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf1      	blt.n	8000da8 <TFT_Draw_VLine+0x34>
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd90      	pop	{r4, r7, pc}

08000dce <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}


void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8000dce:	b590      	push	{r4, r7, lr}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4604      	mov	r4, r0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	4611      	mov	r1, r2
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	4603      	mov	r3, r0
 8000de2:	80bb      	strh	r3, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
 8000de8:	4613      	mov	r3, r2
 8000dea:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 8000df0:	883b      	ldrh	r3, [r7, #0]
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	88b9      	ldrh	r1, [r7, #4]
 8000df6:	88f8      	ldrh	r0, [r7, #6]
 8000df8:	f7ff fcda 	bl	80007b0 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e006      	b.n	8000e10 <TFT_Draw_Fill_Rectangle+0x42>
	{
		Lcd_Write_Data(color);
 8000e02:	8c3b      	ldrh	r3, [r7, #32]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fafd 	bl	8000404 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	883a      	ldrh	r2, [r7, #0]
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d3f0      	bcc.n	8000e02 <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}

08000e2a <TFT_Draw_Fill_Circle_Helper>:
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
}


void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 8000e2a:	b590      	push	{r4, r7, lr}
 8000e2c:	b089      	sub	sp, #36	; 0x24
 8000e2e:	af02      	add	r7, sp, #8
 8000e30:	4604      	mov	r4, r0
 8000e32:	4608      	mov	r0, r1
 8000e34:	4611      	mov	r1, r2
 8000e36:	461a      	mov	r2, r3
 8000e38:	4623      	mov	r3, r4
 8000e3a:	80fb      	strh	r3, [r7, #6]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	80bb      	strh	r3, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
 8000e44:	4613      	mov	r3, r2
 8000e46:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	f1c3 0301 	rsb	r3, r3, #1
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	03d2      	lsls	r2, r2, #15
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8000e6c:	e07f      	b.n	8000f6e <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 8000e6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0e      	blt.n	8000e94 <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 8000e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000e82:	8a7b      	ldrh	r3, [r7, #18]
 8000e84:	3302      	adds	r3, #2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	8a7b      	ldrh	r3, [r7, #18]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000e94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000ea0:	8abb      	ldrh	r3, [r7, #20]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8000ea8:	8afa      	ldrh	r2, [r7, #22]
 8000eaa:	8abb      	ldrh	r3, [r7, #20]
 8000eac:	4413      	add	r3, r2
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8000eb2:	787b      	ldrb	r3, [r7, #1]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d029      	beq.n	8000f10 <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	8a3b      	ldrh	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b298      	uxth	r0, r3
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f7ff ff47 	bl	8000d74 <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	4413      	add	r3, r2
 8000eec:	b298      	uxth	r0, r3
 8000eee:	88ba      	ldrh	r2, [r7, #4]
 8000ef0:	8a3b      	ldrh	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	8a3b      	ldrh	r3, [r7, #16]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f7ff ff32 	bl	8000d74 <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d029      	beq.n	8000f6e <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 8000f1a:	88fa      	ldrh	r2, [r7, #6]
 8000f1c:	8a3b      	ldrh	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	b298      	uxth	r0, r3
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f7ff ff18 	bl	8000d74 <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 8000f44:	88fa      	ldrh	r2, [r7, #6]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	b298      	uxth	r0, r3
 8000f4c:	88ba      	ldrh	r2, [r7, #4]
 8000f4e:	8a3b      	ldrh	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b299      	uxth	r1, r3
 8000f54:	8a3b      	ldrh	r3, [r7, #16]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f7ff ff03 	bl	8000d74 <TFT_Draw_VLine>
  while (x<y) {
 8000f6e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	f6ff af79 	blt.w	8000e6e <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}

08000f86 <TFT_Draw_Fill_Round_Rect>:


void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8000f86:	b590      	push	{r4, r7, lr}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af02      	add	r7, sp, #8
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	4623      	mov	r3, r4
 8000f96:	80fb      	strh	r3, [r7, #6]
 8000f98:	4603      	mov	r3, r0
 8000f9a:	80bb      	strh	r3, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	8b3b      	ldrh	r3, [r7, #24]
 8000fa8:	4413      	add	r3, r2
 8000faa:	b298      	uxth	r0, r3
 8000fac:	8b3b      	ldrh	r3, [r7, #24]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	883c      	ldrh	r4, [r7, #0]
 8000fba:	88b9      	ldrh	r1, [r7, #4]
 8000fbc:	8bbb      	ldrh	r3, [r7, #28]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4623      	mov	r3, r4
 8000fc2:	f7ff ff04 	bl	8000dce <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8000fc6:	88fa      	ldrh	r2, [r7, #6]
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	8b3b      	ldrh	r3, [r7, #24]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b218      	sxth	r0, r3
 8000fda:	88ba      	ldrh	r2, [r7, #4]
 8000fdc:	8b3b      	ldrh	r3, [r7, #24]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b219      	sxth	r1, r3
 8000fe4:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8000fe8:	8b3b      	ldrh	r3, [r7, #24]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	883a      	ldrh	r2, [r7, #0]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	8bba      	ldrh	r2, [r7, #28]
 8000ffc:	9201      	str	r2, [sp, #4]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	4622      	mov	r2, r4
 8001004:	f7ff ff11 	bl	8000e2a <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	8b3b      	ldrh	r3, [r7, #24]
 800100c:	4413      	add	r3, r2
 800100e:	b29b      	uxth	r3, r3
 8001010:	b218      	sxth	r0, r3
 8001012:	88ba      	ldrh	r2, [r7, #4]
 8001014:	8b3b      	ldrh	r3, [r7, #24]
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b219      	sxth	r1, r3
 800101c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001020:	8b3b      	ldrh	r3, [r7, #24]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	b29b      	uxth	r3, r3
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	3b01      	subs	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21b      	sxth	r3, r3
 8001032:	8bba      	ldrh	r2, [r7, #28]
 8001034:	9201      	str	r2, [sp, #4]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	4622      	mov	r2, r4
 800103c:	f7ff fef5 	bl	8000e2a <TFT_Draw_Fill_Circle_Helper>
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <LCD_Char>:



static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08b      	sub	sp, #44	; 0x2c
 800104c:	af02      	add	r7, sp, #8
 800104e:	60ba      	str	r2, [r7, #8]
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4603      	mov	r3, r0
 8001054:	81fb      	strh	r3, [r7, #14]
 8001056:	460b      	mov	r3, r1
 8001058:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	777b      	strb	r3, [r7, #29]
 800106a:	2300      	movs	r3, #0
 800106c:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001072:	2300      	movs	r3, #0
 8001074:	763b      	strb	r3, [r7, #24]
 8001076:	e095      	b.n	80011a4 <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001078:	2300      	movs	r3, #0
 800107a:	767b      	strb	r3, [r7, #25]
 800107c:	e053      	b.n	8001126 <LCD_Char+0xde>
		{
			if(bit == 0)
 800107e:	7f3b      	ldrb	r3, [r7, #28]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001084:	8bfb      	ldrh	r3, [r7, #30]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	83fa      	strh	r2, [r7, #30]
 800108a:	461a      	mov	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8001098:	7f7a      	ldrb	r2, [r7, #29]
 800109a:	7f3b      	ldrb	r3, [r7, #28]
 800109c:	4013      	ands	r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <LCD_Char+0x64>
			{
				set_pixels++;
 80010a4:	8b7b      	ldrh	r3, [r7, #26]
 80010a6:	3301      	adds	r3, #1
 80010a8:	837b      	strh	r3, [r7, #26]
 80010aa:	e036      	b.n	800111a <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 80010ac:	8b7b      	ldrh	r3, [r7, #26]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d033      	beq.n	800111a <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80010b8:	461a      	mov	r2, r3
 80010ba:	7e7b      	ldrb	r3, [r7, #25]
 80010bc:	441a      	add	r2, r3
 80010be:	8b7b      	ldrh	r3, [r7, #26]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	fb12 f303 	smulbb	r3, r2, r3
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	89fb      	ldrh	r3, [r7, #14]
 80010d2:	4413      	add	r3, r2
 80010d4:	b298      	uxth	r0, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80010dc:	461a      	mov	r2, r3
 80010de:	7e3b      	ldrb	r3, [r7, #24]
 80010e0:	4413      	add	r3, r2
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	fb12 f303 	smulbb	r3, r2, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	89bb      	ldrh	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	b299      	uxth	r1, r3
 80010f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	8b7a      	ldrh	r2, [r7, #26]
 80010fe:	fb12 f303 	smulbb	r3, r2, r3
 8001102:	b29a      	uxth	r2, r3
 8001104:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001108:	b29c      	uxth	r4, r3
 800110a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110c:	b29b      	uxth	r3, r3
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4623      	mov	r3, r4
 8001112:	f7ff fe5c 	bl	8000dce <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800111a:	7f3b      	ldrb	r3, [r7, #28]
 800111c:	085b      	lsrs	r3, r3, #1
 800111e:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001120:	7e7b      	ldrb	r3, [r7, #25]
 8001122:	3301      	adds	r3, #1
 8001124:	767b      	strb	r3, [r7, #25]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	789b      	ldrb	r3, [r3, #2]
 800112a:	7e7a      	ldrb	r2, [r7, #25]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3a6      	bcc.n	800107e <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001130:	8b7b      	ldrh	r3, [r7, #26]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d033      	beq.n	800119e <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800113c:	461a      	mov	r2, r3
 800113e:	7e7b      	ldrb	r3, [r7, #25]
 8001140:	441a      	add	r2, r3
 8001142:	8b7b      	ldrh	r3, [r7, #26]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800114c:	b29b      	uxth	r3, r3
 800114e:	fb12 f303 	smulbb	r3, r2, r3
 8001152:	b29a      	uxth	r2, r3
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	4413      	add	r3, r2
 8001158:	b298      	uxth	r0, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001160:	461a      	mov	r2, r3
 8001162:	7e3b      	ldrb	r3, [r7, #24]
 8001164:	4413      	add	r3, r2
 8001166:	b29a      	uxth	r2, r3
 8001168:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800116c:	b29b      	uxth	r3, r3
 800116e:	fb12 f303 	smulbb	r3, r2, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	89bb      	ldrh	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	b299      	uxth	r1, r3
 800117a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800117e:	b29b      	uxth	r3, r3
 8001180:	8b7a      	ldrh	r2, [r7, #26]
 8001182:	fb12 f303 	smulbb	r3, r2, r3
 8001186:	b29a      	uxth	r2, r3
 8001188:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800118c:	b29c      	uxth	r4, r3
 800118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001190:	b29b      	uxth	r3, r3
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4623      	mov	r3, r4
 8001196:	f7ff fe1a 	bl	8000dce <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800119e:	7e3b      	ldrb	r3, [r7, #24]
 80011a0:	3301      	adds	r3, #1
 80011a2:	763b      	strb	r3, [r7, #24]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	7e3a      	ldrb	r2, [r7, #24]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f4ff af64 	bcc.w	8001078 <LCD_Char+0x30>
		}
	}
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}

080011ba <LCD_centered_Font>:

void LCD_centered_Font (uint16_t x, uint16_t y,  uint16_t length,  char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80011ba:	b590      	push	{r4, r7, lr}
 80011bc:	b093      	sub	sp, #76	; 0x4c
 80011be:	af04      	add	r7, sp, #16
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4603      	mov	r3, r0
 80011c4:	81fb      	strh	r3, [r7, #14]
 80011c6:	460b      	mov	r3, r1
 80011c8:	81bb      	strh	r3, [r7, #12]
 80011ca:	4613      	mov	r3, r2
 80011cc:	817b      	strh	r3, [r7, #10]
	uint16_t row_counter =0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t row_width =0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t end_text_in_row = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t start_text_in_row=0;
 80011da:	2300      	movs	r3, #0
 80011dc:	863b      	strh	r3, [r7, #48]	; 0x30

	GFXfont font;
	bool write_Text=false;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool long_string=false;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	220c      	movs	r2, #12
 80011f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00c fa35 	bl	800d662 <memcpy>
	int16_t font_Y = font.yAdvance*size;
 80011f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001202:	b29b      	uxth	r3, r3
 8001204:	fb12 f303 	smulbb	r3, r2, r3
 8001208:	b29b      	uxth	r3, r3
 800120a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t cursor_x;
	int16_t cursor_y = y;
 800120c:	89bb      	ldrh	r3, [r7, #12]
 800120e:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001210:	2300      	movs	r3, #0
 8001212:	853b      	strh	r3, [r7, #40]	; 0x28
 8001214:	e095      	b.n	8001342 <LCD_centered_Font+0x188>
		{

			char c = text[text_pos];
 8001216:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


			if(c >= font.first && c <= font.last && c != '\r' && c != '\n')
 8001222:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001226:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800122a:	429a      	cmp	r2, r3
 800122c:	d326      	bcc.n	800127c <LCD_centered_Font+0xc2>
 800122e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001232:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001236:	429a      	cmp	r2, r3
 8001238:	d820      	bhi.n	800127c <LCD_centered_Font+0xc2>
 800123a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800123e:	2b0d      	cmp	r3, #13
 8001240:	d01c      	beq.n	800127c <LCD_centered_Font+0xc2>
 8001242:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d018      	beq.n	800127c <LCD_centered_Font+0xc2>
			{
				GFXglyph glyph;
				memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001250:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	18d1      	adds	r1, r2, r3
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2208      	movs	r2, #8
 8001260:	4618      	mov	r0, r3
 8001262:	f00c f9fe 	bl	800d662 <memcpy>
				row_counter+=glyph.xAdvance*size;
 8001266:	7d3b      	ldrb	r3, [r7, #20]
 8001268:	b29a      	uxth	r2, r3
 800126a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800126e:	b29b      	uxth	r3, r3
 8001270:	fb12 f303 	smulbb	r3, r2, r3
 8001274:	b29a      	uxth	r2, r3
 8001276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001278:	4413      	add	r3, r2
 800127a:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
			if (c == '\n')
 800127c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001280:	2b0a      	cmp	r3, #10
 8001282:	d106      	bne.n	8001292 <LCD_centered_Font+0xd8>
			{
				write_Text = true;
 8001284:	2301      	movs	r3, #1
 8001286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				end_text_in_row=text_pos;
 800128a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800128c:	867b      	strh	r3, [r7, #50]	; 0x32
				row_width = row_counter;
 800128e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001290:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if(c==' ')
 8001292:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001296:	2b20      	cmp	r3, #32
 8001298:	d106      	bne.n	80012a8 <LCD_centered_Font+0xee>
			{
				end_text_in_row=text_pos;
 800129a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800129c:	867b      	strh	r3, [r7, #50]	; 0x32
				row_width = row_counter;
 800129e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012a0:	86bb      	strh	r3, [r7, #52]	; 0x34
				long_string = true;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}
			if(row_counter>=length&&long_string)
 80012a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80012aa:	897b      	ldrh	r3, [r7, #10]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d306      	bcc.n	80012be <LCD_centered_Font+0x104>
 80012b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <LCD_centered_Font+0x104>
			{
				write_Text = true;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			if(write_Text)
 80012be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d03a      	beq.n	800133c <LCD_centered_Font+0x182>
			{
				//write linie in the center

				if(x+ (length-row_width)/2>=0)
 80012c6:	89fa      	ldrh	r2, [r7, #14]
 80012c8:	8979      	ldrh	r1, [r7, #10]
 80012ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012cc:	1acb      	subs	r3, r1, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da00      	bge.n	80012d4 <LCD_centered_Font+0x11a>
 80012d2:	3301      	adds	r3, #1
 80012d4:	105b      	asrs	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0c      	blt.n	80012f6 <LCD_centered_Font+0x13c>
				cursor_x =x+ (length-row_width)/2;
 80012dc:	897a      	ldrh	r2, [r7, #10]
 80012de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da00      	bge.n	80012e8 <LCD_centered_Font+0x12e>
 80012e6:	3301      	adds	r3, #1
 80012e8:	105b      	asrs	r3, r3, #1
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80012f4:	e001      	b.n	80012fa <LCD_centered_Font+0x140>
				else cursor_x=0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
				LCD_Row_Font (cursor_x, cursor_y, start_text_in_row, end_text_in_row, text, p_font, size, color24);
 80012fa:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80012fc:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80012fe:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8001300:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4623      	mov	r3, r4
 8001316:	f000 f841 	bl	800139c <LCD_Row_Font>
				start_text_in_row=end_text_in_row;
 800131a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800131c:	863b      	strh	r3, [r7, #48]	; 0x30
				text_pos = end_text_in_row;
 800131e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001320:	853b      	strh	r3, [r7, #40]	; 0x28
				row_counter=0;
 8001322:	2300      	movs	r3, #0
 8001324:	86fb      	strh	r3, [r7, #54]	; 0x36
				write_Text=false;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cursor_y+=font_Y;
 800132c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800132e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	857b      	strh	r3, [r7, #42]	; 0x2a
				long_string = false;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800133c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800133e:	3301      	adds	r3, #1
 8001340:	853b      	strh	r3, [r7, #40]	; 0x28
 8001342:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7fe ffd5 	bl	80002f4 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	429c      	cmp	r4, r3
 800134e:	f4ff af62 	bcc.w	8001216 <LCD_centered_Font+0x5c>

			}
		}
	end_text_in_row=strlen(text);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7fe ffce 	bl	80002f4 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	867b      	strh	r3, [r7, #50]	; 0x32
	cursor_x =x+ (length-row_counter)/2;
 800135c:	897a      	ldrh	r2, [r7, #10]
 800135e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da00      	bge.n	8001368 <LCD_centered_Font+0x1ae>
 8001366:	3301      	adds	r3, #1
 8001368:	105b      	asrs	r3, r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	4413      	add	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	85bb      	strh	r3, [r7, #44]	; 0x2c
	LCD_Row_Font (cursor_x, cursor_y, start_text_in_row, end_text_in_row, text, p_font, size, color24);
 8001374:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001376:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001378:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 800137a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800137c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800137e:	9303      	str	r3, [sp, #12]
 8001380:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4623      	mov	r3, r4
 8001390:	f000 f804 	bl	800139c <LCD_Row_Font>
}
 8001394:	bf00      	nop
 8001396:	373c      	adds	r7, #60	; 0x3c
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}

0800139c <LCD_Row_Font>:

void LCD_Row_Font(uint16_t x, uint16_t y, uint16_t start, uint16_t end, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08d      	sub	sp, #52	; 0x34
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4604      	mov	r4, r0
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	4603      	mov	r3, r0
 80013b0:	80bb      	strh	r3, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	807b      	strh	r3, [r7, #2]
 80013b6:	4613      	mov	r3, r2
 80013b8:	803b      	strh	r3, [r7, #0]

	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	220c      	movs	r2, #12
 80013c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00c f94d 	bl	800d662 <memcpy>
	int16_t cursor_x = x;
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t cursor_y = y + (font.yAdvance*size)/4;
 80013cc:	7fbb      	ldrb	r3, [r7, #30]
 80013ce:	461a      	mov	r2, r3
 80013d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da00      	bge.n	80013de <LCD_Row_Font+0x42>
 80013dc:	3303      	adds	r3, #3
 80013de:	109b      	asrs	r3, r3, #2
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	88bb      	ldrh	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	847b      	strh	r3, [r7, #34]	; 0x22
	//int16_t cursor_y = y;
	for(uint16_t text_pos = start; text_pos < end; text_pos++)
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 80013ee:	e043      	b.n	8001478 <LCD_Row_Font+0xdc>
	{
		char c = text[text_pos];
 80013f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if(c >= font.first && c <= font.last && c != '\r'&& c!='\n')
 80013fc:	7f3b      	ldrb	r3, [r7, #28]
 80013fe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001402:	429a      	cmp	r2, r3
 8001404:	d335      	bcc.n	8001472 <LCD_Row_Font+0xd6>
 8001406:	7f7b      	ldrb	r3, [r7, #29]
 8001408:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800140c:	429a      	cmp	r2, r3
 800140e:	d830      	bhi.n	8001472 <LCD_Row_Font+0xd6>
 8001410:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001414:	2b0d      	cmp	r3, #13
 8001416:	d02c      	beq.n	8001472 <LCD_Row_Font+0xd6>
 8001418:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800141c:	2b0a      	cmp	r3, #10
 800141e:	d028      	beq.n	8001472 <LCD_Row_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001426:	7f39      	ldrb	r1, [r7, #28]
 8001428:	1a5b      	subs	r3, r3, r1
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	18d1      	adds	r1, r2, r3
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2208      	movs	r2, #8
 8001434:	4618      	mov	r0, r3
 8001436:	f00c f914 	bl	800d662 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800143a:	f107 0414 	add.w	r4, r7, #20
 800143e:	f107 020c 	add.w	r2, r7, #12
 8001442:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001446:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 800144a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4623      	mov	r3, r4
 8001456:	f7ff fdf7 	bl	8001048 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800145a:	7c3b      	ldrb	r3, [r7, #16]
 800145c:	b29a      	uxth	r2, r3
 800145e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001462:	b29b      	uxth	r3, r3
 8001464:	fb12 f303 	smulbb	r3, r2, r3
 8001468:	b29a      	uxth	r2, r3
 800146a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800146c:	4413      	add	r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint16_t text_pos = start; text_pos < end; text_pos++)
 8001472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001478:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800147a:	883b      	ldrh	r3, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3b7      	bcc.n	80013f0 <LCD_Row_Font+0x54>
		}
	}
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	372c      	adds	r7, #44	; 0x2c
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}

0800148a <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 800148a:	b590      	push	{r4, r7, lr}
 800148c:	b08f      	sub	sp, #60	; 0x3c
 800148e:	af02      	add	r7, sp, #8
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4603      	mov	r3, r0
 8001496:	81fb      	strh	r3, [r7, #14]
 8001498:	460b      	mov	r3, r1
 800149a:	81bb      	strh	r3, [r7, #12]

	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	220c      	movs	r2, #12
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00c f8dc 	bl	800d662 <memcpy>
	int16_t cursor_x = x;
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y+ (font.yAdvance*size)/4;
 80014ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b2:	461a      	mov	r2, r3
 80014b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da00      	bge.n	80014c2 <LCD_Font+0x38>
 80014c0:	3303      	adds	r3, #3
 80014c2:	109b      	asrs	r3, r3, #2
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	89bb      	ldrh	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80014d2:	e056      	b.n	8001582 <LCD_Font+0xf8>
	{
		char c = text[text_pos];
 80014d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80014e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	d10f      	bne.n	8001508 <LCD_Font+0x7e>
		{
			cursor_x = x;
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80014ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	fb12 f303 	smulbb	r3, r2, r3
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001506:	e039      	b.n	800157c <LCD_Font+0xf2>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8001508:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800150c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001510:	429a      	cmp	r2, r3
 8001512:	d333      	bcc.n	800157c <LCD_Font+0xf2>
 8001514:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001518:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800151c:	429a      	cmp	r2, r3
 800151e:	d82d      	bhi.n	800157c <LCD_Font+0xf2>
 8001520:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001524:	2b0d      	cmp	r3, #13
 8001526:	d029      	beq.n	800157c <LCD_Font+0xf2>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001528:	6a3a      	ldr	r2, [r7, #32]
 800152a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800152e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	18d1      	adds	r1, r2, r3
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2208      	movs	r2, #8
 800153e:	4618      	mov	r0, r3
 8001540:	f00c f88f 	bl	800d662 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001544:	f107 041c 	add.w	r4, r7, #28
 8001548:	f107 0214 	add.w	r2, r7, #20
 800154c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001550:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4623      	mov	r3, r4
 8001560:	f7ff fd72 	bl	8001048 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001564:	7e3b      	ldrb	r3, [r7, #24]
 8001566:	b29a      	uxth	r2, r3
 8001568:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800156c:	b29b      	uxth	r3, r3
 800156e:	fb12 f303 	smulbb	r3, r2, r3
 8001572:	b29a      	uxth	r2, r3
 8001574:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001576:	4413      	add	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800157c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800157e:	3301      	adds	r3, #1
 8001580:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001582:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f7fe feb5 	bl	80002f4 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	429c      	cmp	r4, r3
 800158e:	d3a1      	bcc.n	80014d4 <LCD_Font+0x4a>
		}
	}
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3734      	adds	r7, #52	; 0x34
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}

0800159a <LCD_FillTriangle>:

void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800159a:	b590      	push	{r4, r7, lr}
 800159c:	b091      	sub	sp, #68	; 0x44
 800159e:	af02      	add	r7, sp, #8
 80015a0:	4604      	mov	r4, r0
 80015a2:	4608      	mov	r0, r1
 80015a4:	4611      	mov	r1, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	4623      	mov	r3, r4
 80015aa:	80fb      	strh	r3, [r7, #6]
 80015ac:	4603      	mov	r3, r0
 80015ae:	80bb      	strh	r3, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 80015b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dd0b      	ble.n	80015dc <LCD_FillTriangle+0x42>
		swap(y0, y1);
 80015c4:	88bb      	ldrh	r3, [r7, #4]
 80015c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	80bb      	strh	r3, [r7, #4]
 80015cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ce:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	80fb      	strh	r3, [r7, #6]
 80015d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015da:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 80015dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80015e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dd0f      	ble.n	8001608 <LCD_FillTriangle+0x6e>
		swap(y2, y1);
 80015e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80015ee:	883b      	ldrh	r3, [r7, #0]
 80015f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80015f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80015f6:	803b      	strh	r3, [r7, #0]
		swap(x2, x1);
 80015f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015fc:	843b      	strh	r3, [r7, #32]
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001604:	8c3b      	ldrh	r3, [r7, #32]
 8001606:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 8001608:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800160c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001610:	429a      	cmp	r2, r3
 8001612:	dd0b      	ble.n	800162c <LCD_FillTriangle+0x92>
		swap(y0, y1);
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	83fb      	strh	r3, [r7, #30]
 8001618:	883b      	ldrh	r3, [r7, #0]
 800161a:	80bb      	strh	r3, [r7, #4]
 800161c:	8bfb      	ldrh	r3, [r7, #30]
 800161e:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	83bb      	strh	r3, [r7, #28]
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	8bbb      	ldrh	r3, [r7, #28]
 800162a:	807b      	strh	r3, [r7, #2]
	}

	if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800162c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001630:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001634:	429a      	cmp	r2, r3
 8001636:	d136      	bne.n	80016a6 <LCD_FillTriangle+0x10c>
		a = b = x0;
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800163c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800163e:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(x1 < a)      a = x1;
 8001640:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001644:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001648:	429a      	cmp	r2, r3
 800164a:	da02      	bge.n	8001652 <LCD_FillTriangle+0xb8>
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001650:	e007      	b.n	8001662 <LCD_FillTriangle+0xc8>
		else if(x1 > b) b = x1;
 8001652:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001656:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800165a:	429a      	cmp	r2, r3
 800165c:	dd01      	ble.n	8001662 <LCD_FillTriangle+0xc8>
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(x2 < a)      a = x2;
 8001662:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001666:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800166a:	429a      	cmp	r2, r3
 800166c:	da03      	bge.n	8001676 <LCD_FillTriangle+0xdc>
 800166e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001672:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001674:	e008      	b.n	8001688 <LCD_FillTriangle+0xee>
		else if(x2 > b) b = x2;
 8001676:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800167a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800167e:	429a      	cmp	r2, r3
 8001680:	dd02      	ble.n	8001688 <LCD_FillTriangle+0xee>
 8001682:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001686:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y0, b - a + 1,1, color);
 8001688:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800168a:	88b9      	ldrh	r1, [r7, #4]
 800168c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800168e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	3301      	adds	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2301      	movs	r3, #1
 80016a0:	f7ff f8dc 	bl	800085c <TFT_Draw_HLine>
		return;
 80016a4:	e0d2      	b.n	800184c <LCD_FillTriangle+0x2b2>
	}

	int16_t	dx01 = x1 - x0,
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	837b      	strh	r3, [r7, #26]
			dy01 = y1 - y0,
 80016b0:	883a      	ldrh	r2, [r7, #0]
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	833b      	strh	r3, [r7, #24]
			dx02 = x2 - x0,
 80016ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	82fb      	strh	r3, [r7, #22]
			dy02 = y2 - y0,
 80016c6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	82bb      	strh	r3, [r7, #20]
			dx12 = x2 - x1,
 80016d2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	827b      	strh	r3, [r7, #18]
			dy12 = y2 - y1;
 80016de:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80016e2:	883b      	ldrh	r3, [r7, #0]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	823b      	strh	r3, [r7, #16]
	int32_t	sa   = 0,
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			sb   = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if (y1 == y2) last = y1;   // Include y1 scanline
 80016f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80016f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d102      	bne.n	8001704 <LCD_FillTriangle+0x16a>
 80016fe:	883b      	ldrh	r3, [r7, #0]
 8001700:	863b      	strh	r3, [r7, #48]	; 0x30
 8001702:	e003      	b.n	800170c <LCD_FillTriangle+0x172>
	else last = y1 - 1; // Skip it
 8001704:	883b      	ldrh	r3, [r7, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	863b      	strh	r3, [r7, #48]	; 0x30

	for(y = y0; y <= last; y++) {
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	867b      	strh	r3, [r7, #50]	; 0x32
 8001710:	e03d      	b.n	800178e <LCD_FillTriangle+0x1f4>
		a = x0 + sa / dy01;
 8001712:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001718:	fb92 f3f3 	sdiv	r3, r2, r3
 800171c:	b29a      	uxth	r2, r3
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	4413      	add	r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 8001726:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800172a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800172c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001730:	b29a      	uxth	r2, r3
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx01;
 800173a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	4413      	add	r3, r2
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8001744:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800174a:	4413      	add	r3, r2
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 800174e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001752:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001756:	429a      	cmp	r2, r3
 8001758:	dd05      	ble.n	8001766 <LCD_FillTriangle+0x1cc>
 800175a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800175c:	81bb      	strh	r3, [r7, #12]
 800175e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001760:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001762:	89bb      	ldrh	r3, [r7, #12]
 8001764:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b-a+1,1, color);
 8001766:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001768:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800176a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800176c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	b29b      	uxth	r3, r3
 8001772:	3301      	adds	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	f7ff f86d 	bl	800085c <TFT_Draw_HLine>
	for(y = y0; y <= last; y++) {
 8001782:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001786:	b29b      	uxth	r3, r3
 8001788:	3301      	adds	r3, #1
 800178a:	b29b      	uxth	r3, r3
 800178c:	867b      	strh	r3, [r7, #50]	; 0x32
 800178e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001792:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001796:	429a      	cmp	r2, r3
 8001798:	ddbb      	ble.n	8001712 <LCD_FillTriangle+0x178>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = dx12 * (y - y1);
 800179a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800179e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80017a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017a6:	1a8a      	subs	r2, r1, r2
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sb = dx02 * (y - y0);
 80017ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017b2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80017b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017ba:	1a8a      	subs	r2, r1, r2
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
	for(; y <= y2; y++) {
 80017c2:	e03d      	b.n	8001840 <LCD_FillTriangle+0x2a6>
		a = x1 + sa / dy12;
 80017c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 80017d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017de:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4413      	add	r3, r2
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx12;
 80017ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	4413      	add	r3, r2
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 80017f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017fc:	4413      	add	r3, r2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8001800:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001804:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001808:	429a      	cmp	r2, r3
 800180a:	dd05      	ble.n	8001818 <LCD_FillTriangle+0x27e>
 800180c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800180e:	81fb      	strh	r3, [r7, #14]
 8001810:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001812:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001814:	89fb      	ldrh	r3, [r7, #14]
 8001816:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b - a + 1,1, color);
 8001818:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800181a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800181c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800181e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	3301      	adds	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	f7ff f814 	bl	800085c <TFT_Draw_HLine>
	for(; y <= y2; y++) {
 8001834:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001838:	b29b      	uxth	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b29b      	uxth	r3, r3
 800183e:	867b      	strh	r3, [r7, #50]	; 0x32
 8001840:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001844:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001848:	429a      	cmp	r2, r3
 800184a:	ddbb      	ble.n	80017c4 <LCD_FillTriangle+0x22a>
	}
}
 800184c:	373c      	adds	r7, #60	; 0x3c
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}

08001852 <sort_files>:
    char buffer[needed]; \
    snprintf(buffer, sizeof(buffer), format, __VA_ARGS__); \
    LCD_Font(x, y, buffer, font, size, color); \
} while(0)

void sort_files(FILINFO *tab_files, int number_of_files, bool ascending,enum sort_option option) {
 8001852:	b590      	push	{r4, r7, lr}
 8001854:	b0cd      	sub	sp, #308	; 0x134
 8001856:	af00      	add	r7, sp, #0
 8001858:	f507 7498 	add.w	r4, r7, #304	; 0x130
 800185c:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8001860:	6020      	str	r0, [r4, #0]
 8001862:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8001866:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 800186a:	6001      	str	r1, [r0, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001872:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800187c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001880:	460a      	mov	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
    FILINFO tmp_file;
    int i, j;

    switch (option) {
 8001884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001888:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b02      	cmp	r3, #2
 8001890:	f000 819d 	beq.w	8001bce <sort_files+0x37c>
 8001894:	2b02      	cmp	r3, #2
 8001896:	f300 825f 	bgt.w	8001d58 <sort_files+0x506>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <sort_files+0x54>
 800189e:	2b01      	cmp	r3, #1
 80018a0:	f000 80d0 	beq.w	8001a44 <sort_files+0x1f2>
                }
            }
            break;

        default:
            break;
 80018a4:	e258      	b.n	8001d58 <sort_files+0x506>
            for (i = 0; i < number_of_files - 1; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018ac:	e0be      	b.n	8001a2c <sort_files+0x1da>
                for (j = 0; j < number_of_files - 1 - i; j++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018b4:	e0a7      	b.n	8001a06 <sort_files+0x1b4>
                    if ((ascending && strcmp(tab_files[j].fname, tab_files[j + 1].fname) > 0) ||
 80018b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018ba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d021      	beq.n	8001908 <sort_files+0xb6>
 80018c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018c8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80018d4:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	f103 0016 	add.w	r0, r3, #22
 80018e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018e4:	3301      	adds	r3, #1
 80018e6:	f44f 728c 	mov.w	r2, #280	; 0x118
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80018f2:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	3316      	adds	r3, #22
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7fe fcef 	bl	80002e0 <strcmp>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc2b      	bgt.n	8001960 <sort_files+0x10e>
                        (!ascending && strcmp(tab_files[j].fname, tab_files[j + 1].fname) < 0)) {
 8001908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800190c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	f083 0301 	eor.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
                    if ((ascending && strcmp(tab_files[j].fname, tab_files[j + 1].fname) > 0) ||
 8001918:	2b00      	cmp	r3, #0
 800191a:	d06f      	beq.n	80019fc <sort_files+0x1aa>
                        (!ascending && strcmp(tab_files[j].fname, tab_files[j + 1].fname) < 0)) {
 800191c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001920:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800192c:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	4413      	add	r3, r2
 8001934:	f103 0016 	add.w	r0, r3, #22
 8001938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800193c:	3301      	adds	r3, #1
 800193e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800194a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	4413      	add	r3, r2
 8001952:	3316      	adds	r3, #22
 8001954:	4619      	mov	r1, r3
 8001956:	f7fe fcc3 	bl	80002e0 <strcmp>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	da4d      	bge.n	80019fc <sort_files+0x1aa>
                        tmp_file = tab_files[j + 1];
 8001960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001964:	3301      	adds	r3, #1
 8001966:	f44f 728c 	mov.w	r2, #280	; 0x118
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001972:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	441a      	add	r2, r3
 800197a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800197e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001982:	4618      	mov	r0, r3
 8001984:	4611      	mov	r1, r2
 8001986:	f44f 738c 	mov.w	r3, #280	; 0x118
 800198a:	461a      	mov	r2, r3
 800198c:	f00b fe69 	bl	800d662 <memcpy>
                        tab_files[j + 1] = tab_files[j];
 8001990:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001994:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80019a0:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	18d1      	adds	r1, r2, r3
 80019a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019ac:	3301      	adds	r3, #1
 80019ae:	f44f 728c 	mov.w	r2, #280	; 0x118
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80019ba:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80019c8:	461a      	mov	r2, r3
 80019ca:	f00b fe4a 	bl	800d662 <memcpy>
                        tab_files[j] = tmp_file;
 80019ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019d2:	f44f 728c 	mov.w	r2, #280	; 0x118
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80019de:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	441a      	add	r2, r3
 80019e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80019f6:	461a      	mov	r2, r3
 80019f8:	f00b fe33 	bl	800d662 <memcpy>
                for (j = 0; j < number_of_files - 1 - i; j++) {
 80019fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a00:	3301      	adds	r3, #1
 8001a02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f6ff af4a 	blt.w	80018b6 <sort_files+0x64>
            for (i = 0; i < number_of_files - 1; i++) {
 8001a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a26:	3301      	adds	r3, #1
 8001a28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f6ff af36 	blt.w	80018ae <sort_files+0x5c>
            break;
 8001a42:	e18a      	b.n	8001d5a <sort_files+0x508>
            for (i = 0; i < number_of_files - 1; i++) {
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a4a:	e0b4      	b.n	8001bb6 <sort_files+0x364>
                for (j = 0; j < number_of_files - 1 - i; j++) {
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a52:	e09d      	b.n	8001b90 <sort_files+0x33e>
                    if ((ascending && tab_files[j].fsize > tab_files[j + 1].fsize) ||
 8001a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a58:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01c      	beq.n	8001a9c <sort_files+0x24a>
 8001a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a66:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001a72:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a80:	3301      	adds	r3, #1
 8001a82:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001a8e:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8001a92:	6809      	ldr	r1, [r1, #0]
 8001a94:	440b      	add	r3, r1
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d826      	bhi.n	8001aea <sort_files+0x298>
                        (!ascending && tab_files[j].fsize < tab_files[j + 1].fsize)) {
 8001a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001aa0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	f083 0301 	eor.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
                    if ((ascending && tab_files[j].fsize > tab_files[j + 1].fsize) ||
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d06a      	beq.n	8001b86 <sort_files+0x334>
                        (!ascending && tab_files[j].fsize < tab_files[j + 1].fsize)) {
 8001ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ab4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001ac0:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001adc:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8001ae0:	6809      	ldr	r1, [r1, #0]
 8001ae2:	440b      	add	r3, r1
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d24d      	bcs.n	8001b86 <sort_files+0x334>
                        tmp_file = tab_files[j + 1];
 8001aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001aee:	3301      	adds	r3, #1
 8001af0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001afc:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	441a      	add	r2, r3
 8001b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4611      	mov	r1, r2
 8001b10:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001b14:	461a      	mov	r2, r3
 8001b16:	f00b fda4 	bl	800d662 <memcpy>
                        tab_files[j + 1] = tab_files[j];
 8001b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b1e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001b2a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	18d1      	adds	r1, r2, r3
 8001b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b36:	3301      	adds	r3, #1
 8001b38:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001b44:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001b52:	461a      	mov	r2, r3
 8001b54:	f00b fd85 	bl	800d662 <memcpy>
                        tab_files[j] = tmp_file;
 8001b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b5c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001b68:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	441a      	add	r2, r3
 8001b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001b80:	461a      	mov	r2, r3
 8001b82:	f00b fd6e 	bl	800d662 <memcpy>
                for (j = 0; j < number_of_files - 1 - i; j++) {
 8001b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	f6ff af54 	blt.w	8001a54 <sort_files+0x202>
            for (i = 0; i < number_of_files - 1; i++) {
 8001bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	f6ff af40 	blt.w	8001a4c <sort_files+0x1fa>
            break;
 8001bcc:	e0c5      	b.n	8001d5a <sort_files+0x508>
            for (i = 0; i < number_of_files - 1; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bd4:	e0b4      	b.n	8001d40 <sort_files+0x4ee>
                for (j = 0; j < number_of_files - 1 - i; j++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001bdc:	e09d      	b.n	8001d1a <sort_files+0x4c8>
                    if ((ascending && tab_files[j].ftime > tab_files[j + 1].ftime) ||
 8001bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001be2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01c      	beq.n	8001c26 <sort_files+0x3d4>
 8001bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bf0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001bfc:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	88da      	ldrh	r2, [r3, #6]
 8001c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001c18:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8001c1c:	6809      	ldr	r1, [r1, #0]
 8001c1e:	440b      	add	r3, r1
 8001c20:	88db      	ldrh	r3, [r3, #6]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d826      	bhi.n	8001c74 <sort_files+0x422>
                        (!ascending && tab_files[j].ftime < tab_files[j + 1].ftime)) {
 8001c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c2a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
                    if ((ascending && tab_files[j].ftime > tab_files[j + 1].ftime) ||
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06a      	beq.n	8001d10 <sort_files+0x4be>
                        (!ascending && tab_files[j].ftime < tab_files[j + 1].ftime)) {
 8001c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c3e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001c4a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	88da      	ldrh	r2, [r3, #6]
 8001c54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001c66:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8001c6a:	6809      	ldr	r1, [r1, #0]
 8001c6c:	440b      	add	r3, r1
 8001c6e:	88db      	ldrh	r3, [r3, #6]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d24d      	bcs.n	8001d10 <sort_files+0x4be>
                        tmp_file = tab_files[j + 1];
 8001c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001c86:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c96:	4618      	mov	r0, r3
 8001c98:	4611      	mov	r1, r2
 8001c9a:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f00b fcdf 	bl	800d662 <memcpy>
                        tab_files[j + 1] = tab_files[j];
 8001ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ca8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001cb4:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	18d1      	adds	r1, r2, r3
 8001cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001cce:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f00b fcc0 	bl	800d662 <memcpy>
                        tab_files[j] = tmp_file;
 8001ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ce6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001cf2:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	441a      	add	r2, r3
 8001cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f00b fca9 	bl	800d662 <memcpy>
                for (j = 0; j < number_of_files - 1 - i; j++) {
 8001d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d14:	3301      	adds	r3, #1
 8001d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f6ff af54 	blt.w	8001bde <sort_files+0x38c>
            for (i = 0; i < number_of_files - 1; i++) {
 8001d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d44:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f6ff af40 	blt.w	8001bd6 <sort_files+0x384>
            break;
 8001d56:	e000      	b.n	8001d5a <sort_files+0x508>
            break;
 8001d58:	bf00      	nop
    }
}
 8001d5a:	bf00      	nop
 8001d5c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}

08001d64 <draw_file_list>:

void draw_file_list(int start, int end, bool ascending,enum sort_option option){
 8001d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d68:	b0b5      	sub	sp, #212	; 0xd4
 8001d6a:	af04      	add	r7, sp, #16
 8001d6c:	6378      	str	r0, [r7, #52]	; 0x34
 8001d6e:	6339      	str	r1, [r7, #48]	; 0x30
 8001d70:	4619      	mov	r1, r3
 8001d72:	4613      	mov	r3, r2
 8001d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d78:	460b      	mov	r3, r1
 8001d7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001d7e:	466b      	mov	r3, sp
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
	int number_of_files = count_files();
 8001d82:	f002 f95d 	bl	8004040 <count_files>
 8001d86:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	char buffer2[100];
	FILINFO tab_files[number_of_files];
 8001d8a:	f8d7 60b0 	ldr.w	r6, [r7, #176]	; 0xb0
 8001d8e:	1e73      	subs	r3, r6, #1
 8001d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001d94:	4632      	mov	r2, r6
 8001d96:	2300      	movs	r3, #0
 8001d98:	623a      	str	r2, [r7, #32]
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	00d9      	lsls	r1, r3, #3
 8001daa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dae:	00d0      	lsls	r0, r2, #3
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	1854      	adds	r4, r2, r1
 8001db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dba:	eb43 0501 	adc.w	r5, r3, r1
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	00ab      	lsls	r3, r5, #2
 8001dc8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001dcc:	00a2      	lsls	r2, r4, #2
 8001dce:	4614      	mov	r4, r2
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	ebb4 0a03 	subs.w	sl, r4, r3
 8001ddc:	4613      	mov	r3, r2
 8001dde:	eb65 0b03 	sbc.w	fp, r5, r3
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001df2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df6:	4632      	mov	r2, r6
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61ba      	str	r2, [r7, #24]
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001e02:	4622      	mov	r2, r4
 8001e04:	462b      	mov	r3, r5
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	00d9      	lsls	r1, r3, #3
 8001e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e14:	00d0      	lsls	r0, r2, #3
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	eb12 0801 	adds.w	r8, r2, r1
 8001e20:	4629      	mov	r1, r5
 8001e22:	eb43 0901 	adc.w	r9, r3, r1
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8001e32:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001e36:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	4623      	mov	r3, r4
 8001e40:	ebb8 0303 	subs.w	r3, r8, r3
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	462b      	mov	r3, r5
 8001e48:	eb69 0303 	sbc.w	r3, r9, r3
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	018b      	lsls	r3, r1, #6
 8001e5e:	4621      	mov	r1, r4
 8001e60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e64:	4621      	mov	r1, r4
 8001e66:	018a      	lsls	r2, r1, #6
 8001e68:	4632      	mov	r2, r6
 8001e6a:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	3307      	adds	r3, #7
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	ebad 0d03 	sub.w	sp, sp, r3
 8001e7c:	ab04      	add	r3, sp, #16
 8001e7e:	3303      	adds	r3, #3
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int counter=0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	if (start>1){
 8001e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	dd17      	ble.n	8001ec4 <draw_file_list+0x160>
		TFT_Draw_Fill_Round_Rect (142, 158, 40, 40, 20,  0xD6BA);
 8001e94:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2328      	movs	r3, #40	; 0x28
 8001ea0:	2228      	movs	r2, #40	; 0x28
 8001ea2:	219e      	movs	r1, #158	; 0x9e
 8001ea4:	208e      	movs	r0, #142	; 0x8e
 8001ea6:	f7ff f86e 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
		LCD_FillTriangle(150, 185,150+23, 185, 161, 165, 0x00FD);
 8001eaa:	23fd      	movs	r3, #253	; 0xfd
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	23a5      	movs	r3, #165	; 0xa5
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	23a1      	movs	r3, #161	; 0xa1
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	23b9      	movs	r3, #185	; 0xb9
 8001eb8:	22ad      	movs	r2, #173	; 0xad
 8001eba:	21b9      	movs	r1, #185	; 0xb9
 8001ebc:	2096      	movs	r0, #150	; 0x96
 8001ebe:	f7ff fb6c 	bl	800159a <LCD_FillTriangle>
 8001ec2:	e008      	b.n	8001ed6 <draw_file_list+0x172>
	}
	else TFT_Draw_Fill_Rectangle(142, 158, 40, 40, background_color);
 8001ec4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2328      	movs	r3, #40	; 0x28
 8001ecc:	2228      	movs	r2, #40	; 0x28
 8001ece:	219e      	movs	r1, #158	; 0x9e
 8001ed0:	208e      	movs	r0, #142	; 0x8e
 8001ed2:	f7fe ff7c 	bl	8000dce <TFT_Draw_Fill_Rectangle>
	if (end<number_of_files){
 8001ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001edc:	429a      	cmp	r2, r3
 8001ede:	da1b      	bge.n	8001f18 <draw_file_list+0x1b4>
		TFT_Draw_Fill_Round_Rect (142, 425, 40, 40, 20,  0xD6BA);
 8001ee0:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2314      	movs	r3, #20
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2328      	movs	r3, #40	; 0x28
 8001eec:	2228      	movs	r2, #40	; 0x28
 8001eee:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001ef2:	208e      	movs	r0, #142	; 0x8e
 8001ef4:	f7ff f847 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
		LCD_FillTriangle(150, 432,150+23, 432, 161, 452, 0x00FD);
 8001ef8:	23fd      	movs	r3, #253	; 0xfd
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	23a1      	movs	r3, #161	; 0xa1
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001f0a:	22ad      	movs	r2, #173	; 0xad
 8001f0c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001f10:	2096      	movs	r0, #150	; 0x96
 8001f12:	f7ff fb42 	bl	800159a <LCD_FillTriangle>
 8001f16:	e009      	b.n	8001f2c <draw_file_list+0x1c8>
	}
	else TFT_Draw_Fill_Rectangle(142, 425, 40, 40, background_color);
 8001f18:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2328      	movs	r3, #40	; 0x28
 8001f20:	2228      	movs	r2, #40	; 0x28
 8001f22:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001f26:	208e      	movs	r0, #142	; 0x8e
 8001f28:	f7fe ff51 	bl	8000dce <TFT_Draw_Fill_Rectangle>
	if (f_opendir (&directory,"/") == FR_OK) {
 8001f2c:	49a8      	ldr	r1, [pc, #672]	; (80021d0 <draw_file_list+0x46c>)
 8001f2e:	48a9      	ldr	r0, [pc, #676]	; (80021d4 <draw_file_list+0x470>)
 8001f30:	f00a fe4f 	bl	800cbd2 <f_opendir>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d128      	bne.n	8001f8c <draw_file_list+0x228>
			for (;;) {
			  if (f_readdir(&directory, &fno) != FR_OK|| fno.fname[0] == 0) break;  /* Error or end of dir */
 8001f3a:	49a7      	ldr	r1, [pc, #668]	; (80021d8 <draw_file_list+0x474>)
 8001f3c:	48a5      	ldr	r0, [pc, #660]	; (80021d4 <draw_file_list+0x470>)
 8001f3e:	f00a fee1 	bl	800cd04 <f_readdir>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d121      	bne.n	8001f8c <draw_file_list+0x228>
 8001f48:	4ba3      	ldr	r3, [pc, #652]	; (80021d8 <draw_file_list+0x474>)
 8001f4a:	7d9b      	ldrb	r3, [r3, #22]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01d      	beq.n	8001f8c <draw_file_list+0x228>
			  if ((strstr(fno.fname, ".txt") != NULL)) {
 8001f50:	49a2      	ldr	r1, [pc, #648]	; (80021dc <draw_file_list+0x478>)
 8001f52:	48a3      	ldr	r0, [pc, #652]	; (80021e0 <draw_file_list+0x47c>)
 8001f54:	f00b fae4 	bl	800d520 <strstr>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ed      	beq.n	8001f3a <draw_file_list+0x1d6>
				tab_files[counter]=fno;
 8001f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f66:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a99      	ldr	r2, [pc, #612]	; (80021d8 <draw_file_list+0x474>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	4611      	mov	r1, r2
 8001f76:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f00b fb71 	bl	800d662 <memcpy>
				counter++;
 8001f80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f84:	3301      	adds	r3, #1
 8001f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			  if (f_readdir(&directory, &fno) != FR_OK|| fno.fname[0] == 0) break;  /* Error or end of dir */
 8001f8a:	e7d6      	b.n	8001f3a <draw_file_list+0x1d6>
			  }
			}
		}
	  f_closedir(&directory);
 8001f8c:	4891      	ldr	r0, [pc, #580]	; (80021d4 <draw_file_list+0x470>)
 8001f8e:	f00a fe93 	bl	800ccb8 <f_closedir>

	  sort_files(tab_files, number_of_files, ascending, option);
 8001f92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f96:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001f9a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001f9e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001fa2:	f7ff fc56 	bl	8001852 <sort_files>


	int position=0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	for (int i=0; i< number_of_files;i++){
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fb2:	e0fe      	b.n	80021b2 <draw_file_list+0x44e>
		if(i >=(start > -1 ? start-1 : 0)&&i<(end < number_of_files ? end  : number_of_files )){
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db02      	blt.n	8001fc0 <draw_file_list+0x25c>
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <draw_file_list+0x25e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	f300 80ee 	bgt.w	80021a8 <draw_file_list+0x444>
 8001fcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	bfa8      	it	ge
 8001fd6:	4613      	movge	r3, r2
 8001fd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f280 80e3 	bge.w	80021a8 <draw_file_list+0x444>
			LCD_Font_Dynamic(206, 280+position, _Open_Sans_Bold_14, 1, BLACK, "%10u %s, %02d-%02d-%04d\n",
 8001fe2:	466b      	mov	r3, sp
 8001fe4:	4698      	mov	r8, r3
 8001fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fee:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	681d      	ldr	r5, [r3, #0]
 8001ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ffe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	3310      	adds	r3, #16
 8002008:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800200c:	4413      	add	r3, r2
 800200e:	3306      	adds	r3, #6
 8002010:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002014:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002018:	f44f 708c 	mov.w	r0, #280	; 0x118
 800201c:	fb00 f202 	mul.w	r2, r0, r2
 8002020:	440a      	add	r2, r1
 8002022:	3204      	adds	r2, #4
 8002024:	8812      	ldrh	r2, [r2, #0]
 8002026:	f002 021f 	and.w	r2, r2, #31
 800202a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800202e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002032:	f44f 748c 	mov.w	r4, #280	; 0x118
 8002036:	fb04 f101 	mul.w	r1, r4, r1
 800203a:	4401      	add	r1, r0
 800203c:	3104      	adds	r1, #4
 800203e:	8809      	ldrh	r1, [r1, #0]
 8002040:	0949      	lsrs	r1, r1, #5
 8002042:	b289      	uxth	r1, r1
 8002044:	f001 010f 	and.w	r1, r1, #15
 8002048:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800204c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002050:	f44f 768c 	mov.w	r6, #280	; 0x118
 8002054:	fb06 f000 	mul.w	r0, r6, r0
 8002058:	4420      	add	r0, r4
 800205a:	3004      	adds	r0, #4
 800205c:	8800      	ldrh	r0, [r0, #0]
 800205e:	0a40      	lsrs	r0, r0, #9
 8002060:	b280      	uxth	r0, r0
 8002062:	f200 70bc 	addw	r0, r0, #1980	; 0x7bc
 8002066:	9003      	str	r0, [sp, #12]
 8002068:	9102      	str	r1, [sp, #8]
 800206a:	9201      	str	r2, [sp, #4]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	462b      	mov	r3, r5
 8002070:	4a5c      	ldr	r2, [pc, #368]	; (80021e4 <draw_file_list+0x480>)
 8002072:	2100      	movs	r1, #0
 8002074:	2000      	movs	r0, #0
 8002076:	f00b f957 	bl	800d328 <sniprintf>
 800207a:	4603      	mov	r3, r0
 800207c:	3301      	adds	r3, #1
 800207e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002086:	1e4b      	subs	r3, r1, #1
 8002088:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800208c:	460a      	mov	r2, r1
 800208e:	2300      	movs	r3, #0
 8002090:	613a      	str	r2, [r7, #16]
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020a0:	4628      	mov	r0, r5
 80020a2:	00c3      	lsls	r3, r0, #3
 80020a4:	4620      	mov	r0, r4
 80020a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020aa:	4620      	mov	r0, r4
 80020ac:	00c2      	lsls	r2, r0, #3
 80020ae:	460a      	mov	r2, r1
 80020b0:	2300      	movs	r3, #0
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020c2:	4628      	mov	r0, r5
 80020c4:	00c3      	lsls	r3, r0, #3
 80020c6:	4620      	mov	r0, r4
 80020c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020cc:	4620      	mov	r0, r4
 80020ce:	00c2      	lsls	r2, r0, #3
 80020d0:	460b      	mov	r3, r1
 80020d2:	3307      	adds	r3, #7
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	ebad 0d03 	sub.w	sp, sp, r3
 80020dc:	ab04      	add	r3, sp, #16
 80020de:	3300      	adds	r3, #0
 80020e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020e4:	468c      	mov	ip, r1
 80020e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020ee:	f44f 718c 	mov.w	r1, #280	; 0x118
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	681d      	ldr	r5, [r3, #0]
 80020fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020fe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	3310      	adds	r3, #16
 8002108:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800210c:	4413      	add	r3, r2
 800210e:	1d98      	adds	r0, r3, #6
 8002110:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002118:	f44f 718c 	mov.w	r1, #280	; 0x118
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3304      	adds	r3, #4
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f003 041f 	and.w	r4, r3, #31
 800212a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800212e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002132:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b29b      	uxth	r3, r3
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800214c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002150:	f44f 768c 	mov.w	r6, #280	; 0x118
 8002154:	fb06 f303 	mul.w	r3, r6, r3
 8002158:	440b      	add	r3, r1
 800215a:	3304      	adds	r3, #4
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	0a5b      	lsrs	r3, r3, #9
 8002160:	b29b      	uxth	r3, r3
 8002162:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	9202      	str	r2, [sp, #8]
 800216a:	9401      	str	r4, [sp, #4]
 800216c:	9000      	str	r0, [sp, #0]
 800216e:	462b      	mov	r3, r5
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <draw_file_list+0x480>)
 8002172:	4661      	mov	r1, ip
 8002174:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002178:	f00b f8d6 	bl	800d328 <sniprintf>
 800217c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002180:	b29b      	uxth	r3, r3
 8002182:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002186:	b299      	uxth	r1, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2301      	movs	r3, #1
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <draw_file_list+0x484>)
 8002192:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002196:	20ce      	movs	r0, #206	; 0xce
 8002198:	f7ff f977 	bl	800148a <LCD_Font>
 800219c:	46c5      	mov	sp, r8
			    tab_files[i].fsize,
			    tab_files[i].fname,
			    tab_files[i].fdate & 0x1F, /* Dzień */
			    (tab_files[i].fdate >> 5) & 0xF, /* Miesiąc */
			    (tab_files[i].fdate >> 9) + 1980); /* Rok */
			  position+=14;
 800219e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021a2:	330e      	adds	r3, #14
 80021a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	for (int i=0; i< number_of_files;i++){
 80021a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ac:	3301      	adds	r3, #1
 80021ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021ba:	429a      	cmp	r2, r3
 80021bc:	f6ff aefa 	blt.w	8001fb4 <draw_file_list+0x250>
 80021c0:	f8d7 d028 	ldr.w	sp, [r7, #40]	; 0x28
		}
	}

}
 80021c4:	bf00      	nop
 80021c6:	37c4      	adds	r7, #196	; 0xc4
 80021c8:	46bd      	mov	sp, r7
 80021ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ce:	bf00      	nop
 80021d0:	0800e4b0 	.word	0x0800e4b0
 80021d4:	240000e0 	.word	0x240000e0
 80021d8:	24000114 	.word	0x24000114
 80021dc:	0800e4b4 	.word	0x0800e4b4
 80021e0:	2400012a 	.word	0x2400012a
 80021e4:	0800e4bc 	.word	0x0800e4bc
 80021e8:	0800fb74 	.word	0x0800fb74

080021ec <print_file_info>:

void print_file_info(int file_number){
 80021ec:	b5b0      	push	{r4, r5, r7, lr}
 80021ee:	b0bc      	sub	sp, #240	; 0xf0
 80021f0:	af04      	add	r7, sp, #16
 80021f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	char buffer2[100];
	struct file_info info;
	info = get_file_info(file_number);
 80021f4:	463b      	mov	r3, r7
 80021f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 ff55 	bl	80040a8 <get_file_info>
 80021fe:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8002202:	463d      	mov	r5, r7
 8002204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002210:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002214:	e884 0003 	stmia.w	r4, {r0, r1}
	sprintf(buffer2, "%10u %s, %02d-%02d-%04d\n",
 8002218:	6c7c      	ldr	r4, [r7, #68]	; 0x44
		info.size,
		info.name,
		info.date & 0x1F, /* Day */
 800221a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
	sprintf(buffer2, "%10u %s, %02d-%02d-%04d\n",
 800221e:	f003 031f 	and.w	r3, r3, #31
		(info.date >> 5) & 0xF,    /* Month */
 8002222:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
	sprintf(buffer2, "%10u %s, %02d-%02d-%04d\n",
 8002226:	0952      	lsrs	r2, r2, #5
 8002228:	b292      	uxth	r2, r2
 800222a:	f002 020f 	and.w	r2, r2, #15
		(info.date >> 9) + 1980);    /* Year */
 800222e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8002232:	0a49      	lsrs	r1, r1, #9
 8002234:	b289      	uxth	r1, r1
	sprintf(buffer2, "%10u %s, %02d-%02d-%04d\n",
 8002236:	f201 71bc 	addw	r1, r1, #1980	; 0x7bc
 800223a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800223e:	1d85      	adds	r5, r0, #6
 8002240:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8002244:	9102      	str	r1, [sp, #8]
 8002246:	9201      	str	r2, [sp, #4]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	462b      	mov	r3, r5
 800224c:	4622      	mov	r2, r4
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <print_file_info+0x88>)
 8002250:	f00b f89e 	bl	800d390 <siprintf>
	LCD_Font(206, 450,  buffer2, _Open_Sans_Bold_14, 1, BLACK);/* File */
 8002254:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2301      	movs	r3, #1
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <print_file_info+0x8c>)
 8002262:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002266:	20ce      	movs	r0, #206	; 0xce
 8002268:	f7ff f90f 	bl	800148a <LCD_Font>
}
 800226c:	bf00      	nop
 800226e:	37e0      	adds	r7, #224	; 0xe0
 8002270:	46bd      	mov	sp, r7
 8002272:	bdb0      	pop	{r4, r5, r7, pc}
 8002274:	0800e4bc 	.word	0x0800e4bc
 8002278:	0800fb74 	.word	0x0800fb74

0800227c <draw_file_menu>:



void draw_file_menu(){
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af04      	add	r7, sp, #16
	TFT_Draw_Fill_Rectangle(120,144, 560, 336, background_color);
 8002282:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800228c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002290:	2190      	movs	r1, #144	; 0x90
 8002292:	2078      	movs	r0, #120	; 0x78
 8002294:	f7fe fd9b 	bl	8000dce <TFT_Draw_Fill_Rectangle>
	TFT_Draw_Fill_Round_Rect (206, 156, 119, 41, 10,  0xD6BA);
 8002298:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	230a      	movs	r3, #10
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2329      	movs	r3, #41	; 0x29
 80022a4:	2277      	movs	r2, #119	; 0x77
 80022a6:	219c      	movs	r1, #156	; 0x9c
 80022a8:	20ce      	movs	r0, #206	; 0xce
 80022aa:	f7fe fe6c 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (349, 156, 119, 41, 10,  0xD6BA);
 80022ae:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	230a      	movs	r3, #10
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2329      	movs	r3, #41	; 0x29
 80022ba:	2277      	movs	r2, #119	; 0x77
 80022bc:	219c      	movs	r1, #156	; 0x9c
 80022be:	f240 105d 	movw	r0, #349	; 0x15d
 80022c2:	f7fe fe60 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (492, 156, 119, 41, 10,  0xD6BA);
 80022c6:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	230a      	movs	r3, #10
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2329      	movs	r3, #41	; 0x29
 80022d2:	2277      	movs	r2, #119	; 0x77
 80022d4:	219c      	movs	r1, #156	; 0x9c
 80022d6:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 80022da:	f7fe fe54 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
	LCD_centered_Font(206, 156+21, 119, "Open file", _Open_Sans_Bold_14, 1, BLACK);
 80022de:	2300      	movs	r3, #0
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <draw_file_menu+0xf4>)
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <draw_file_menu+0xf8>)
 80022ec:	2277      	movs	r2, #119	; 0x77
 80022ee:	21b1      	movs	r1, #177	; 0xb1
 80022f0:	20ce      	movs	r0, #206	; 0xce
 80022f2:	f7fe ff62 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(349, 156+21, 119, "Create File", _Open_Sans_Bold_14, 1, BLACK);
 80022f6:	2300      	movs	r3, #0
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	2301      	movs	r3, #1
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <draw_file_menu+0xf4>)
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <draw_file_menu+0xfc>)
 8002304:	2277      	movs	r2, #119	; 0x77
 8002306:	21b1      	movs	r1, #177	; 0xb1
 8002308:	f240 105d 	movw	r0, #349	; 0x15d
 800230c:	f7fe ff55 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(492, 156+21, 119, "Delete File", _Open_Sans_Bold_14, 1, BLACK);
 8002310:	2300      	movs	r3, #0
 8002312:	9302      	str	r3, [sp, #8]
 8002314:	2301      	movs	r3, #1
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <draw_file_menu+0xf4>)
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4b17      	ldr	r3, [pc, #92]	; (800237c <draw_file_menu+0x100>)
 800231e:	2277      	movs	r2, #119	; 0x77
 8002320:	21b1      	movs	r1, #177	; 0xb1
 8002322:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 8002326:	f7fe ff48 	bl	80011ba <LCD_centered_Font>
	LCD_Font(206, 206+21,  "File name:", _Open_Sans_Bold_14, 1, BLACK);
 800232a:	2300      	movs	r3, #0
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2301      	movs	r3, #1
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <draw_file_menu+0xf4>)
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <draw_file_menu+0x104>)
 8002336:	21e3      	movs	r1, #227	; 0xe3
 8002338:	20ce      	movs	r0, #206	; 0xce
 800233a:	f7ff f8a6 	bl	800148a <LCD_Font>
	LCD_Font(472, 206+21, "Date:", _Open_Sans_Bold_14, 1, BLACK);
 800233e:	2300      	movs	r3, #0
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	2301      	movs	r3, #1
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <draw_file_menu+0xf4>)
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <draw_file_menu+0x108>)
 800234a:	21e3      	movs	r1, #227	; 0xe3
 800234c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8002350:	f7ff f89b 	bl	800148a <LCD_Font>
	LCD_Font(590, 206+21, "Size:", _Open_Sans_Bold_14, 1, BLACK);
 8002354:	2300      	movs	r3, #0
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	2301      	movs	r3, #1
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <draw_file_menu+0xf4>)
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <draw_file_menu+0x10c>)
 8002360:	21e3      	movs	r1, #227	; 0xe3
 8002362:	f240 204e 	movw	r0, #590	; 0x24e
 8002366:	f7ff f890 	bl	800148a <LCD_Font>

}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800fb74 	.word	0x0800fb74
 8002374:	0800e4d8 	.word	0x0800e4d8
 8002378:	0800e4e4 	.word	0x0800e4e4
 800237c:	0800e4f0 	.word	0x0800e4f0
 8002380:	0800e4fc 	.word	0x0800e4fc
 8002384:	0800e508 	.word	0x0800e508
 8002388:	0800e510 	.word	0x0800e510

0800238c <draw_main_menu>:

void draw_main_menu(){
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	  TFT_Clear_Screen(background_color);
 8002390:	f64c 70ff 	movw	r0, #53247	; 0xcfff
 8002394:	f7fe fa38 	bl	8000808 <TFT_Clear_Screen>
	  draw_top_panel();
 8002398:	f000 f9dc 	bl	8002754 <draw_top_panel>
	  draw_right_panel();
 800239c:	f000 f804 	bl	80023a8 <draw_right_panel>
	  draw_left_panel();
 80023a0:	f000 f90c 	bl	80025bc <draw_left_panel>
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <draw_right_panel>:
void draw_right_panel(){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af04      	add	r7, sp, #16
	int pos_y;
	TFT_Draw_Fill_Rectangle(780,0, 20, 20, 0x8C51);//szary prostokąt z prawej
 80023ae:	f648 4351 	movw	r3, #35921	; 0x8c51
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2314      	movs	r3, #20
 80023b6:	2214      	movs	r2, #20
 80023b8:	2100      	movs	r1, #0
 80023ba:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80023be:	f7fe fd06 	bl	8000dce <TFT_Draw_Fill_Rectangle>
	TFT_Draw_Fill_Rectangle(780,460, 20, 20, 0x8C51);
 80023c2:	f648 4351 	movw	r3, #35921	; 0x8c51
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2314      	movs	r3, #20
 80023ca:	2214      	movs	r2, #20
 80023cc:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80023d0:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80023d4:	f7fe fcfb 	bl	8000dce <TFT_Draw_Fill_Rectangle>
	TFT_Draw_Fill_Round_Rect (680, 0, 120, 480, 20, 0x8C51);
 80023d8:	f648 4351 	movw	r3, #35921	; 0x8c51
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2314      	movs	r3, #20
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023e6:	2278      	movs	r2, #120	; 0x78
 80023e8:	2100      	movs	r1, #0
 80023ea:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 80023ee:	f7fe fdca 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
	pos_y = 9;
 80023f2:	2309      	movs	r3, #9
 80023f4:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i<7;i+=1)//przyciski po prawej
 80023f6:	2300      	movs	r3, #0
 80023f8:	70fb      	strb	r3, [r7, #3]
 80023fa:	e02d      	b.n	8002458 <draw_right_panel+0xb0>
	{
		TFT_Draw_Fill_Round_Rect (696, pos_y, 88, 47, 10,  0xD6BA);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	b299      	uxth	r1, r3
 8002400:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	230a      	movs	r3, #10
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	232f      	movs	r3, #47	; 0x2f
 800240c:	2258      	movs	r2, #88	; 0x58
 800240e:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002412:	f7fe fdb8 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
		TFT_Draw_Fill_Rectangle(740,pos_y, 2, 47, 0x0000);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	b299      	uxth	r1, r3
 800241a:	2300      	movs	r3, #0
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	232f      	movs	r3, #47	; 0x2f
 8002420:	2202      	movs	r2, #2
 8002422:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8002426:	f7fe fcd2 	bl	8000dce <TFT_Draw_Fill_Rectangle>
		LCD_centered_Font(696, pos_y+24, 88, "+   -", _Open_Sans_Bold_48, 1, 0x4A69);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	b29b      	uxth	r3, r3
 800242e:	3318      	adds	r3, #24
 8002430:	b299      	uxth	r1, r3
 8002432:	f644 2369 	movw	r3, #19049	; 0x4a69
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	2301      	movs	r3, #1
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	4b56      	ldr	r3, [pc, #344]	; (8002598 <draw_right_panel+0x1f0>)
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4b56      	ldr	r3, [pc, #344]	; (800259c <draw_right_panel+0x1f4>)
 8002442:	2258      	movs	r2, #88	; 0x58
 8002444:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002448:	f7fe feb7 	bl	80011ba <LCD_centered_Font>
		pos_y+=56;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3338      	adds	r3, #56	; 0x38
 8002450:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i<7;i+=1)//przyciski po prawej
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	3301      	adds	r3, #1
 8002456:	70fb      	strb	r3, [r7, #3]
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d9ce      	bls.n	80023fc <draw_right_panel+0x54>
	}
	TFT_Draw_Fill_Round_Rect (696, 413, 88, 47, 10,  0xD6BA);
 800245e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	230a      	movs	r3, #10
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	232f      	movs	r3, #47	; 0x2f
 800246a:	2258      	movs	r2, #88	; 0x58
 800246c:	f240 119d 	movw	r1, #413	; 0x19d
 8002470:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002474:	f7fe fd87 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Rectangle(740, 413, 2, 47, 0x0000);
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	232f      	movs	r3, #47	; 0x2f
 800247e:	2202      	movs	r2, #2
 8002480:	f240 119d 	movw	r1, #413	; 0x19d
 8002484:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8002488:	f7fe fca1 	bl	8000dce <TFT_Draw_Fill_Rectangle>
	LCD_centered_Font(696, 413+24, 88, "+   -", _Open_Sans_Bold_48, 1, 0x4A69);
 800248c:	f644 2369 	movw	r3, #19049	; 0x4a69
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2301      	movs	r3, #1
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <draw_right_panel+0x1f0>)
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <draw_right_panel+0x1f4>)
 800249c:	2258      	movs	r2, #88	; 0x58
 800249e:	f240 11b5 	movw	r1, #437	; 0x1b5
 80024a2:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80024a6:	f7fe fe88 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(696, 9+25, 88, "X", _Open_Sans_Bold_48, 1, 0x7D3D);//literki po prawej
 80024aa:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	2301      	movs	r3, #1
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <draw_right_panel+0x1f0>)
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <draw_right_panel+0x1f8>)
 80024ba:	2258      	movs	r2, #88	; 0x58
 80024bc:	2122      	movs	r1, #34	; 0x22
 80024be:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80024c2:	f7fe fe7a 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(696, 65+25, 88, "Y", _Open_Sans_Bold_48, 1, 0x7D3D);
 80024c6:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	2301      	movs	r3, #1
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	4b31      	ldr	r3, [pc, #196]	; (8002598 <draw_right_panel+0x1f0>)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <draw_right_panel+0x1fc>)
 80024d6:	2258      	movs	r2, #88	; 0x58
 80024d8:	215a      	movs	r1, #90	; 0x5a
 80024da:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80024de:	f7fe fe6c 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(696, 121+25, 88, "Z", _Open_Sans_Bold_48, 1, 0x7D3D);
 80024e2:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	2301      	movs	r3, #1
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <draw_right_panel+0x1f0>)
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <draw_right_panel+0x200>)
 80024f2:	2258      	movs	r2, #88	; 0x58
 80024f4:	2192      	movs	r1, #146	; 0x92
 80024f6:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80024fa:	f7fe fe5e 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(696, 177+25, 88, "A", _Open_Sans_Bold_48, 1, 0x7D3D);
 80024fe:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002502:	9302      	str	r3, [sp, #8]
 8002504:	2301      	movs	r3, #1
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <draw_right_panel+0x1f0>)
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <draw_right_panel+0x204>)
 800250e:	2258      	movs	r2, #88	; 0x58
 8002510:	21ca      	movs	r1, #202	; 0xca
 8002512:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002516:	f7fe fe50 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(696, 233+25, 88, "B", _Open_Sans_Bold_48, 1, 0x7D3D);
 800251a:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	2301      	movs	r3, #1
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <draw_right_panel+0x1f0>)
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <draw_right_panel+0x208>)
 800252a:	2258      	movs	r2, #88	; 0x58
 800252c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002530:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002534:	f7fe fe41 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(696, 289+25, 88, "C", _Open_Sans_Bold_48, 1, 0x7D3D);
 8002538:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	2301      	movs	r3, #1
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <draw_right_panel+0x1f0>)
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <draw_right_panel+0x20c>)
 8002548:	2258      	movs	r2, #88	; 0x58
 800254a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800254e:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002552:	f7fe fe32 	bl	80011ba <LCD_centered_Font>
	LCD_FillTriangle(732, 417,732, 417+38, 732+24, 417+19, 0x7D3D);
 8002556:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800255a:	9302      	str	r3, [sp, #8]
 800255c:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f240 13c7 	movw	r3, #455	; 0x1c7
 800256c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8002570:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002574:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8002578:	f7ff f80f 	bl	800159a <LCD_FillTriangle>
	TFT_Draw_Bitmap_Without_Background(721, 353, hand_icon_x, hand_icon_y, hand_icon);
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <draw_right_panel+0x210>)
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	231f      	movs	r3, #31
 8002582:	2229      	movs	r2, #41	; 0x29
 8002584:	f240 1161 	movw	r1, #353	; 0x161
 8002588:	f240 20d1 	movw	r0, #721	; 0x2d1
 800258c:	f7fe fb98 	bl	8000cc0 <TFT_Draw_Bitmap_Without_Background>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	08012ff8 	.word	0x08012ff8
 800259c:	0800e518 	.word	0x0800e518
 80025a0:	0800e520 	.word	0x0800e520
 80025a4:	0800e524 	.word	0x0800e524
 80025a8:	0800e528 	.word	0x0800e528
 80025ac:	0800e52c 	.word	0x0800e52c
 80025b0:	0800e530 	.word	0x0800e530
 80025b4:	0800e534 	.word	0x0800e534
 80025b8:	0800e6dc 	.word	0x0800e6dc

080025bc <draw_left_panel>:

void draw_left_panel(){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af04      	add	r7, sp, #16
	int pos_y;
    TFT_Draw_Fill_Rectangle(0,0, 20, 20, 0x8C51);//szary prostokąt z lewej
 80025c2:	f648 4351 	movw	r3, #35921	; 0x8c51
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2314      	movs	r3, #20
 80025ca:	2214      	movs	r2, #20
 80025cc:	2100      	movs	r1, #0
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fbfd 	bl	8000dce <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Fill_Rectangle(0,460, 20, 20, 0x8C51);
 80025d4:	f648 4351 	movw	r3, #35921	; 0x8c51
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2314      	movs	r3, #20
 80025dc:	2214      	movs	r2, #20
 80025de:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fbf3 	bl	8000dce <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Fill_Round_Rect (0, 0, 120, 480, 20, 0x8C51);
 80025e8:	f648 4351 	movw	r3, #35921	; 0x8c51
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2314      	movs	r3, #20
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025f6:	2278      	movs	r2, #120	; 0x78
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fcc3 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
    pos_y = 33;
 8002600:	2321      	movs	r3, #33	; 0x21
 8002602:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i<8;i+=1)//przyciski po lewej
 8002604:	2300      	movs	r3, #0
 8002606:	70fb      	strb	r3, [r7, #3]
 8002608:	e011      	b.n	800262e <draw_left_panel+0x72>
    {
        TFT_Draw_Fill_Round_Rect (16, pos_y, 88, 47, 10,  0xD6BA);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	b299      	uxth	r1, r3
 800260e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	230a      	movs	r3, #10
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	232f      	movs	r3, #47	; 0x2f
 800261a:	2258      	movs	r2, #88	; 0x58
 800261c:	2010      	movs	r0, #16
 800261e:	f7fe fcb2 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
        pos_y+=56;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3338      	adds	r3, #56	; 0x38
 8002626:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i<8;i+=1)//przyciski po lewej
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	3301      	adds	r3, #1
 800262c:	70fb      	strb	r3, [r7, #3]
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	2b07      	cmp	r3, #7
 8002632:	d9ea      	bls.n	800260a <draw_left_panel+0x4e>
    }
    LCD_centered_Font(0, 0+16, 120, "JOB NAME",_Open_Sans_Bold_14, 1, BLACK);
 8002634:	2300      	movs	r3, #0
 8002636:	9302      	str	r3, [sp, #8]
 8002638:	2301      	movs	r3, #1
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	4b3b      	ldr	r3, [pc, #236]	; (800272c <draw_left_panel+0x170>)
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <draw_left_panel+0x174>)
 8002642:	2278      	movs	r2, #120	; 0x78
 8002644:	2110      	movs	r1, #16
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe fdb7 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 33+24, 88, "OPEN", _Open_Sans_Bold_14, 1, 0x7D3D);//literki po lewej
 800264c:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	2301      	movs	r3, #1
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <draw_left_panel+0x170>)
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <draw_left_panel+0x178>)
 800265c:	2258      	movs	r2, #88	; 0x58
 800265e:	2139      	movs	r1, #57	; 0x39
 8002660:	2010      	movs	r0, #16
 8002662:	f7fe fdaa 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 89+24, 88, "CONT. JOB", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002666:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2301      	movs	r3, #1
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	4b2e      	ldr	r3, [pc, #184]	; (800272c <draw_left_panel+0x170>)
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <draw_left_panel+0x17c>)
 8002676:	2258      	movs	r2, #88	; 0x58
 8002678:	2171      	movs	r1, #113	; 0x71
 800267a:	2010      	movs	r0, #16
 800267c:	f7fe fd9d 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 145+24, 88, "MANUAL", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002680:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	2301      	movs	r3, #1
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	4b28      	ldr	r3, [pc, #160]	; (800272c <draw_left_panel+0x170>)
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <draw_left_panel+0x180>)
 8002690:	2258      	movs	r2, #88	; 0x58
 8002692:	21a9      	movs	r1, #169	; 0xa9
 8002694:	2010      	movs	r0, #16
 8002696:	f7fe fd90 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 201+14, 88, "ENABLE\nTOOL", _Open_Sans_Bold_14, 1, 0x7D3D);
 800269a:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	2301      	movs	r3, #1
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <draw_left_panel+0x170>)
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <draw_left_panel+0x184>)
 80026aa:	2258      	movs	r2, #88	; 0x58
 80026ac:	21d7      	movs	r1, #215	; 0xd7
 80026ae:	2010      	movs	r0, #16
 80026b0:	f7fe fd83 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 257+24, 88, "RUN JOB", _Open_Sans_Bold_14, 1, 0x7D3D);
 80026b4:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	2301      	movs	r3, #1
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <draw_left_panel+0x170>)
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <draw_left_panel+0x188>)
 80026c4:	2258      	movs	r2, #88	; 0x58
 80026c6:	f240 1119 	movw	r1, #281	; 0x119
 80026ca:	2010      	movs	r0, #16
 80026cc:	f7fe fd75 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 313+14, 88, "AXIS\nCONTROL", _Open_Sans_Bold_14, 1, 0x7D3D);
 80026d0:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	2301      	movs	r3, #1
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <draw_left_panel+0x170>)
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <draw_left_panel+0x18c>)
 80026e0:	2258      	movs	r2, #88	; 0x58
 80026e2:	f240 1147 	movw	r1, #327	; 0x147
 80026e6:	2010      	movs	r0, #16
 80026e8:	f7fe fd67 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 369+14, 88, "CONT.\nMOVEMENT", _Open_Sans_Bold_14, 1, 0x7D3D);
 80026ec:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	2301      	movs	r3, #1
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <draw_left_panel+0x170>)
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <draw_left_panel+0x190>)
 80026fc:	2258      	movs	r2, #88	; 0x58
 80026fe:	f240 117f 	movw	r1, #383	; 0x17f
 8002702:	2010      	movs	r0, #16
 8002704:	f7fe fd59 	bl	80011ba <LCD_centered_Font>
	LCD_centered_Font(16, 425+24, 88, "SETTINGS", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002708:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800270c:	9302      	str	r3, [sp, #8]
 800270e:	2301      	movs	r3, #1
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <draw_left_panel+0x170>)
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <draw_left_panel+0x194>)
 8002718:	2258      	movs	r2, #88	; 0x58
 800271a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800271e:	2010      	movs	r0, #16
 8002720:	f7fe fd4b 	bl	80011ba <LCD_centered_Font>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	0800fb74 	.word	0x0800fb74
 8002730:	0800e538 	.word	0x0800e538
 8002734:	0800e544 	.word	0x0800e544
 8002738:	0800e54c 	.word	0x0800e54c
 800273c:	0800e558 	.word	0x0800e558
 8002740:	0800e560 	.word	0x0800e560
 8002744:	0800e56c 	.word	0x0800e56c
 8002748:	0800e574 	.word	0x0800e574
 800274c:	0800e584 	.word	0x0800e584
 8002750:	0800e594 	.word	0x0800e594

08002754 <draw_top_panel>:

void draw_top_panel(){
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af04      	add	r7, sp, #16
    TFT_Draw_Fill_Rectangle(100,0, 600, 144, 0xD61F);//niebieska ramka
 800275a:	f24d 631f 	movw	r3, #54815	; 0xd61f
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2390      	movs	r3, #144	; 0x90
 8002762:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002766:	2100      	movs	r1, #0
 8002768:	2064      	movs	r0, #100	; 0x64
 800276a:	f7fe fb30 	bl	8000dce <TFT_Draw_Fill_Rectangle>
  	TFT_Draw_Fill_Round_Rect (132, 9, 70, 41, 20,  0xD6BA);//przyciski na gorze
 800276e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2314      	movs	r3, #20
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2329      	movs	r3, #41	; 0x29
 800277a:	2246      	movs	r2, #70	; 0x46
 800277c:	2109      	movs	r1, #9
 800277e:	2084      	movs	r0, #132	; 0x84
 8002780:	f7fe fc01 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (212, 9, 70, 41, 20,  0xD6BA);
 8002784:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	2314      	movs	r3, #20
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2329      	movs	r3, #41	; 0x29
 8002790:	2246      	movs	r2, #70	; 0x46
 8002792:	2109      	movs	r1, #9
 8002794:	20d4      	movs	r0, #212	; 0xd4
 8002796:	f7fe fbf6 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (291, 9, 70, 41, 20,  0xD6BA);
 800279a:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2314      	movs	r3, #20
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2329      	movs	r3, #41	; 0x29
 80027a6:	2246      	movs	r2, #70	; 0x46
 80027a8:	2109      	movs	r1, #9
 80027aa:	f240 1023 	movw	r0, #291	; 0x123
 80027ae:	f7fe fbea 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (371, 9, 81, 41, 20,  0xD6BA);
 80027b2:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2314      	movs	r3, #20
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2329      	movs	r3, #41	; 0x29
 80027be:	2251      	movs	r2, #81	; 0x51
 80027c0:	2109      	movs	r1, #9
 80027c2:	f240 1073 	movw	r0, #371	; 0x173
 80027c6:	f7fe fbde 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (462, 9, 72, 41, 20,  0xD6BA);
 80027ca:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2314      	movs	r3, #20
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2329      	movs	r3, #41	; 0x29
 80027d6:	2248      	movs	r2, #72	; 0x48
 80027d8:	2109      	movs	r1, #9
 80027da:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
 80027de:	f7fe fbd2 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (544, 9, 72, 41, 20,  0xD6BA);
 80027e2:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2314      	movs	r3, #20
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2329      	movs	r3, #41	; 0x29
 80027ee:	2248      	movs	r2, #72	; 0x48
 80027f0:	2109      	movs	r1, #9
 80027f2:	f44f 7008 	mov.w	r0, #544	; 0x220
 80027f6:	f7fe fbc6 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (628, 15, 40, 40, 20,  0xD6BA);
 80027fa:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2314      	movs	r3, #20
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2328      	movs	r3, #40	; 0x28
 8002806:	2228      	movs	r2, #40	; 0x28
 8002808:	210f      	movs	r1, #15
 800280a:	f44f 701d 	mov.w	r0, #628	; 0x274
 800280e:	f7fe fbba 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (628, 88, 40, 40, 20,  0xD6BA);
 8002812:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2314      	movs	r3, #20
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2328      	movs	r3, #40	; 0x28
 800281e:	2228      	movs	r2, #40	; 0x28
 8002820:	2158      	movs	r1, #88	; 0x58
 8002822:	f44f 701d 	mov.w	r0, #628	; 0x274
 8002826:	f7fe fbae 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (211, 68, 61, 21, 10,  0xD6BA);
 800282a:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	230a      	movs	r3, #10
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2315      	movs	r3, #21
 8002836:	223d      	movs	r2, #61	; 0x3d
 8002838:	2144      	movs	r1, #68	; 0x44
 800283a:	20d3      	movs	r0, #211	; 0xd3
 800283c:	f7fe fba3 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (211, 109, 61, 21, 10,  0xD6BA);
 8002840:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	230a      	movs	r3, #10
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2315      	movs	r3, #21
 800284c:	223d      	movs	r2, #61	; 0x3d
 800284e:	216d      	movs	r1, #109	; 0x6d
 8002850:	20d3      	movs	r0, #211	; 0xd3
 8002852:	f7fe fb98 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (362, 68, 61, 21, 10,  0xD6BA);
 8002856:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	230a      	movs	r3, #10
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2315      	movs	r3, #21
 8002862:	223d      	movs	r2, #61	; 0x3d
 8002864:	2144      	movs	r1, #68	; 0x44
 8002866:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800286a:	f7fe fb8c 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (362, 109, 61, 21, 10,  0xD6BA);
 800286e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	230a      	movs	r3, #10
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2315      	movs	r3, #21
 800287a:	223d      	movs	r2, #61	; 0x3d
 800287c:	216d      	movs	r1, #109	; 0x6d
 800287e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002882:	f7fe fb80 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (532, 68, 61, 21, 10,  0xD6BA);
 8002886:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	230a      	movs	r3, #10
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2315      	movs	r3, #21
 8002892:	223d      	movs	r2, #61	; 0x3d
 8002894:	2144      	movs	r1, #68	; 0x44
 8002896:	f44f 7005 	mov.w	r0, #532	; 0x214
 800289a:	f7fe fb74 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
  	TFT_Draw_Fill_Round_Rect (532, 109, 61, 21, 10,  0xD6BA);
 800289e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	230a      	movs	r3, #10
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2315      	movs	r3, #21
 80028aa:	223d      	movs	r2, #61	; 0x3d
 80028ac:	216d      	movs	r1, #109	; 0x6d
 80028ae:	f44f 7005 	mov.w	r0, #532	; 0x214
 80028b2:	f7fe fb68 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
	  LCD_centered_Font(132, 9+22, 70, "SELECT", _Open_Sans_Bold_14, 1, BLACK);//opisy przyciskow
 80028b6:	2300      	movs	r3, #0
 80028b8:	9302      	str	r3, [sp, #8]
 80028ba:	2301      	movs	r3, #1
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	4b97      	ldr	r3, [pc, #604]	; (8002b1c <draw_top_panel+0x3c8>)
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4b97      	ldr	r3, [pc, #604]	; (8002b20 <draw_top_panel+0x3cc>)
 80028c4:	2246      	movs	r2, #70	; 0x46
 80028c6:	211f      	movs	r1, #31
 80028c8:	2084      	movs	r0, #132	; 0x84
 80028ca:	f7fe fc76 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(212, 9+22, 70, "NEW P.", _Open_Sans_Bold_14, 1, BLACK);
 80028ce:	2300      	movs	r3, #0
 80028d0:	9302      	str	r3, [sp, #8]
 80028d2:	2301      	movs	r3, #1
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	4b91      	ldr	r3, [pc, #580]	; (8002b1c <draw_top_panel+0x3c8>)
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4b92      	ldr	r3, [pc, #584]	; (8002b24 <draw_top_panel+0x3d0>)
 80028dc:	2246      	movs	r2, #70	; 0x46
 80028de:	211f      	movs	r1, #31
 80028e0:	20d4      	movs	r0, #212	; 0xd4
 80028e2:	f7fe fc6a 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(291, 9+22, 70, "EDIT P.", _Open_Sans_Bold_14, 1, BLACK);
 80028e6:	2300      	movs	r3, #0
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	2301      	movs	r3, #1
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <draw_top_panel+0x3c8>)
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	4b8d      	ldr	r3, [pc, #564]	; (8002b28 <draw_top_panel+0x3d4>)
 80028f4:	2246      	movs	r2, #70	; 0x46
 80028f6:	211f      	movs	r1, #31
 80028f8:	f240 1023 	movw	r0, #291	; 0x123
 80028fc:	f7fe fc5d 	bl	80011ba <LCD_centered_Font>
	  LCD_Font(371, 9+22,  "DELETE P.", _Open_Sans_Bold_14, 1, BLACK);
 8002900:	2300      	movs	r3, #0
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	2301      	movs	r3, #1
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <draw_top_panel+0x3c8>)
 800290a:	4a88      	ldr	r2, [pc, #544]	; (8002b2c <draw_top_panel+0x3d8>)
 800290c:	211f      	movs	r1, #31
 800290e:	f240 1073 	movw	r0, #371	; 0x173
 8002912:	f7fe fdba 	bl	800148a <LCD_Font>
	  LCD_centered_Font(462, 9+22, 70, "SET T.P.", _Open_Sans_Bold_14, 1, BLACK);
 8002916:	2300      	movs	r3, #0
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	2301      	movs	r3, #1
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	4b7f      	ldr	r3, [pc, #508]	; (8002b1c <draw_top_panel+0x3c8>)
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4b83      	ldr	r3, [pc, #524]	; (8002b30 <draw_top_panel+0x3dc>)
 8002924:	2246      	movs	r2, #70	; 0x46
 8002926:	211f      	movs	r1, #31
 8002928:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
 800292c:	f7fe fc45 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(544, 9+22, 70, "SET H.P", _Open_Sans_Bold_14, 1, BLACK);
 8002930:	2300      	movs	r3, #0
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2301      	movs	r3, #1
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	4b78      	ldr	r3, [pc, #480]	; (8002b1c <draw_top_panel+0x3c8>)
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4b7d      	ldr	r3, [pc, #500]	; (8002b34 <draw_top_panel+0x3e0>)
 800293e:	2246      	movs	r2, #70	; 0x46
 8002940:	211f      	movs	r1, #31
 8002942:	f44f 7008 	mov.w	r0, #544	; 0x220
 8002946:	f7fe fc38 	bl	80011ba <LCD_centered_Font>
	  LCD_Font(155, 67+11, "Name:", _Open_Sans_Bold_14, 1, BLACK);
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2301      	movs	r3, #1
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <draw_top_panel+0x3c8>)
 8002954:	4a78      	ldr	r2, [pc, #480]	; (8002b38 <draw_top_panel+0x3e4>)
 8002956:	214e      	movs	r1, #78	; 0x4e
 8002958:	209b      	movs	r0, #155	; 0x9b
 800295a:	f7fe fd96 	bl	800148a <LCD_Font>
	  LCD_Font(155, 109+11, "Tool:", _Open_Sans_Bold_14, 1, BLACK);
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2301      	movs	r3, #1
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <draw_top_panel+0x3c8>)
 8002968:	4a74      	ldr	r2, [pc, #464]	; (8002b3c <draw_top_panel+0x3e8>)
 800296a:	2178      	movs	r1, #120	; 0x78
 800296c:	209b      	movs	r0, #155	; 0x9b
 800296e:	f7fe fd8c 	bl	800148a <LCD_Font>
	  LCD_Font(295, 67+11, "Move:", _Open_Sans_Bold_14, 1, BLACK);
 8002972:	2300      	movs	r3, #0
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2301      	movs	r3, #1
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <draw_top_panel+0x3c8>)
 800297c:	4a70      	ldr	r2, [pc, #448]	; (8002b40 <draw_top_panel+0x3ec>)
 800297e:	214e      	movs	r1, #78	; 0x4e
 8002980:	f240 1027 	movw	r0, #295	; 0x127
 8002984:	f7fe fd81 	bl	800148a <LCD_Font>
	  LCD_Font(295, 109+11, "Speed:", _Open_Sans_Bold_14, 1, BLACK);
 8002988:	2300      	movs	r3, #0
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	2301      	movs	r3, #1
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <draw_top_panel+0x3c8>)
 8002992:	4a6c      	ldr	r2, [pc, #432]	; (8002b44 <draw_top_panel+0x3f0>)
 8002994:	2178      	movs	r1, #120	; 0x78
 8002996:	f240 1027 	movw	r0, #295	; 0x127
 800299a:	f7fe fd76 	bl	800148a <LCD_Font>
	  LCD_Font(446, 67+11, "Type:", _Open_Sans_Bold_14, 1, BLACK);
 800299e:	2300      	movs	r3, #0
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <draw_top_panel+0x3c8>)
 80029a8:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <draw_top_panel+0x3f4>)
 80029aa:	214e      	movs	r1, #78	; 0x4e
 80029ac:	f44f 70df 	mov.w	r0, #446	; 0x1be
 80029b0:	f7fe fd6b 	bl	800148a <LCD_Font>
	  LCD_Font(446, 109+11, "at Target:", _Open_Sans_Bold_14, 1, BLACK);
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2301      	movs	r3, #1
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <draw_top_panel+0x3c8>)
 80029be:	4a63      	ldr	r2, [pc, #396]	; (8002b4c <draw_top_panel+0x3f8>)
 80029c0:	2178      	movs	r1, #120	; 0x78
 80029c2:	f44f 70df 	mov.w	r0, #446	; 0x1be
 80029c6:	f7fe fd60 	bl	800148a <LCD_Font>
	  LCD_centered_Font(211, 68+11, 61, "P11", _Open_Sans_Bold_14, 1, BLACK);
 80029ca:	2300      	movs	r3, #0
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <draw_top_panel+0x3c8>)
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <draw_top_panel+0x3fc>)
 80029d8:	223d      	movs	r2, #61	; 0x3d
 80029da:	214f      	movs	r1, #79	; 0x4f
 80029dc:	20d3      	movs	r0, #211	; 0xd3
 80029de:	f7fe fbec 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(211, 109+11, 41, "OFF", _Open_Sans_Bold_14, 1, BLACK);
 80029e2:	2300      	movs	r3, #0
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <draw_top_panel+0x3c8>)
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <draw_top_panel+0x400>)
 80029f0:	2229      	movs	r2, #41	; 0x29
 80029f2:	2178      	movs	r1, #120	; 0x78
 80029f4:	20d3      	movs	r0, #211	; 0xd3
 80029f6:	f7fe fbe0 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(362, 68+11, 41, "Circ", _Open_Sans_Bold_14, 1, BLACK);
 80029fa:	2300      	movs	r3, #0
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	2301      	movs	r3, #1
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <draw_top_panel+0x3c8>)
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <draw_top_panel+0x404>)
 8002a08:	2229      	movs	r2, #41	; 0x29
 8002a0a:	214f      	movs	r1, #79	; 0x4f
 8002a0c:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002a10:	f7fe fbd3 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(362, 109+11, 41, "100%", _Open_Sans_Bold_14, 1, BLACK);
 8002a14:	2300      	movs	r3, #0
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <draw_top_panel+0x3c8>)
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4b4e      	ldr	r3, [pc, #312]	; (8002b5c <draw_top_panel+0x408>)
 8002a22:	2229      	movs	r2, #41	; 0x29
 8002a24:	2178      	movs	r1, #120	; 0x78
 8002a26:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002a2a:	f7fe fbc6 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(532, 68+11, 41, "Cont", _Open_Sans_Bold_14, 1, BLACK);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9302      	str	r3, [sp, #8]
 8002a32:	2301      	movs	r3, #1
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <draw_top_panel+0x3c8>)
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <draw_top_panel+0x40c>)
 8002a3c:	2229      	movs	r2, #41	; 0x29
 8002a3e:	214f      	movs	r1, #79	; 0x4f
 8002a40:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002a44:	f7fe fbb9 	bl	80011ba <LCD_centered_Font>
	  LCD_centered_Font(532, 109+11, 61, "YES", _Open_Sans_Bold_14, 1, BLACK);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <draw_top_panel+0x3c8>)
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <draw_top_panel+0x410>)
 8002a56:	223d      	movs	r2, #61	; 0x3d
 8002a58:	2178      	movs	r1, #120	; 0x78
 8002a5a:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002a5e:	f7fe fbac 	bl	80011ba <LCD_centered_Font>
  	LCD_FillTriangle(636, 42,636+23, 42, 647, 22, 0x00FD);
 8002a62:	23fd      	movs	r3, #253	; 0xfd
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	2316      	movs	r3, #22
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	f240 2387 	movw	r3, #647	; 0x287
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	232a      	movs	r3, #42	; 0x2a
 8002a72:	f240 2293 	movw	r2, #659	; 0x293
 8002a76:	212a      	movs	r1, #42	; 0x2a
 8002a78:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8002a7c:	f7fe fd8d 	bl	800159a <LCD_FillTriangle>
  	LCD_FillTriangle(636, 42+59,636+23, 42+59, 647, 22+40+59, 0x00FD);
 8002a80:	23fd      	movs	r3, #253	; 0xfd
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	2379      	movs	r3, #121	; 0x79
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	f240 2387 	movw	r3, #647	; 0x287
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2365      	movs	r3, #101	; 0x65
 8002a90:	f240 2293 	movw	r2, #659	; 0x293
 8002a94:	2165      	movs	r1, #101	; 0x65
 8002a96:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8002a9a:	f7fe fd7e 	bl	800159a <LCD_FillTriangle>
  	LCD_FillTriangle(574, 74,573+13, 74, 580, 74+11, 0x00FD);
 8002a9e:	23fd      	movs	r3, #253	; 0xfd
 8002aa0:	9302      	str	r3, [sp, #8]
 8002aa2:	2355      	movs	r3, #85	; 0x55
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	f44f 7311 	mov.w	r3, #580	; 0x244
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	234a      	movs	r3, #74	; 0x4a
 8002aae:	f240 224a 	movw	r2, #586	; 0x24a
 8002ab2:	214a      	movs	r1, #74	; 0x4a
 8002ab4:	f240 203e 	movw	r0, #574	; 0x23e
 8002ab8:	f7fe fd6f 	bl	800159a <LCD_FillTriangle>
  	LCD_FillTriangle(574-170, 74,573+13-170, 74, 580-170, 74+11, 0x00FD);
 8002abc:	23fd      	movs	r3, #253	; 0xfd
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	2355      	movs	r3, #85	; 0x55
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	234a      	movs	r3, #74	; 0x4a
 8002acc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002ad0:	214a      	movs	r1, #74	; 0x4a
 8002ad2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8002ad6:	f7fe fd60 	bl	800159a <LCD_FillTriangle>
  	LCD_FillTriangle(574-170, 74+41,573+13-170, 74+41, 580-170, 74+11+41, 0x00FD);
 8002ada:	23fd      	movs	r3, #253	; 0xfd
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	237e      	movs	r3, #126	; 0x7e
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2373      	movs	r3, #115	; 0x73
 8002aea:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002aee:	2173      	movs	r1, #115	; 0x73
 8002af0:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8002af4:	f7fe fd51 	bl	800159a <LCD_FillTriangle>
  	LCD_FillTriangle(574-322, 74+41,573+13-322, 74+41, 580-322, 74+11+41, 0x00FD);
 8002af8:	23fd      	movs	r3, #253	; 0xfd
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	237e      	movs	r3, #126	; 0x7e
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2373      	movs	r3, #115	; 0x73
 8002b08:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002b0c:	2173      	movs	r1, #115	; 0x73
 8002b0e:	20fc      	movs	r0, #252	; 0xfc
 8002b10:	f7fe fd43 	bl	800159a <LCD_FillTriangle>
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	0800fb74 	.word	0x0800fb74
 8002b20:	0800e5a0 	.word	0x0800e5a0
 8002b24:	0800e5a8 	.word	0x0800e5a8
 8002b28:	0800e5b0 	.word	0x0800e5b0
 8002b2c:	0800e5b8 	.word	0x0800e5b8
 8002b30:	0800e5c4 	.word	0x0800e5c4
 8002b34:	0800e5d0 	.word	0x0800e5d0
 8002b38:	0800e5d8 	.word	0x0800e5d8
 8002b3c:	0800e5e0 	.word	0x0800e5e0
 8002b40:	0800e5e8 	.word	0x0800e5e8
 8002b44:	0800e5f0 	.word	0x0800e5f0
 8002b48:	0800e5f8 	.word	0x0800e5f8
 8002b4c:	0800e600 	.word	0x0800e600
 8002b50:	0800e60c 	.word	0x0800e60c
 8002b54:	0800e610 	.word	0x0800e610
 8002b58:	0800e614 	.word	0x0800e614
 8002b5c:	0800e61c 	.word	0x0800e61c
 8002b60:	0800e624 	.word	0x0800e624
 8002b64:	0800e62c 	.word	0x0800e62c

08002b68 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <SELECT+0x1c>)
 8002b74:	f002 fce2 	bl	800553c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f002 f9ef 	bl	8004f5c <HAL_Delay>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	58020400 	.word	0x58020400

08002b88 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b92:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <DESELECT+0x1c>)
 8002b94:	f002 fcd2 	bl	800553c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f002 f9df 	bl	8004f5c <HAL_Delay>
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	58020400 	.word	0x58020400

08002ba8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002bb2:	bf00      	nop
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <SPI_TxByte+0x30>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d1f8      	bne.n	8002bb4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002bc2:	1df9      	adds	r1, r7, #7
 8002bc4:	2364      	movs	r3, #100	; 0x64
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <SPI_TxByte+0x30>)
 8002bca:	f005 f941 	bl	8007e50 <HAL_SPI_Transmit>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	24002290 	.word	0x24002290

08002bdc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002be8:	bf00      	nop
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <SPI_TxBuffer+0x30>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d1f8      	bne.n	8002bea <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	2364      	movs	r3, #100	; 0x64
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4803      	ldr	r0, [pc, #12]	; (8002c0c <SPI_TxBuffer+0x30>)
 8002c00:	f005 f926 	bl	8007e50 <HAL_SPI_Transmit>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	24002290 	.word	0x24002290

08002c10 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002c1a:	bf00      	nop
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <SPI_RxByte+0x34>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d1f8      	bne.n	8002c1c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002c2a:	1dba      	adds	r2, r7, #6
 8002c2c:	1df9      	adds	r1, r7, #7
 8002c2e:	2364      	movs	r3, #100	; 0x64
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2301      	movs	r3, #1
 8002c34:	4803      	ldr	r0, [pc, #12]	; (8002c44 <SPI_RxByte+0x34>)
 8002c36:	f005 faf9 	bl	800822c <HAL_SPI_TransmitReceive>

	return data;
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	24002290 	.word	0x24002290

08002c48 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002c50:	f7ff ffde 	bl	8002c10 <SPI_RxByte>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	701a      	strb	r2, [r3, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <SD_ReadyWait+0x30>)
 8002c6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c70:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002c72:	f7ff ffcd 	bl	8002c10 <SPI_RxByte>
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2bff      	cmp	r3, #255	; 0xff
 8002c7e:	d004      	beq.n	8002c8a <SD_ReadyWait+0x26>
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <SD_ReadyWait+0x30>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f3      	bne.n	8002c72 <SD_ReadyWait+0xe>

	return res;
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	240023a2 	.word	0x240023a2

08002c98 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002c9e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002ca2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002ca4:	f7ff ff70 	bl	8002b88 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	e005      	b.n	8002cba <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002cae:	20ff      	movs	r0, #255	; 0xff
 8002cb0:	f7ff ff7a 	bl	8002ba8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	ddf6      	ble.n	8002cae <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002cc0:	f7ff ff52 	bl	8002b68 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002cc4:	2340      	movs	r3, #64	; 0x40
 8002cc6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002cd8:	2395      	movs	r3, #149	; 0x95
 8002cda:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2106      	movs	r1, #6
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff7b 	bl	8002bdc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002ce6:	e002      	b.n	8002cee <SD_PowerOn+0x56>
	{
		cnt--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8002cee:	f7ff ff8f 	bl	8002c10 <SPI_RxByte>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <SD_PowerOn+0x66>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f4      	bne.n	8002ce8 <SD_PowerOn+0x50>
	}

	DESELECT();
 8002cfe:	f7ff ff43 	bl	8002b88 <DESELECT>
	SPI_TxByte(0XFF);
 8002d02:	20ff      	movs	r0, #255	; 0xff
 8002d04:	f7ff ff50 	bl	8002ba8 <SPI_TxByte>

	PowerFlag = 1;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <SD_PowerOn+0x80>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	240000a9 	.word	0x240000a9

08002d1c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <SD_PowerOff+0x14>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	240000a9 	.word	0x240000a9

08002d34 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <SD_CheckPower+0x14>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	240000a9 	.word	0x240000a9

08002d4c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <SD_RxDataBlock+0x5c>)
 8002d58:	22c8      	movs	r2, #200	; 0xc8
 8002d5a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002d5c:	f7ff ff58 	bl	8002c10 <SPI_RxByte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2bff      	cmp	r3, #255	; 0xff
 8002d68:	d104      	bne.n	8002d74 <SD_RxDataBlock+0x28>
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <SD_RxDataBlock+0x5c>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f3      	bne.n	8002d5c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2bfe      	cmp	r3, #254	; 0xfe
 8002d78:	d001      	beq.n	8002d7e <SD_RxDataBlock+0x32>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e00f      	b.n	8002d9e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5f 	bl	8002c48 <SPI_RxBytePtr>
	} while(len--);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	603a      	str	r2, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f4      	bne.n	8002d7e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002d94:	f7ff ff3c 	bl	8002c10 <SPI_RxByte>
	SPI_RxByte();
 8002d98:	f7ff ff3a 	bl	8002c10 <SPI_RxByte>

	return TRUE;
 8002d9c:	2301      	movs	r3, #1
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	240023a1 	.word	0x240023a1

08002dac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002dbc:	f7ff ff52 	bl	8002c64 <SD_ReadyWait>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d001      	beq.n	8002dca <SD_TxDataBlock+0x1e>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e02f      	b.n	8002e2a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff feeb 	bl	8002ba8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	2bfd      	cmp	r3, #253	; 0xfd
 8002dd6:	d020      	beq.n	8002e1a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fefd 	bl	8002bdc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002de2:	f7ff ff15 	bl	8002c10 <SPI_RxByte>
		SPI_RxByte();
 8002de6:	f7ff ff13 	bl	8002c10 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002dea:	e00b      	b.n	8002e04 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002dec:	f7ff ff10 	bl	8002c10 <SPI_RxByte>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d006      	beq.n	8002e0c <SD_TxDataBlock+0x60>
			i++;
 8002dfe:	7bbb      	ldrb	r3, [r7, #14]
 8002e00:	3301      	adds	r3, #1
 8002e02:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002e04:	7bbb      	ldrb	r3, [r7, #14]
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d9f0      	bls.n	8002dec <SD_TxDataBlock+0x40>
 8002e0a:	e000      	b.n	8002e0e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002e0c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002e0e:	bf00      	nop
 8002e10:	f7ff fefe 	bl	8002c10 <SPI_RxByte>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0fa      	beq.n	8002e10 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d101      	bne.n	8002e28 <SD_TxDataBlock+0x7c>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <SD_TxDataBlock+0x7e>

	return FALSE;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	6039      	str	r1, [r7, #0]
 8002e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002e3e:	f7ff ff11 	bl	8002c64 <SD_ReadyWait>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d001      	beq.n	8002e4c <SD_SendCmd+0x1a>
 8002e48:	23ff      	movs	r3, #255	; 0xff
 8002e4a:	e042      	b.n	8002ed2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff feaa 	bl	8002ba8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	0e1b      	lsrs	r3, r3, #24
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fea4 	bl	8002ba8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	0c1b      	lsrs	r3, r3, #16
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fe9e 	bl	8002ba8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fe98 	bl	8002ba8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fe93 	bl	8002ba8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d102      	bne.n	8002e8e <SD_SendCmd+0x5c>
 8002e88:	2395      	movs	r3, #149	; 0x95
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e007      	b.n	8002e9e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b48      	cmp	r3, #72	; 0x48
 8002e92:	d102      	bne.n	8002e9a <SD_SendCmd+0x68>
 8002e94:	2387      	movs	r3, #135	; 0x87
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	e001      	b.n	8002e9e <SD_SendCmd+0x6c>
	else crc = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fe81 	bl	8002ba8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	2b4c      	cmp	r3, #76	; 0x4c
 8002eaa:	d101      	bne.n	8002eb0 <SD_SendCmd+0x7e>
 8002eac:	f7ff feb0 	bl	8002c10 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002eb0:	230a      	movs	r3, #10
 8002eb2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002eb4:	f7ff feac 	bl	8002c10 <SPI_RxByte>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002ebc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da05      	bge.n	8002ed0 <SD_SendCmd+0x9e>
 8002ec4:	7bbb      	ldrb	r3, [r7, #14]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	73bb      	strb	r3, [r7, #14]
 8002eca:	7bbb      	ldrb	r3, [r7, #14]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f1      	bne.n	8002eb4 <SD_SendCmd+0x82>

	return res;
 8002ed0:	7b7b      	ldrb	r3, [r7, #13]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <SD_disk_initialize+0x14>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d6      	b.n	800309e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002ef0:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <SD_disk_initialize+0x1cc>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <SD_disk_initialize+0x2a>
 8002efe:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <SD_disk_initialize+0x1cc>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e0cb      	b.n	800309e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8002f06:	f7ff fec7 	bl	8002c98 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002f0a:	f7ff fe2d 	bl	8002b68 <SELECT>

	/* check disk type */
	type = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8002f12:	2100      	movs	r1, #0
 8002f14:	2040      	movs	r0, #64	; 0x40
 8002f16:	f7ff ff8c 	bl	8002e32 <SD_SendCmd>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	f040 80a6 	bne.w	800306e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8002f22:	4b62      	ldr	r3, [pc, #392]	; (80030ac <SD_disk_initialize+0x1d0>)
 8002f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f28:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002f2a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002f2e:	2048      	movs	r0, #72	; 0x48
 8002f30:	f7ff ff7f 	bl	8002e32 <SD_SendCmd>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d158      	bne.n	8002fec <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	e00c      	b.n	8002f5a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002f40:	7bfc      	ldrb	r4, [r7, #15]
 8002f42:	f7ff fe65 	bl	8002c10 <SPI_RxByte>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f104 0310 	add.w	r3, r4, #16
 8002f4e:	443b      	add	r3, r7
 8002f50:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	3301      	adds	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d9ef      	bls.n	8002f40 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002f60:	7abb      	ldrb	r3, [r7, #10]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	f040 8083 	bne.w	800306e <SD_disk_initialize+0x192>
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	2baa      	cmp	r3, #170	; 0xaa
 8002f6c:	d17f      	bne.n	800306e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002f6e:	2100      	movs	r1, #0
 8002f70:	2077      	movs	r0, #119	; 0x77
 8002f72:	f7ff ff5e 	bl	8002e32 <SD_SendCmd>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d807      	bhi.n	8002f8c <SD_disk_initialize+0xb0>
 8002f7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002f80:	2069      	movs	r0, #105	; 0x69
 8002f82:	f7ff ff56 	bl	8002e32 <SD_SendCmd>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002f8c:	4b47      	ldr	r3, [pc, #284]	; (80030ac <SD_disk_initialize+0x1d0>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1eb      	bne.n	8002f6e <SD_disk_initialize+0x92>
 8002f96:	e000      	b.n	8002f9a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002f98:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002f9a:	4b44      	ldr	r3, [pc, #272]	; (80030ac <SD_disk_initialize+0x1d0>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d064      	beq.n	800306e <SD_disk_initialize+0x192>
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	207a      	movs	r0, #122	; 0x7a
 8002fa8:	f7ff ff43 	bl	8002e32 <SD_SendCmd>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d15d      	bne.n	800306e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e00c      	b.n	8002fd2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002fb8:	7bfc      	ldrb	r4, [r7, #15]
 8002fba:	f7ff fe29 	bl	8002c10 <SPI_RxByte>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f104 0310 	add.w	r3, r4, #16
 8002fc6:	443b      	add	r3, r7
 8002fc8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d9ef      	bls.n	8002fb8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002fd8:	7a3b      	ldrb	r3, [r7, #8]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <SD_disk_initialize+0x10a>
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	e000      	b.n	8002fe8 <SD_disk_initialize+0x10c>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	73bb      	strb	r3, [r7, #14]
 8002fea:	e040      	b.n	800306e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002fec:	2100      	movs	r1, #0
 8002fee:	2077      	movs	r0, #119	; 0x77
 8002ff0:	f7ff ff1f 	bl	8002e32 <SD_SendCmd>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d808      	bhi.n	800300c <SD_disk_initialize+0x130>
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	2069      	movs	r0, #105	; 0x69
 8002ffe:	f7ff ff18 	bl	8002e32 <SD_SendCmd>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d801      	bhi.n	800300c <SD_disk_initialize+0x130>
 8003008:	2302      	movs	r3, #2
 800300a:	e000      	b.n	800300e <SD_disk_initialize+0x132>
 800300c:	2301      	movs	r3, #1
 800300e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d10e      	bne.n	8003034 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003016:	2100      	movs	r1, #0
 8003018:	2077      	movs	r0, #119	; 0x77
 800301a:	f7ff ff0a 	bl	8002e32 <SD_SendCmd>
 800301e:	4603      	mov	r3, r0
 8003020:	2b01      	cmp	r3, #1
 8003022:	d80e      	bhi.n	8003042 <SD_disk_initialize+0x166>
 8003024:	2100      	movs	r1, #0
 8003026:	2069      	movs	r0, #105	; 0x69
 8003028:	f7ff ff03 	bl	8002e32 <SD_SendCmd>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d107      	bne.n	8003042 <SD_disk_initialize+0x166>
 8003032:	e00d      	b.n	8003050 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003034:	2100      	movs	r1, #0
 8003036:	2041      	movs	r0, #65	; 0x41
 8003038:	f7ff fefb 	bl	8002e32 <SD_SendCmd>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <SD_disk_initialize+0x1d0>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e1      	bne.n	8003010 <SD_disk_initialize+0x134>
 800304c:	e000      	b.n	8003050 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800304e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <SD_disk_initialize+0x1d0>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <SD_disk_initialize+0x18e>
 800305a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800305e:	2050      	movs	r0, #80	; 0x50
 8003060:	f7ff fee7 	bl	8002e32 <SD_SendCmd>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <SD_disk_initialize+0x192>
 800306a:	2300      	movs	r3, #0
 800306c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <SD_disk_initialize+0x1d4>)
 8003070:	7bbb      	ldrb	r3, [r7, #14]
 8003072:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003074:	f7ff fd88 	bl	8002b88 <DESELECT>
	SPI_RxByte();
 8003078:	f7ff fdca 	bl	8002c10 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800307c:	7bbb      	ldrb	r3, [r7, #14]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <SD_disk_initialize+0x1cc>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SD_disk_initialize+0x1cc>)
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e001      	b.n	8003098 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003094:	f7ff fe42 	bl	8002d1c <SD_PowerOff>
	}

	return Stat;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <SD_disk_initialize+0x1cc>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	24000000 	.word	0x24000000
 80030ac:	240023a1 	.word	0x240023a1
 80030b0:	240000a8 	.word	0x240000a8

080030b4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <SD_disk_status+0x14>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e002      	b.n	80030ce <SD_disk_status+0x1a>
	return Stat;
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <SD_disk_status+0x28>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	24000000 	.word	0x24000000

080030e0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <SD_disk_read+0x1c>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <SD_disk_read+0x20>
 80030fc:	2304      	movs	r3, #4
 80030fe:	e051      	b.n	80031a4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <SD_disk_read+0xcc>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <SD_disk_read+0x32>
 800310e:	2303      	movs	r3, #3
 8003110:	e048      	b.n	80031a4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <SD_disk_read+0xd0>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <SD_disk_read+0x44>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	025b      	lsls	r3, r3, #9
 8003122:	607b      	str	r3, [r7, #4]

	SELECT();
 8003124:	f7ff fd20 	bl	8002b68 <SELECT>

	if (count == 1)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d111      	bne.n	8003152 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	2051      	movs	r0, #81	; 0x51
 8003132:	f7ff fe7e 	bl	8002e32 <SD_SendCmd>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d129      	bne.n	8003190 <SD_disk_read+0xb0>
 800313c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003140:	68b8      	ldr	r0, [r7, #8]
 8003142:	f7ff fe03 	bl	8002d4c <SD_RxDataBlock>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d021      	beq.n	8003190 <SD_disk_read+0xb0>
 800314c:	2300      	movs	r3, #0
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	e01e      	b.n	8003190 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	2052      	movs	r0, #82	; 0x52
 8003156:	f7ff fe6c 	bl	8002e32 <SD_SendCmd>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d117      	bne.n	8003190 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003164:	68b8      	ldr	r0, [r7, #8]
 8003166:	f7ff fdf1 	bl	8002d4c <SD_RxDataBlock>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <SD_disk_read+0xa6>
				buff += 512;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003176:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	3b01      	subs	r3, #1
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ed      	bne.n	8003160 <SD_disk_read+0x80>
 8003184:	e000      	b.n	8003188 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003186:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003188:	2100      	movs	r1, #0
 800318a:	204c      	movs	r0, #76	; 0x4c
 800318c:	f7ff fe51 	bl	8002e32 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003190:	f7ff fcfa 	bl	8002b88 <DESELECT>
	SPI_RxByte();
 8003194:	f7ff fd3c 	bl	8002c10 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	24000000 	.word	0x24000000
 80031b0:	240000a8 	.word	0x240000a8

080031b4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <SD_disk_write+0x1c>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <SD_disk_write+0x20>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e06b      	b.n	80032ac <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80031d4:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <SD_disk_write+0x100>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <SD_disk_write+0x32>
 80031e2:	2303      	movs	r3, #3
 80031e4:	e062      	b.n	80032ac <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80031e6:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <SD_disk_write+0x100>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <SD_disk_write+0x44>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e059      	b.n	80032ac <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80031f8:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <SD_disk_write+0x104>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <SD_disk_write+0x56>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	025b      	lsls	r3, r3, #9
 8003208:	607b      	str	r3, [r7, #4]

	SELECT();
 800320a:	f7ff fcad 	bl	8002b68 <SELECT>

	if (count == 1)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d110      	bne.n	8003236 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	2058      	movs	r0, #88	; 0x58
 8003218:	f7ff fe0b 	bl	8002e32 <SD_SendCmd>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d13a      	bne.n	8003298 <SD_disk_write+0xe4>
 8003222:	21fe      	movs	r1, #254	; 0xfe
 8003224:	68b8      	ldr	r0, [r7, #8]
 8003226:	f7ff fdc1 	bl	8002dac <SD_TxDataBlock>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d033      	beq.n	8003298 <SD_disk_write+0xe4>
			count = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	e030      	b.n	8003298 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <SD_disk_write+0x104>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003242:	2100      	movs	r1, #0
 8003244:	2077      	movs	r0, #119	; 0x77
 8003246:	f7ff fdf4 	bl	8002e32 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800324a:	6839      	ldr	r1, [r7, #0]
 800324c:	2057      	movs	r0, #87	; 0x57
 800324e:	f7ff fdf0 	bl	8002e32 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	2059      	movs	r0, #89	; 0x59
 8003256:	f7ff fdec 	bl	8002e32 <SD_SendCmd>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11b      	bne.n	8003298 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003260:	21fc      	movs	r1, #252	; 0xfc
 8003262:	68b8      	ldr	r0, [r7, #8]
 8003264:	f7ff fda2 	bl	8002dac <SD_TxDataBlock>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <SD_disk_write+0xd0>
				buff += 512;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003274:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ee      	bne.n	8003260 <SD_disk_write+0xac>
 8003282:	e000      	b.n	8003286 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003284:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003286:	21fd      	movs	r1, #253	; 0xfd
 8003288:	2000      	movs	r0, #0
 800328a:	f7ff fd8f 	bl	8002dac <SD_TxDataBlock>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <SD_disk_write+0xe4>
			{
				count = 1;
 8003294:	2301      	movs	r3, #1
 8003296:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003298:	f7ff fc76 	bl	8002b88 <DESELECT>
	SPI_RxByte();
 800329c:	f7ff fcb8 	bl	8002c10 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf14      	ite	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	2300      	moveq	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	24000000 	.word	0x24000000
 80032b8:	240000a8 	.word	0x240000a8

080032bc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b08b      	sub	sp, #44	; 0x2c
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	603a      	str	r2, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	460b      	mov	r3, r1
 80032ca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <SD_disk_ioctl+0x1e>
 80032d6:	2304      	movs	r3, #4
 80032d8:	e115      	b.n	8003506 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80032e0:	79bb      	ldrb	r3, [r7, #6]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d124      	bne.n	8003330 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d012      	beq.n	8003314 <SD_disk_ioctl+0x58>
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	dc1a      	bgt.n	8003328 <SD_disk_ioctl+0x6c>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <SD_disk_ioctl+0x40>
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d006      	beq.n	8003308 <SD_disk_ioctl+0x4c>
 80032fa:	e015      	b.n	8003328 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80032fc:	f7ff fd0e 	bl	8002d1c <SD_PowerOff>
			res = RES_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003306:	e0fc      	b.n	8003502 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003308:	f7ff fcc6 	bl	8002c98 <SD_PowerOn>
			res = RES_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003312:	e0f6      	b.n	8003502 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	1c5c      	adds	r4, r3, #1
 8003318:	f7ff fd0c 	bl	8002d34 <SD_CheckPower>
 800331c:	4603      	mov	r3, r0
 800331e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003326:	e0ec      	b.n	8003502 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003328:	2304      	movs	r3, #4
 800332a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800332e:	e0e8      	b.n	8003502 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003330:	4b77      	ldr	r3, [pc, #476]	; (8003510 <SD_disk_ioctl+0x254>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <SD_disk_ioctl+0x86>
 800333e:	2303      	movs	r3, #3
 8003340:	e0e1      	b.n	8003506 <SD_disk_ioctl+0x24a>

		SELECT();
 8003342:	f7ff fc11 	bl	8002b68 <SELECT>

		switch (ctrl)
 8003346:	79bb      	ldrb	r3, [r7, #6]
 8003348:	2b0d      	cmp	r3, #13
 800334a:	f200 80cb 	bhi.w	80034e4 <SD_disk_ioctl+0x228>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <SD_disk_ioctl+0x98>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	0800344f 	.word	0x0800344f
 8003358:	0800338d 	.word	0x0800338d
 800335c:	0800343f 	.word	0x0800343f
 8003360:	080034e5 	.word	0x080034e5
 8003364:	080034e5 	.word	0x080034e5
 8003368:	080034e5 	.word	0x080034e5
 800336c:	080034e5 	.word	0x080034e5
 8003370:	080034e5 	.word	0x080034e5
 8003374:	080034e5 	.word	0x080034e5
 8003378:	080034e5 	.word	0x080034e5
 800337c:	080034e5 	.word	0x080034e5
 8003380:	08003461 	.word	0x08003461
 8003384:	08003485 	.word	0x08003485
 8003388:	080034a9 	.word	0x080034a9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800338c:	2100      	movs	r1, #0
 800338e:	2049      	movs	r0, #73	; 0x49
 8003390:	f7ff fd4f 	bl	8002e32 <SD_SendCmd>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 80a8 	bne.w	80034ec <SD_disk_ioctl+0x230>
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	2110      	movs	r1, #16
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fcd2 	bl	8002d4c <SD_RxDataBlock>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 809e 	beq.w	80034ec <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80033b0:	7b3b      	ldrb	r3, [r7, #12]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10e      	bne.n	80033d8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80033ba:	7d7b      	ldrb	r3, [r7, #21]
 80033bc:	b29a      	uxth	r2, r3
 80033be:	7d3b      	ldrb	r3, [r7, #20]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80033ce:	8bfb      	ldrh	r3, [r7, #30]
 80033d0:	029a      	lsls	r2, r3, #10
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e02e      	b.n	8003436 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80033d8:	7c7b      	ldrb	r3, [r7, #17]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	7dbb      	ldrb	r3, [r7, #22]
 80033e2:	09db      	lsrs	r3, r3, #7
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	7d7b      	ldrb	r3, [r7, #21]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f003 0306 	and.w	r3, r3, #6
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3302      	adds	r3, #2
 80033fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003400:	7d3b      	ldrb	r3, [r7, #20]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	b2db      	uxtb	r3, r3
 8003406:	b29a      	uxth	r2, r3
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	b29b      	uxth	r3, r3
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	b29b      	uxth	r3, r3
 8003410:	4413      	add	r3, r2
 8003412:	b29a      	uxth	r2, r3
 8003414:	7cbb      	ldrb	r3, [r7, #18]
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	b29b      	uxth	r3, r3
 800341a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800341e:	b29b      	uxth	r3, r3
 8003420:	4413      	add	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003428:	8bfa      	ldrh	r2, [r7, #30]
 800342a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800342e:	3b09      	subs	r3, #9
 8003430:	409a      	lsls	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800343c:	e056      	b.n	80034ec <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003444:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800344c:	e055      	b.n	80034fa <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800344e:	f7ff fc09 	bl	8002c64 <SD_ReadyWait>
 8003452:	4603      	mov	r3, r0
 8003454:	2bff      	cmp	r3, #255	; 0xff
 8003456:	d14b      	bne.n	80034f0 <SD_disk_ioctl+0x234>
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800345e:	e047      	b.n	80034f0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003460:	2100      	movs	r1, #0
 8003462:	2049      	movs	r0, #73	; 0x49
 8003464:	f7ff fce5 	bl	8002e32 <SD_SendCmd>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d142      	bne.n	80034f4 <SD_disk_ioctl+0x238>
 800346e:	2110      	movs	r1, #16
 8003470:	6a38      	ldr	r0, [r7, #32]
 8003472:	f7ff fc6b 	bl	8002d4c <SD_RxDataBlock>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03b      	beq.n	80034f4 <SD_disk_ioctl+0x238>
 800347c:	2300      	movs	r3, #0
 800347e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003482:	e037      	b.n	80034f4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003484:	2100      	movs	r1, #0
 8003486:	204a      	movs	r0, #74	; 0x4a
 8003488:	f7ff fcd3 	bl	8002e32 <SD_SendCmd>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d132      	bne.n	80034f8 <SD_disk_ioctl+0x23c>
 8003492:	2110      	movs	r1, #16
 8003494:	6a38      	ldr	r0, [r7, #32]
 8003496:	f7ff fc59 	bl	8002d4c <SD_RxDataBlock>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02b      	beq.n	80034f8 <SD_disk_ioctl+0x23c>
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80034a6:	e027      	b.n	80034f8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80034a8:	2100      	movs	r1, #0
 80034aa:	207a      	movs	r0, #122	; 0x7a
 80034ac:	f7ff fcc1 	bl	8002e32 <SD_SendCmd>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d116      	bne.n	80034e4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034bc:	e00b      	b.n	80034d6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80034be:	6a3c      	ldr	r4, [r7, #32]
 80034c0:	1c63      	adds	r3, r4, #1
 80034c2:	623b      	str	r3, [r7, #32]
 80034c4:	f7ff fba4 	bl	8002c10 <SPI_RxByte>
 80034c8:	4603      	mov	r3, r0
 80034ca:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80034cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034d0:	3301      	adds	r3, #1
 80034d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d9ef      	bls.n	80034be <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80034e4:	2304      	movs	r3, #4
 80034e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034ea:	e006      	b.n	80034fa <SD_disk_ioctl+0x23e>
			break;
 80034ec:	bf00      	nop
 80034ee:	e004      	b.n	80034fa <SD_disk_ioctl+0x23e>
			break;
 80034f0:	bf00      	nop
 80034f2:	e002      	b.n	80034fa <SD_disk_ioctl+0x23e>
			break;
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <SD_disk_ioctl+0x23e>
			break;
 80034f8:	bf00      	nop
		}

		DESELECT();
 80034fa:	f7ff fb45 	bl	8002b88 <DESELECT>
		SPI_RxByte();
 80034fe:	f7ff fb87 	bl	8002c10 <SPI_RxByte>
	}

	return res;
 8003502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003506:	4618      	mov	r0, r3
 8003508:	372c      	adds	r7, #44	; 0x2c
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	bf00      	nop
 8003510:	24000000 	.word	0x24000000

08003514 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800352a:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 800352c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003530:	4a6d      	ldr	r2, [pc, #436]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 8003532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800353a:	4b6b      	ldr	r3, [pc, #428]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 800353c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003548:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 800354a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800354e:	4a66      	ldr	r2, [pc, #408]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003558:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 800355a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	4b60      	ldr	r3, [pc, #384]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 8003568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800356c:	4a5e      	ldr	r2, [pc, #376]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 8003578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003584:	4b58      	ldr	r3, [pc, #352]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 8003586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358a:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003594:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 8003596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035a2:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 80035a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a8:	4a4f      	ldr	r2, [pc, #316]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 80035aa:	f043 0310 	orr.w	r3, r3, #16
 80035ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035b2:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 80035b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035c0:	4b49      	ldr	r3, [pc, #292]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 80035c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c6:	4a48      	ldr	r2, [pc, #288]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 80035c8:	f043 0308 	orr.w	r3, r3, #8
 80035cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035d0:	4b45      	ldr	r3, [pc, #276]	; (80036e8 <MX_GPIO_Init+0x1d4>)
 80035d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|WR_Pin|RD_Pin|CS_Pin
 80035de:	2200      	movs	r2, #0
 80035e0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80035e4:	4841      	ldr	r0, [pc, #260]	; (80036ec <MX_GPIO_Init+0x1d8>)
 80035e6:	f001 ffa9 	bl	800553c <HAL_GPIO_WritePin>
                          |F_CS_Pin|REST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin|M2_STEP_Pin
 80035ea:	2200      	movs	r2, #0
 80035ec:	f649 711e 	movw	r1, #40734	; 0x9f1e
 80035f0:	483f      	ldr	r0, [pc, #252]	; (80036f0 <MX_GPIO_Init+0x1dc>)
 80035f2:	f001 ffa3 	bl	800553c <HAL_GPIO_WritePin>
                          |M3_DIR_Pin|M3_STEP_Pin|M4_DIR_Pin|M4_STEP_Pin
                          |M5_DIR_Pin|M5_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M6_DIR_Pin|M6_STEP_Pin|SD_CS_Pin|T_CS_Pin
 80035f6:	2200      	movs	r2, #0
 80035f8:	f64b 0103 	movw	r1, #47107	; 0xb803
 80035fc:	483d      	ldr	r0, [pc, #244]	; (80036f4 <MX_GPIO_Init+0x1e0>)
 80035fe:	f001 ff9d 	bl	800553c <HAL_GPIO_WritePin>
                          |USER_LED_Pin|LED_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DB8_Pin|DB9_Pin|DB10_Pin|DB11_Pin
 8003602:	2200      	movs	r2, #0
 8003604:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003608:	483b      	ldr	r0, [pc, #236]	; (80036f8 <MX_GPIO_Init+0x1e4>)
 800360a:	f001 ff97 	bl	800553c <HAL_GPIO_WritePin>
                          |DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RS_Pin|WR_Pin|RD_Pin|CS_Pin
 800360e:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8003612:	61fb      	str	r3, [r7, #28]
                          |F_CS_Pin|REST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003614:	2301      	movs	r3, #1
 8003616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	f107 031c 	add.w	r3, r7, #28
 8003624:	4619      	mov	r1, r3
 8003626:	4831      	ldr	r0, [pc, #196]	; (80036ec <MX_GPIO_Init+0x1d8>)
 8003628:	f001 fdd8 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M1_STEP_Pin|M2_DIR_Pin|M2_STEP_Pin
 800362c:	f649 731e 	movw	r3, #40734	; 0x9f1e
 8003630:	61fb      	str	r3, [r7, #28]
                          |M3_DIR_Pin|M3_STEP_Pin|M4_DIR_Pin|M4_STEP_Pin
                          |M5_DIR_Pin|M5_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003632:	2301      	movs	r3, #1
 8003634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	482a      	ldr	r0, [pc, #168]	; (80036f0 <MX_GPIO_Init+0x1dc>)
 8003646:	f001 fdc9 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M6_DIR_Pin|M6_STEP_Pin|SD_CS_Pin|T_CS_Pin
 800364a:	f64b 0303 	movw	r3, #47107	; 0xb803
 800364e:	61fb      	str	r3, [r7, #28]
                          |USER_LED_Pin|LED_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003650:	2301      	movs	r3, #1
 8003652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4619      	mov	r1, r3
 8003662:	4824      	ldr	r0, [pc, #144]	; (80036f4 <MX_GPIO_Init+0x1e0>)
 8003664:	f001 fdba 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M1_S_Pin|M2_S_Pin|M3_S_Pin|M4_S_Pin
 8003668:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 800366c:	61fb      	str	r3, [r7, #28]
                          |M5_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800366e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003678:	f107 031c 	add.w	r3, r7, #28
 800367c:	4619      	mov	r1, r3
 800367e:	481d      	ldr	r0, [pc, #116]	; (80036f4 <MX_GPIO_Init+0x1e0>)
 8003680:	f001 fdac 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DB8_Pin|DB9_Pin|DB10_Pin|DB11_Pin
 8003684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003688:	61fb      	str	r3, [r7, #28]
                          |DB12_Pin|DB13_Pin|DB14_Pin|DB15_Pin
                          |DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368a:	2301      	movs	r3, #1
 800368c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003696:	f107 031c 	add.w	r3, r7, #28
 800369a:	4619      	mov	r1, r3
 800369c:	4816      	ldr	r0, [pc, #88]	; (80036f8 <MX_GPIO_Init+0x1e4>)
 800369e:	f001 fd9d 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80036a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80036ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f107 031c 	add.w	r3, r7, #28
 80036b6:	4619      	mov	r1, r3
 80036b8:	480c      	ldr	r0, [pc, #48]	; (80036ec <MX_GPIO_Init+0x1d8>)
 80036ba:	f001 fd8f 	bl	80051dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 10, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	210a      	movs	r1, #10
 80036c2:	2008      	movs	r0, #8
 80036c4:	f001 fd55 	bl	8005172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80036c8:	2008      	movs	r0, #8
 80036ca:	f001 fd6c 	bl	80051a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	210a      	movs	r1, #10
 80036d2:	2017      	movs	r0, #23
 80036d4:	f001 fd4d 	bl	8005172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036d8:	2017      	movs	r0, #23
 80036da:	f001 fd64 	bl	80051a6 <HAL_NVIC_EnableIRQ>

}
 80036de:	bf00      	nop
 80036e0:	3730      	adds	r7, #48	; 0x30
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	58024400 	.word	0x58024400
 80036ec:	58020800 	.word	0x58020800
 80036f0:	58020000 	.word	0x58020000
 80036f4:	58020400 	.word	0x58020400
 80036f8:	58020c00 	.word	0x58020c00

080036fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db0b      	blt.n	8003726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	f003 021f 	and.w	r2, r3, #31
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <__NVIC_EnableIRQ+0x38>)
 8003716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2001      	movs	r0, #1
 800371e:	fa00 f202 	lsl.w	r2, r0, r2
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000e100 	.word	0xe000e100

08003738 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db12      	blt.n	8003770 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	490a      	ldr	r1, [pc, #40]	; (800377c <__NVIC_DisableIRQ+0x44>)
 8003752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	3320      	adds	r3, #32
 8003760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003764:	f3bf 8f4f 	dsb	sy
}
 8003768:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800376a:	f3bf 8f6f 	isb	sy
}
 800376e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e100 	.word	0xe000e100

08003780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	f5ad 5d95 	sub.w	sp, sp, #4768	; 0x12a0
 8003786:	b084      	sub	sp, #16
 8003788:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint16_t max_licz_krokow_osi[6] = {6400*2, 6400*2, 8000, 6400*2, 6400*2, 0};
 800378a:	4ab3      	ldr	r2, [pc, #716]	; (8003a58 <main+0x2d8>)
 800378c:	f241 2378 	movw	r3, #4728	; 0x1278
 8003790:	443b      	add	r3, r7
 8003792:	ca07      	ldmia	r2, {r0, r1, r2}
 8003794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		double currentPosition[6];
		double givenPosition[6];
		uint16_t touchX = 0, touchY = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	f241 229e 	movw	r2, #4766	; 0x129e
 800379e:	443a      	add	r2, r7
 80037a0:	8013      	strh	r3, [r2, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	f241 229c 	movw	r2, #4764	; 0x129c
 80037a8:	443a      	add	r2, r7
 80037aa:	8013      	strh	r3, [r2, #0]
		int kalibracja=0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f241 2298 	movw	r2, #4760	; 0x1298
 80037b2:	443a      	add	r2, r7
 80037b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037b6:	f001 fb3f 	bl	8004e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ba:	f000 f971 	bl	8003aa0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80037be:	f000 f9ed 	bl	8003b9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037c2:	f7ff fea7 	bl	8003514 <MX_GPIO_Init>
  MX_SPI1_Init();
 80037c6:	f000 fd03 	bl	80041d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80037ca:	f000 fd57 	bl	800427c <MX_SPI2_Init>
  MX_TIM1_Init();
 80037ce:	f001 f87d 	bl	80048cc <MX_TIM1_Init>
  MX_TIM6_Init();
 80037d2:	f001 f90b 	bl	80049ec <MX_TIM6_Init>
  MX_FATFS_Init();
 80037d6:	f006 fa91 	bl	8009cfc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80037da:	48a0      	ldr	r0, [pc, #640]	; (8003a5c <main+0x2dc>)
 80037dc:	f005 f9a0 	bl	8008b20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80037e0:	2100      	movs	r1, #0
 80037e2:	489f      	ldr	r0, [pc, #636]	; (8003a60 <main+0x2e0>)
 80037e4:	f005 fa6c 	bl	8008cc0 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80037e8:	2201      	movs	r2, #1
 80037ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ee:	489d      	ldr	r0, [pc, #628]	; (8003a64 <main+0x2e4>)
 80037f0:	f001 fea4 	bl	800553c <HAL_GPIO_WritePin>
  HAL_Delay (100);
 80037f4:	2064      	movs	r0, #100	; 0x64
 80037f6:	f001 fbb1 	bl	8004f5c <HAL_Delay>
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80037fa:	2200      	movs	r2, #0
 80037fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003800:	4898      	ldr	r0, [pc, #608]	; (8003a64 <main+0x2e4>)
 8003802:	f001 fe9b 	bl	800553c <HAL_GPIO_WritePin>
        	if (fresult == FR_OK) {}//send_uart ("SD CARD UNMOUNTED successfully...\n");
  */



    HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8003806:	2201      	movs	r2, #1
 8003808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800380c:	4895      	ldr	r0, [pc, #596]	; (8003a64 <main+0x2e4>)
 800380e:	f001 fe95 	bl	800553c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_RESET);//Ustawienie F_CS na low
 8003812:	2200      	movs	r2, #0
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	4894      	ldr	r0, [pc, #592]	; (8003a68 <main+0x2e8>)
 8003818:	f001 fe90 	bl	800553c <HAL_GPIO_WritePin>

    Init_SSD1963();
 800381c:	f7fc fe8c 	bl	8000538 <Init_SSD1963>
    draw_main_menu();
 8003820:	f7fe fdb4 	bl	800238c <draw_main_menu>
    init_SD_card();
 8003824:	f000 fbe6 	bl	8003ff4 <init_SD_card>
    create_file("text21.txt");
 8003828:	4890      	ldr	r0, [pc, #576]	; (8003a6c <main+0x2ec>)
 800382a:	f000 fbcb 	bl	8003fc4 <create_file>

    draw_file_menu();
 800382e:	f7fe fd25 	bl	800227c <draw_file_menu>
  sprintf(buffer, "%d", count_points_in_file("file1.txt"));
 8003832:	488f      	ldr	r0, [pc, #572]	; (8003a70 <main+0x2f0>)
 8003834:	f000 fb78 	bl	8003f28 <count_points_in_file>
 8003838:	4602      	mov	r2, r0
 800383a:	4b8e      	ldr	r3, [pc, #568]	; (8003a74 <main+0x2f4>)
 800383c:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 8003840:	443b      	add	r3, r7
 8003842:	498d      	ldr	r1, [pc, #564]	; (8003a78 <main+0x2f8>)
 8003844:	4618      	mov	r0, r3
 8003846:	f009 fda3 	bl	800d390 <siprintf>
  LCD_Font(206, 240,  buffer, _Open_Sans_Bold_14, 3, BLACK);/* File */
 800384a:	4a8a      	ldr	r2, [pc, #552]	; (8003a74 <main+0x2f4>)
 800384c:	f502 5395 	add.w	r3, r2, #4768	; 0x12a0
 8003850:	19da      	adds	r2, r3, r7
 8003852:	2300      	movs	r3, #0
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	2303      	movs	r3, #3
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	4b88      	ldr	r3, [pc, #544]	; (8003a7c <main+0x2fc>)
 800385c:	21f0      	movs	r1, #240	; 0xf0
 800385e:	20ce      	movs	r0, #206	; 0xce
 8003860:	f7fd fe13 	bl	800148a <LCD_Font>
    draw_file_list(1, 10, true, by_name);
 8003864:	2300      	movs	r3, #0
 8003866:	2201      	movs	r2, #1
 8003868:	210a      	movs	r1, #10
 800386a:	2001      	movs	r0, #1
 800386c:	f7fe fa7a 	bl	8001d64 <draw_file_list>
    print_file_info(3);
 8003870:	2003      	movs	r0, #3
 8003872:	f7fe fcbb 	bl	80021ec <print_file_info>

    unmount_SD_card();
 8003876:	f000 fbd1 	bl	800401c <unmount_SD_card>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    int allertX = 220;	//MAX size is 220x200 - with bigger tabs malloc has problem
 800387a:	23dc      	movs	r3, #220	; 0xdc
 800387c:	f241 2294 	movw	r2, #4756	; 0x1294
 8003880:	443a      	add	r2, r7
 8003882:	6013      	str	r3, [r2, #0]
        int allertY = 200;
 8003884:	23c8      	movs	r3, #200	; 0xc8
 8003886:	f241 2290 	movw	r2, #4752	; 0x1290
 800388a:	443a      	add	r2, r7
 800388c:	6013      	str	r3, [r2, #0]
        uint16_t *save = (uint16_t *)malloc(allertX* allertY * sizeof(uint16_t));
 800388e:	f241 2394 	movw	r3, #4756	; 0x1294
 8003892:	443b      	add	r3, r7
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f241 2290 	movw	r2, #4752	; 0x1290
 800389a:	443a      	add	r2, r7
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f009 fbc9 	bl	800d03c <malloc>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f241 228c 	movw	r2, #4748	; 0x128c
 80038b0:	443a      	add	r2, r7
 80038b2:	6013      	str	r3, [r2, #0]
//        	givenPosition[5]=90;
//        	licz_kroki(givenPosition, &givenSteps, &currentPosition);
//        	kalibracja =1;

        	//przygotowanie dotyku
        	XPT2046_Init();
 80038b4:	f001 f984 	bl	8004bc0 <XPT2046_Init>
        	__HAL_GPIO_EXTI_CLEAR_IT(T_IRQ_Pin);//czyszczenie zgłoszonego przerwania
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        	was_touched=0;
 80038c4:	4b6e      	ldr	r3, [pc, #440]	; (8003a80 <main+0x300>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]

          while (1)
          {
          if(was_touched==1){
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <main+0x300>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d1fb      	bne.n	80038ca <main+0x14a>
        	was_touched=0;
 80038d2:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <main+0x300>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
        	NVIC_DisableIRQ(EXTI9_5_IRQn);
 80038d8:	2017      	movs	r0, #23
 80038da:	f7ff ff2d 	bl	8003738 <__NVIC_DisableIRQ>
        	uint16_t touchx, touchy;
        	char buffer1[10]=""; // Bufor na konwertowaną wartość
 80038de:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80038e2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	809a      	strh	r2, [r3, #4]
        	char buffer2[10]=""; // Bufor na konwertowaną wartość
 80038f2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80038f6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	3304      	adds	r3, #4
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	809a      	strh	r2, [r3, #4]
        	TFT_Draw_Fill_Round_Rect (280, 180, 200, 60, 10,  0xCFFF);
 8003906:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	230a      	movs	r3, #10
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	233c      	movs	r3, #60	; 0x3c
 8003912:	22c8      	movs	r2, #200	; 0xc8
 8003914:	21b4      	movs	r1, #180	; 0xb4
 8003916:	f44f 708c 	mov.w	r0, #280	; 0x118
 800391a:	f7fd fb34 	bl	8000f86 <TFT_Draw_Fill_Round_Rect>
        	touchx = getX();
 800391e:	f001 fa2d 	bl	8004d7c <getX>
 8003922:	4603      	mov	r3, r0
 8003924:	f241 228a 	movw	r2, #4746	; 0x128a
 8003928:	443a      	add	r2, r7
 800392a:	8013      	strh	r3, [r2, #0]
        	sprintf(buffer1, "X%d", touchx); // Konwersja wartości do ciągu znaków
 800392c:	f241 238a 	movw	r3, #4746	; 0x128a
 8003930:	443b      	add	r3, r7
 8003932:	881a      	ldrh	r2, [r3, #0]
 8003934:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <main+0x304>)
 8003936:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 800393a:	443b      	add	r3, r7
 800393c:	4952      	ldr	r1, [pc, #328]	; (8003a88 <main+0x308>)
 800393e:	4618      	mov	r0, r3
 8003940:	f009 fd26 	bl	800d390 <siprintf>
        	touchy = getY();
 8003944:	f001 fa34 	bl	8004db0 <getY>
 8003948:	4603      	mov	r3, r0
 800394a:	f241 2288 	movw	r2, #4744	; 0x1288
 800394e:	443a      	add	r2, r7
 8003950:	8013      	strh	r3, [r2, #0]
        	sprintf(buffer2, "Y%d", touchy); // Konwersja wartości do ciągu znaków
 8003952:	f241 2388 	movw	r3, #4744	; 0x1288
 8003956:	443b      	add	r3, r7
 8003958:	881a      	ldrh	r2, [r3, #0]
 800395a:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <main+0x30c>)
 800395c:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 8003960:	443b      	add	r3, r7
 8003962:	494b      	ldr	r1, [pc, #300]	; (8003a90 <main+0x310>)
 8003964:	4618      	mov	r0, r3
 8003966:	f009 fd13 	bl	800d390 <siprintf>

        	LCD_Font(300, 200,  buffer1, _Open_Sans_Bold_28, 1, BLACK);
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <main+0x304>)
 800396c:	f502 5395 	add.w	r3, r2, #4768	; 0x12a0
 8003970:	19da      	adds	r2, r3, r7
 8003972:	2300      	movs	r3, #0
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2301      	movs	r3, #1
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <main+0x314>)
 800397c:	21c8      	movs	r1, #200	; 0xc8
 800397e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003982:	f7fd fd82 	bl	800148a <LCD_Font>
        	LCD_Font(300, 220,  buffer2, _Open_Sans_Bold_28, 1, BLACK);
 8003986:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <main+0x30c>)
 8003988:	f502 5395 	add.w	r3, r2, #4768	; 0x12a0
 800398c:	19da      	adds	r2, r3, r7
 800398e:	2300      	movs	r3, #0
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2301      	movs	r3, #1
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <main+0x314>)
 8003998:	21dc      	movs	r1, #220	; 0xdc
 800399a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800399e:	f7fd fd74 	bl	800148a <LCD_Font>
        	HAL_Delay(100);
 80039a2:	2064      	movs	r0, #100	; 0x64
 80039a4:	f001 fada 	bl	8004f5c <HAL_Delay>


        	XPT2046_Init();
 80039a8:	f001 f90a 	bl	8004bc0 <XPT2046_Init>
        	if(touchx >=696 && touchx<=696+88 && touchy>=9 && touchy<=9+47){// 696, pos_y, 88, 47,
 80039ac:	f241 238a 	movw	r3, #4746	; 0x128a
 80039b0:	443b      	add	r3, r7
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	f5b3 7f2e 	cmp.w	r3, #696	; 0x2b8
 80039b8:	d344      	bcc.n	8003a44 <main+0x2c4>
 80039ba:	f241 238a 	movw	r3, #4746	; 0x128a
 80039be:	443b      	add	r3, r7
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80039c6:	d83d      	bhi.n	8003a44 <main+0x2c4>
 80039c8:	f241 2388 	movw	r3, #4744	; 0x1288
 80039cc:	443b      	add	r3, r7
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d937      	bls.n	8003a44 <main+0x2c4>
 80039d4:	f241 2388 	movw	r3, #4744	; 0x1288
 80039d8:	443b      	add	r3, r7
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	2b38      	cmp	r3, #56	; 0x38
 80039de:	d831      	bhi.n	8003a44 <main+0x2c4>
        			uint16_t counter = TFT_Draw_List(400, 200, 100, "TYPE:", "powitanie",  save, _Open_Sans_Bold_14);
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <main+0x2fc>)
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	f241 238c 	movw	r3, #4748	; 0x128c
 80039e8:	443b      	add	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <main+0x318>)
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <main+0x31c>)
 80039f4:	2264      	movs	r2, #100	; 0x64
 80039f6:	21c8      	movs	r1, #200	; 0xc8
 80039f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80039fc:	f7fc ff87 	bl	800090e <TFT_Draw_List>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f241 2286 	movw	r2, #4742	; 0x1286
 8003a06:	443a      	add	r2, r7
 8003a08:	8013      	strh	r3, [r2, #0]
        			HAL_Delay(3000);
 8003a0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003a0e:	f001 faa5 	bl	8004f5c <HAL_Delay>
        			TFT_Restore_Area(400, 200, 100, 47+1+34+35*counter, save);
 8003a12:	f241 2386 	movw	r3, #4742	; 0x1286
 8003a16:	443b      	add	r3, r7
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	00d2      	lsls	r2, r2, #3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3352      	adds	r3, #82	; 0x52
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	f241 238c 	movw	r3, #4748	; 0x128c
 8003a30:	443b      	add	r3, r7
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	2264      	movs	r2, #100	; 0x64
 8003a3a:	21c8      	movs	r1, #200	; 0xc8
 8003a3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003a40:	f7fd f8a9 	bl	8000b96 <TFT_Restore_Area>
        	}
        	__HAL_GPIO_EXTI_CLEAR_IT(T_IRQ_Pin);//czyszczenie zgłoszonego przerwania
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a50:	2017      	movs	r0, #23
 8003a52:	f7ff fe53 	bl	80036fc <__NVIC_EnableIRQ>
          if(was_touched==1){
 8003a56:	e738      	b.n	80038ca <main+0x14a>
 8003a58:	0800e668 	.word	0x0800e668
 8003a5c:	240023f4 	.word	0x240023f4
 8003a60:	240023a8 	.word	0x240023a8
 8003a64:	58020400 	.word	0x58020400
 8003a68:	58020800 	.word	0x58020800
 8003a6c:	0800e630 	.word	0x0800e630
 8003a70:	0800e63c 	.word	0x0800e63c
 8003a74:	ffffedb0 	.word	0xffffedb0
 8003a78:	0800e648 	.word	0x0800e648
 8003a7c:	0800fb74 	.word	0x0800fb74
 8003a80:	240000dd 	.word	0x240000dd
 8003a84:	ffffed70 	.word	0xffffed70
 8003a88:	0800e64c 	.word	0x0800e64c
 8003a8c:	ffffed64 	.word	0xffffed64
 8003a90:	0800e650 	.word	0x0800e650
 8003a94:	08010a8c 	.word	0x08010a8c
 8003a98:	0800e65c 	.word	0x0800e65c
 8003a9c:	0800e654 	.word	0x0800e654

08003aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b09c      	sub	sp, #112	; 0x70
 8003aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aaa:	224c      	movs	r2, #76	; 0x4c
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f009 fcd1 	bl	800d456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f009 fccb 	bl	800d456 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f001 fd6f 	bl	80055a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <SystemClock_Config+0xf4>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <SystemClock_Config+0xf4>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ad6:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <SystemClock_Config+0xf4>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <SystemClock_Config+0xf8>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <SystemClock_Config+0xf8>)
 8003ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aea:	6193      	str	r3, [r2, #24]
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <SystemClock_Config+0xf8>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003af8:	bf00      	nop
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <SystemClock_Config+0xf8>)
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b06:	d1f8      	bne.n	8003afa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b16:	2340      	movs	r3, #64	; 0x40
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003b26:	2364      	movs	r3, #100	; 0x64
 8003b28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b32:	2302      	movs	r3, #2
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003b36:	230c      	movs	r3, #12
 8003b38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fd66 	bl	8005618 <HAL_RCC_OscConfig>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003b52:	f000 f989 	bl	8003e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b56:	233f      	movs	r3, #63	; 0x3f
 8003b58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003b62:	2308      	movs	r3, #8
 8003b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003b74:	2340      	movs	r3, #64	; 0x40
 8003b76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b78:	1d3b      	adds	r3, r7, #4
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 f9a5 	bl	8005ecc <HAL_RCC_ClockConfig>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003b88:	f000 f96e 	bl	8003e68 <Error_Handler>
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3770      	adds	r7, #112	; 0x70
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	58000400 	.word	0x58000400
 8003b98:	58024800 	.word	0x58024800

08003b9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b0b0      	sub	sp, #192	; 0xc0
 8003ba0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	22c0      	movs	r2, #192	; 0xc0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f009 fc54 	bl	800d456 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f002 fcb3 	bl	800652c <HAL_RCCEx_PeriphCLKConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8003bcc:	f000 f94c 	bl	8003e68 <Error_Handler>
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	37c0      	adds	r7, #192	; 0xc0
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==M1_S_Pin&&kalibracja_osi[0]==0){
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d10c      	bne.n	8003c02 <HAL_GPIO_EXTI_Callback+0x2a>
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d108      	bne.n	8003c02 <HAL_GPIO_EXTI_Callback+0x2a>
		liczba_krokow_osi[0]=0;
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
		givenSteps[0]=0;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
		kalibracja_osi[0]=1;
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin==M2_S_Pin&&kalibracja_osi[1]==0){
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d10c      	bne.n	8003c22 <HAL_GPIO_EXTI_Callback+0x4a>
 8003c08:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d108      	bne.n	8003c22 <HAL_GPIO_EXTI_Callback+0x4a>
		liczba_krokow_osi[1] = 10;//20
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003c12:	220a      	movs	r2, #10
 8003c14:	605a      	str	r2, [r3, #4]
		givenSteps[1]=10;//20
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003c18:	220a      	movs	r2, #10
 8003c1a:	605a      	str	r2, [r3, #4]
		kalibracja_osi[1]=1;
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
	}
	if(GPIO_Pin==M3_S_Pin&&kalibracja_osi[2]==0){
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d10c      	bne.n	8003c42 <HAL_GPIO_EXTI_Callback+0x6a>
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c2a:	789b      	ldrb	r3, [r3, #2]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d108      	bne.n	8003c42 <HAL_GPIO_EXTI_Callback+0x6a>
		liczba_krokow_osi[2]=0;
 8003c30:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
		givenSteps[2]=0;
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
		kalibracja_osi[2]=1;
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	709a      	strb	r2, [r3, #2]
	}
	if(GPIO_Pin==M4_S_Pin&&kalibracja_osi[3]==0){
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d10e      	bne.n	8003c66 <HAL_GPIO_EXTI_Callback+0x8e>
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c4a:	78db      	ldrb	r3, [r3, #3]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <HAL_GPIO_EXTI_Callback+0x8e>
		liczba_krokow_osi[3]=300;
 8003c50:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003c52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c56:	60da      	str	r2, [r3, #12]
		givenSteps[3]=300;
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003c5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c5e:	60da      	str	r2, [r3, #12]
		kalibracja_osi[3]=1;
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	70da      	strb	r2, [r3, #3]
	}
	if(GPIO_Pin==M5_S_Pin&&kalibracja_osi[4]==0){
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6c:	d10e      	bne.n	8003c8c <HAL_GPIO_EXTI_Callback+0xb4>
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c70:	791b      	ldrb	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_GPIO_EXTI_Callback+0xb4>
		liczba_krokow_osi[4]=1600;//1790
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003c78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003c7c:	611a      	str	r2, [r3, #16]
		givenSteps[4]=1600;//1790
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003c80:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003c84:	611a      	str	r2, [r3, #16]
		kalibracja_osi[4]=1;
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	711a      	strb	r2, [r3, #4]
	}

	if(GPIO_Pin == T_IRQ_Pin){
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c92:	d102      	bne.n	8003c9a <HAL_GPIO_EXTI_Callback+0xc2>
		was_touched=1;
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_GPIO_EXTI_Callback+0xe4>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(1000);
//		XPT2046_Init();//włączenie przerwań
//		__HAL_GPIO_EXTI_CLEAR_IT(T_IRQ_Pin);//czyszczenie zgłoszonego przerwania
//		NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);//czyszczenie zgłoszonego przerwania
 8003c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	24000004 	.word	0x24000004
 8003cb4:	240000ac 	.word	0x240000ac
 8003cb8:	240000c0 	.word	0x240000c0
 8003cbc:	240000dd 	.word	0x240000dd

08003cc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	f040 80a9 	bne.w	8003e26 <HAL_TIM_PeriodElapsedCallback+0x166>
  {
	if (givenSteps[0]!=liczba_krokow_osi[0]){
 8003cd4:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b57      	ldr	r3, [pc, #348]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d011      	beq.n	8003d04 <HAL_TIM_PeriodElapsedCallback+0x44>
		setDuration(M1_DIR_GPIO_Port, M1_DIR_Pin, liczba_krokow_osi[0], givenSteps[0], &factor[0]);
 8003ce0:	4b55      	ldr	r3, [pc, #340]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4954      	ldr	r1, [pc, #336]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003cea:	9100      	str	r1, [sp, #0]
 8003cec:	2102      	movs	r1, #2
 8003cee:	4854      	ldr	r0, [pc, #336]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003cf0:	f000 f8f6 	bl	8003ee0 <setDuration>
		moveMotorWithPosition(M1_STEP_GPIO_Port, M1_STEP_Pin, &liczba_krokow_osi[0], factor[0]);
 8003cf4:	4b51      	ldr	r3, [pc, #324]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003cf6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cfa:	4a4f      	ldr	r2, [pc, #316]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	4850      	ldr	r0, [pc, #320]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d00:	f000 f8cd 	bl	8003e9e <moveMotorWithPosition>
	}
	if (givenSteps[1]!=liczba_krokow_osi[1]){
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d011      	beq.n	8003d34 <HAL_TIM_PeriodElapsedCallback+0x74>
		setDuration(M2_DIR_GPIO_Port, M2_DIR_Pin, liczba_krokow_osi[1], givenSteps[1], &factor[1]);
 8003d10:	4b49      	ldr	r3, [pc, #292]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	494a      	ldr	r1, [pc, #296]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003d1a:	9100      	str	r1, [sp, #0]
 8003d1c:	2108      	movs	r1, #8
 8003d1e:	4848      	ldr	r0, [pc, #288]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d20:	f000 f8de 	bl	8003ee0 <setDuration>
		moveMotorWithPosition(M2_STEP_GPIO_Port, M2_STEP_Pin, &liczba_krokow_osi[1], factor[1]);
 8003d24:	4b45      	ldr	r3, [pc, #276]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003d26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d2a:	4a47      	ldr	r2, [pc, #284]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003d2c:	2110      	movs	r1, #16
 8003d2e:	4844      	ldr	r0, [pc, #272]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d30:	f000 f8b5 	bl	8003e9e <moveMotorWithPosition>
	}
	if (givenSteps[2]!=liczba_krokow_osi[2]){
 8003d34:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d028      	beq.n	8003d92 <HAL_TIM_PeriodElapsedCallback+0xd2>
		setDuration(M3_DIR_GPIO_Port, M3_DIR_Pin, liczba_krokow_osi[2], givenSteps[2], &factor[2]);
 8003d40:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4940      	ldr	r1, [pc, #256]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003d4a:	9100      	str	r1, [sp, #0]
 8003d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d50:	483b      	ldr	r0, [pc, #236]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d52:	f000 f8c5 	bl	8003ee0 <setDuration>
		setDuration(M5_DIR_GPIO_Port, M5_DIR_Pin, liczba_krokow_osi[2], givenSteps[2], &factor[2]);
 8003d56:	4b38      	ldr	r3, [pc, #224]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	493b      	ldr	r1, [pc, #236]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003d60:	9100      	str	r1, [sp, #0]
 8003d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d66:	4836      	ldr	r0, [pc, #216]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d68:	f000 f8ba 	bl	8003ee0 <setDuration>
		moveMotorWithPosition(M3_STEP_GPIO_Port, M3_STEP_Pin, &liczba_krokow_osi[2], factor[2]);
 8003d6c:	4b33      	ldr	r3, [pc, #204]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003d6e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003d72:	4a37      	ldr	r2, [pc, #220]	; (8003e50 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d78:	4831      	ldr	r0, [pc, #196]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d7a:	f000 f890 	bl	8003e9e <moveMotorWithPosition>
		//opcjonalny delay - możliwe że trzeba dołożyć
		simpleMoveMotor(M5_STEP_GPIO_Port, M5_STEP_Pin);
 8003d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d82:	482f      	ldr	r0, [pc, #188]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d84:	f000 f875 	bl	8003e72 <simpleMoveMotor>
		simpleMoveMotor(M3_STEP_GPIO_Port, M3_STEP_Pin);
 8003d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d8c:	482c      	ldr	r0, [pc, #176]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003d8e:	f000 f870 	bl	8003e72 <simpleMoveMotor>
	}
	if (givenSteps[3]!=liczba_krokow_osi[3]){
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d013      	beq.n	8003dc6 <HAL_TIM_PeriodElapsedCallback+0x106>
		setDuration(M4_DIR_GPIO_Port, M4_DIR_Pin, liczba_krokow_osi[3], givenSteps[3], &factor[3]);
 8003d9e:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	492b      	ldr	r1, [pc, #172]	; (8003e54 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003da8:	9100      	str	r1, [sp, #0]
 8003daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dae:	4824      	ldr	r0, [pc, #144]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003db0:	f000 f896 	bl	8003ee0 <setDuration>
		moveMotorWithPosition(M4_STEP_GPIO_Port, M4_STEP_Pin, &liczba_krokow_osi[3], factor[3]);
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003db6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003dba:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003dc0:	481f      	ldr	r0, [pc, #124]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003dc2:	f000 f86c 	bl	8003e9e <moveMotorWithPosition>
	}
	if (givenSteps[4]!=liczba_krokow_osi[4]){
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d018      	beq.n	8003e04 <HAL_TIM_PeriodElapsedCallback+0x144>
		setDuration(M5_DIR_GPIO_Port, M5_DIR_Pin, liczba_krokow_osi[4], givenSteps[4], &factor[4]);
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	4920      	ldr	r1, [pc, #128]	; (8003e5c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003ddc:	9100      	str	r1, [sp, #0]
 8003dde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003de2:	4817      	ldr	r0, [pc, #92]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003de4:	f000 f87c 	bl	8003ee0 <setDuration>
		moveMotorWithPosition(M5_STEP_GPIO_Port, M5_STEP_Pin, &liczba_krokow_osi[4], factor[4]);
 8003de8:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003dea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003df4:	4812      	ldr	r0, [pc, #72]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003df6:	f000 f852 	bl	8003e9e <moveMotorWithPosition>
		//opcjonalny delay - możliwe że trzeba dołożyć
		simpleMoveMotor(M5_STEP_GPIO_Port, M5_STEP_Pin);
 8003dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dfe:	4810      	ldr	r0, [pc, #64]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003e00:	f000 f837 	bl	8003e72 <simpleMoveMotor>
	}
	set_ang(givenSteps[5], 0);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f99f 	bl	8004150 <set_ang>
	HAL_GPIO_WritePin(M6_STEP_GPIO_Port , M6_STEP_Pin, GPIO_PIN_SET);
 8003e12:	2201      	movs	r2, #1
 8003e14:	2102      	movs	r1, #2
 8003e16:	4813      	ldr	r0, [pc, #76]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003e18:	f001 fb90 	bl	800553c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M6_STEP_GPIO_Port , M6_STEP_Pin, GPIO_PIN_RESET);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2102      	movs	r1, #2
 8003e20:	4810      	ldr	r0, [pc, #64]	; (8003e64 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003e22:	f001 fb8b 	bl	800553c <HAL_GPIO_WritePin>
  }

}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40001000 	.word	0x40001000
 8003e34:	240000c0 	.word	0x240000c0
 8003e38:	240000ac 	.word	0x240000ac
 8003e3c:	240000d8 	.word	0x240000d8
 8003e40:	58020000 	.word	0x58020000
 8003e44:	240000d9 	.word	0x240000d9
 8003e48:	240000b0 	.word	0x240000b0
 8003e4c:	240000da 	.word	0x240000da
 8003e50:	240000b4 	.word	0x240000b4
 8003e54:	240000db 	.word	0x240000db
 8003e58:	240000b8 	.word	0x240000b8
 8003e5c:	240000dc 	.word	0x240000dc
 8003e60:	240000bc 	.word	0x240000bc
 8003e64:	58020400 	.word	0x58020400

08003e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e6c:	b672      	cpsid	i
}
 8003e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <Error_Handler+0x8>

08003e72 <simpleMoveMotor>:
	    }


}

void simpleMoveMotor( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	2201      	movs	r2, #1
 8003e82:	4619      	mov	r1, r3
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f001 fb59 	bl	800553c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 fb53 	bl	800553c <HAL_GPIO_WritePin>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <moveMotorWithPosition>:

void moveMotorWithPosition( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  int* stepCounter, int8_t factor) {
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	460b      	mov	r3, r1
 8003eac:	817b      	strh	r3, [r7, #10]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003eb2:	897b      	ldrh	r3, [r7, #10]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f001 fb3f 	bl	800553c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003ebe:	897b      	ldrh	r3, [r7, #10]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f001 fb39 	bl	800553c <HAL_GPIO_WritePin>
	(*stepCounter)+=factor;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003ed2:	441a      	add	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	601a      	str	r2, [r3, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <setDuration>:

void setDuration(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int currentSteps, int givenSteps, int8_t* factor){
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	460b      	mov	r3, r1
 8003eee:	817b      	strh	r3, [r7, #10]
	if (givenSteps>currentSteps){
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	dd09      	ble.n	8003f0c <setDuration+0x2c>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);//jeżeli kierunek ustawiony jest na set to ramię odjeżdża od krańcówki
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	2200      	movs	r2, #0
 8003efc:	4619      	mov	r1, r3
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f001 fb1c 	bl	800553c <HAL_GPIO_WritePin>
		(*factor) =1;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);//jeżeli kierunek ustawiony jest na reset to ramię jedzie w stronę krańcówki
		(*factor) = -1;
	}
}
 8003f0a:	e008      	b.n	8003f1e <setDuration+0x3e>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);//jeżeli kierunek ustawiony jest na reset to ramię jedzie w stronę krańcówki
 8003f0c:	897b      	ldrh	r3, [r7, #10]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4619      	mov	r1, r3
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f001 fb12 	bl	800553c <HAL_GPIO_WritePin>
		(*factor) = -1;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	22ff      	movs	r2, #255	; 0xff
 8003f1c:	701a      	strb	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <count_points_in_file>:
DIR directory;
FILINFO fno;
FATFS file_system;
FIL file;

int count_points_in_file(char file_name[20]){
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b0a0      	sub	sp, #128	; 0x80
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
	int counter=0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	677b      	str	r3, [r7, #116]	; 0x74
	char line[100];
	char *word;
	if (f_open(&file, file_name, FA_READ)== FR_OK) {
 8003f34:	2201      	movs	r2, #1
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	481e      	ldr	r0, [pc, #120]	; (8003fb4 <count_points_in_file+0x8c>)
 8003f3a:	f008 faa5 	bl	800c488 <f_open>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d131      	bne.n	8003fa8 <count_points_in_file+0x80>
		while (f_gets(line, sizeof(line), &file)) {
 8003f44:	e023      	b.n	8003f8e <count_points_in_file+0x66>
			word = strtok(line, " \t\r\n");
 8003f46:	f107 030c 	add.w	r3, r7, #12
 8003f4a:	491b      	ldr	r1, [pc, #108]	; (8003fb8 <count_points_in_file+0x90>)
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f009 fa8b 	bl	800d468 <strtok>
 8003f52:	6738      	str	r0, [r7, #112]	; 0x70
			if (strstr(word, "trzecia") != NULL){
 8003f54:	4919      	ldr	r1, [pc, #100]	; (8003fbc <count_points_in_file+0x94>)
 8003f56:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003f58:	f009 fae2 	bl	800d520 <strstr>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d015      	beq.n	8003f8e <count_points_in_file+0x66>
				counter++;
 8003f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f64:	3301      	adds	r3, #1
 8003f66:	677b      	str	r3, [r7, #116]	; 0x74
				LCD_Font(450, 250+counter*14, word, _Open_Sans_Bold_14, 1, BLACK);
 8003f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	00d2      	lsls	r2, r2, #3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	33fa      	adds	r3, #250	; 0xfa
 8003f78:	b299      	uxth	r1, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <count_points_in_file+0x98>)
 8003f84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f86:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8003f8a:	f7fd fa7e 	bl	800148a <LCD_Font>
		while (f_gets(line, sizeof(line), &file)) {
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <count_points_in_file+0x8c>)
 8003f94:	2164      	movs	r1, #100	; 0x64
 8003f96:	4618      	mov	r0, r3
 8003f98:	f008 fef1 	bl	800cd7e <f_gets>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1d1      	bne.n	8003f46 <count_points_in_file+0x1e>
			}

        }
        f_close(&file); // Close the file after reading
 8003fa2:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <count_points_in_file+0x8c>)
 8003fa4:	f008 fdeb 	bl	800cb7e <f_close>
}
	return counter;
 8003fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3778      	adds	r7, #120	; 0x78
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	24001260 	.word	0x24001260
 8003fb8:	0800e674 	.word	0x0800e674
 8003fbc:	0800e67c 	.word	0x0800e67c
 8003fc0:	0800fb74 	.word	0x0800fb74

08003fc4 <create_file>:

bool create_file(char file_name[20]){
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	if(f_open(&file, file_name, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 8003fcc:	2212      	movs	r2, #18
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4807      	ldr	r0, [pc, #28]	; (8003ff0 <create_file+0x2c>)
 8003fd2:	f008 fa59 	bl	800c488 <f_open>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <create_file+0x22>
		_close(&file);
 8003fdc:	4804      	ldr	r0, [pc, #16]	; (8003ff0 <create_file+0x2c>)
 8003fde:	f000 fb82 	bl	80046e6 <_close>
		return true;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <create_file+0x24>
	}
	else return false;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	24001260 	.word	0x24001260

08003ff4 <init_SD_card>:

bool init_SD_card(){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
	if (f_mount(&file_system, "/", 1) == FR_OK) return true;
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4906      	ldr	r1, [pc, #24]	; (8004014 <init_SD_card+0x20>)
 8003ffc:	4806      	ldr	r0, [pc, #24]	; (8004018 <init_SD_card+0x24>)
 8003ffe:	f008 f9fd 	bl	800c3fc <f_mount>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <init_SD_card+0x18>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <init_SD_card+0x1a>
	else return false;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	0800e684 	.word	0x0800e684
 8004018:	2400022c 	.word	0x2400022c

0800401c <unmount_SD_card>:

bool unmount_SD_card(){
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	      	if ( f_mount(NULL, "/", 1)== FR_OK) return true;
 8004020:	2201      	movs	r2, #1
 8004022:	4906      	ldr	r1, [pc, #24]	; (800403c <unmount_SD_card+0x20>)
 8004024:	2000      	movs	r0, #0
 8004026:	f008 f9e9 	bl	800c3fc <f_mount>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <unmount_SD_card+0x18>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <unmount_SD_card+0x1a>
	    	else return false;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	0800e684 	.word	0x0800e684

08004040 <count_files>:

int count_files (){
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
  int number_of_files=0;
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
  if (f_opendir (&directory,"/") == FR_OK) {
 800404a:	4912      	ldr	r1, [pc, #72]	; (8004094 <count_files+0x54>)
 800404c:	4812      	ldr	r0, [pc, #72]	; (8004098 <count_files+0x58>)
 800404e:	f008 fdc0 	bl	800cbd2 <f_opendir>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d118      	bne.n	800408a <count_files+0x4a>
	  for (;;) {
		  if (f_readdir(&directory, &fno)!=FR_OK || fno.fname[0] == 0) break;  /* Error or end of dir */
 8004058:	4910      	ldr	r1, [pc, #64]	; (800409c <count_files+0x5c>)
 800405a:	480f      	ldr	r0, [pc, #60]	; (8004098 <count_files+0x58>)
 800405c:	f008 fe52 	bl	800cd04 <f_readdir>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <count_files+0x44>
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <count_files+0x5c>)
 8004068:	7d9b      	ldrb	r3, [r3, #22]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <count_files+0x44>
		  if ((strstr(fno.fname, ".txt") != NULL)) {            /* Directory */
 800406e:	490c      	ldr	r1, [pc, #48]	; (80040a0 <count_files+0x60>)
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <count_files+0x64>)
 8004072:	f009 fa55 	bl	800d520 <strstr>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ed      	beq.n	8004058 <count_files+0x18>
			number_of_files++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3301      	adds	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
		  if (f_readdir(&directory, &fno)!=FR_OK || fno.fname[0] == 0) break;  /* Error or end of dir */
 8004082:	e7e9      	b.n	8004058 <count_files+0x18>
		  }
	  }
	  f_closedir(&directory);
 8004084:	4804      	ldr	r0, [pc, #16]	; (8004098 <count_files+0x58>)
 8004086:	f008 fe17 	bl	800ccb8 <f_closedir>
  }
  return number_of_files;
 800408a:	687b      	ldr	r3, [r7, #4]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	0800e684 	.word	0x0800e684
 8004098:	240000e0 	.word	0x240000e0
 800409c:	24000114 	.word	0x24000114
 80040a0:	0800e688 	.word	0x0800e688
 80040a4:	2400012a 	.word	0x2400012a

080040a8 <get_file_info>:

struct file_info get_file_info(int file_number){
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b092      	sub	sp, #72	; 0x48
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  int counter=0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct file_info info;
  if (f_opendir (&directory,"/")== FR_OK) {
 80040b6:	4921      	ldr	r1, [pc, #132]	; (800413c <get_file_info+0x94>)
 80040b8:	4821      	ldr	r0, [pc, #132]	; (8004140 <get_file_info+0x98>)
 80040ba:	f008 fd8a 	bl	800cbd2 <f_opendir>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d129      	bne.n	8004118 <get_file_info+0x70>
	  for (;;) {
		  if (f_readdir(&directory, &fno) != FR_OK|| fno.fname[0] == 0) break;  /* Error or end of dir */
 80040c4:	491f      	ldr	r1, [pc, #124]	; (8004144 <get_file_info+0x9c>)
 80040c6:	481e      	ldr	r0, [pc, #120]	; (8004140 <get_file_info+0x98>)
 80040c8:	f008 fe1c 	bl	800cd04 <f_readdir>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11f      	bne.n	8004112 <get_file_info+0x6a>
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <get_file_info+0x9c>)
 80040d4:	7d9b      	ldrb	r3, [r3, #22]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01b      	beq.n	8004112 <get_file_info+0x6a>
		  if ((strstr(fno.fname, ".txt") != NULL)) {
 80040da:	491b      	ldr	r1, [pc, #108]	; (8004148 <get_file_info+0xa0>)
 80040dc:	481b      	ldr	r0, [pc, #108]	; (800414c <get_file_info+0xa4>)
 80040de:	f009 fa1f 	bl	800d520 <strstr>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ed      	beq.n	80040c4 <get_file_info+0x1c>
			  counter++;
 80040e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ea:	3301      	adds	r3, #1
 80040ec:	647b      	str	r3, [r7, #68]	; 0x44
			  if(counter == file_number){
 80040ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d1e6      	bne.n	80040c4 <get_file_info+0x1c>
				  info.date = fno.fdate;
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <get_file_info+0x9c>)
 80040f8:	889b      	ldrh	r3, [r3, #4]
 80040fa:	823b      	strh	r3, [r7, #16]
				  strcpy(info.name, fno.fname);
 80040fc:	f107 030c 	add.w	r3, r7, #12
 8004100:	3306      	adds	r3, #6
 8004102:	4912      	ldr	r1, [pc, #72]	; (800414c <get_file_info+0xa4>)
 8004104:	4618      	mov	r0, r3
 8004106:	f009 faa4 	bl	800d652 <strcpy>
				  info.size = fno.fsize;
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <get_file_info+0x9c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
		  if (f_readdir(&directory, &fno) != FR_OK|| fno.fname[0] == 0) break;  /* Error or end of dir */
 8004110:	e7d8      	b.n	80040c4 <get_file_info+0x1c>
			  }
		  }

	  }
	  f_closedir(&directory);
 8004112:	480b      	ldr	r0, [pc, #44]	; (8004140 <get_file_info+0x98>)
 8004114:	f008 fdd0 	bl	800ccb8 <f_closedir>
  }
  return info;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	461d      	mov	r5, r3
 800411c:	f107 040c 	add.w	r4, r7, #12
 8004120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800412a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004130:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	3748      	adds	r7, #72	; 0x48
 8004138:	46bd      	mov	sp, r7
 800413a:	bdb0      	pop	{r4, r5, r7, pc}
 800413c:	0800e684 	.word	0x0800e684
 8004140:	240000e0 	.word	0x240000e0
 8004144:	24000114 	.word	0x24000114
 8004148:	0800e688 	.word	0x0800e688
 800414c:	2400012a 	.word	0x2400012a

08004150 <set_ang>:
 */
#include "tim.h"
#include "servo.h"

void set_ang(uint16_t ang,  uint8_t mode)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	460a      	mov	r2, r1
 800415a:	80fb      	strh	r3, [r7, #6]
 800415c:	4613      	mov	r3, r2
 800415e:	717b      	strb	r3, [r7, #5]
	uint16_t val;
	if(ang>ANGLE_MAX)
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004166:	d902      	bls.n	800416e <set_ang+0x1e>
	{ang=ANGLE_MAX;}
 8004168:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800416c:	80fb      	strh	r3, [r7, #6]
		else if (ang<ANGLE_MIN)
			{ang=ANGLE_MIN;}
			if(mode)
 800416e:	797b      	ldrb	r3, [r7, #5]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00f      	beq.n	8004194 <set_ang+0x44>
				{val=PWM_MIN+((ang-ANGLE_MIN)*STEP)/1000;}
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	f240 4257 	movw	r2, #1111	; 0x457
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <set_ang+0x78>)
 8004180:	fb82 1203 	smull	r1, r2, r2, r3
 8004184:	1192      	asrs	r2, r2, #6
 8004186:	17db      	asrs	r3, r3, #31
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	b29b      	uxth	r3, r3
 800418c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004190:	81fb      	strh	r3, [r7, #14]
 8004192:	e00e      	b.n	80041b2 <set_ang+0x62>
			else
				{val=PWM_MAX-((ang-ANGLE_MIN)*STEP)/1000;}
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	f240 4257 	movw	r2, #1111	; 0x457
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <set_ang+0x78>)
 80041a0:	fb82 1203 	smull	r1, r2, r2, r3
 80041a4:	1192      	asrs	r2, r2, #6
 80041a6:	17db      	asrs	r3, r3, #31
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80041b0:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <set_ang+0x7c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	89fa      	ldrh	r2, [r7, #14]
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	10624dd3 	.word	0x10624dd3
 80041cc:	240023a8 	.word	0x240023a8

080041d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <MX_SPI1_Init+0xa4>)
 80041d6:	4a28      	ldr	r2, [pc, #160]	; (8004278 <MX_SPI1_Init+0xa8>)
 80041d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041da:	4b26      	ldr	r3, [pc, #152]	; (8004274 <MX_SPI1_Init+0xa4>)
 80041dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80041e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041e2:	4b24      	ldr	r3, [pc, #144]	; (8004274 <MX_SPI1_Init+0xa4>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e8:	4b22      	ldr	r3, [pc, #136]	; (8004274 <MX_SPI1_Init+0xa4>)
 80041ea:	2207      	movs	r2, #7
 80041ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <MX_SPI1_Init+0xa4>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041f4:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <MX_SPI1_Init+0xa4>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041fa:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <MX_SPI1_Init+0xa4>)
 80041fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004200:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004204:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004208:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <MX_SPI1_Init+0xa4>)
 800420c:	2200      	movs	r2, #0
 800420e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004210:	4b18      	ldr	r3, [pc, #96]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004212:	2200      	movs	r2, #0
 8004214:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004216:	4b17      	ldr	r3, [pc, #92]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004218:	2200      	movs	r2, #0
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800421c:	4b15      	ldr	r3, [pc, #84]	; (8004274 <MX_SPI1_Init+0xa4>)
 800421e:	2200      	movs	r2, #0
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004228:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <MX_SPI1_Init+0xa4>)
 800422c:	2200      	movs	r2, #0
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004232:	2200      	movs	r2, #0
 8004234:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004238:	2200      	movs	r2, #0
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <MX_SPI1_Init+0xa4>)
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004244:	2200      	movs	r2, #0
 8004246:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <MX_SPI1_Init+0xa4>)
 800424a:	2200      	movs	r2, #0
 800424c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004250:	2200      	movs	r2, #0
 8004252:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004256:	2200      	movs	r2, #0
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <MX_SPI1_Init+0xa4>)
 800425c:	2200      	movs	r2, #0
 800425e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <MX_SPI1_Init+0xa4>)
 8004262:	f003 fcd1 	bl	8007c08 <HAL_SPI_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800426c:	f7ff fdfc 	bl	8003e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	24002290 	.word	0x24002290
 8004278:	40013000 	.word	0x40013000

0800427c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <MX_SPI2_Init+0xa4>)
 8004282:	4a28      	ldr	r2, [pc, #160]	; (8004324 <MX_SPI2_Init+0xa8>)
 8004284:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004286:	4b26      	ldr	r3, [pc, #152]	; (8004320 <MX_SPI2_Init+0xa4>)
 8004288:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800428c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <MX_SPI2_Init+0xa4>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004294:	4b22      	ldr	r3, [pc, #136]	; (8004320 <MX_SPI2_Init+0xa4>)
 8004296:	2207      	movs	r2, #7
 8004298:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800429a:	4b21      	ldr	r3, [pc, #132]	; (8004320 <MX_SPI2_Init+0xa4>)
 800429c:	2200      	movs	r2, #0
 800429e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042a0:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80042b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042b6:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042be:	2200      	movs	r2, #0
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042d8:	2200      	movs	r2, #0
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80042dc:	4b10      	ldr	r3, [pc, #64]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042de:	2200      	movs	r2, #0
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042e2:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80042ee:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <MX_SPI2_Init+0xa4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <MX_SPI2_Init+0xa4>)
 8004302:	2200      	movs	r2, #0
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <MX_SPI2_Init+0xa4>)
 8004308:	2200      	movs	r2, #0
 800430a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800430c:	4804      	ldr	r0, [pc, #16]	; (8004320 <MX_SPI2_Init+0xa4>)
 800430e:	f003 fc7b 	bl	8007c08 <HAL_SPI_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8004318:	f7ff fda6 	bl	8003e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	24002318 	.word	0x24002318
 8004324:	40003800 	.word	0x40003800

08004328 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b0be      	sub	sp, #248	; 0xf8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004340:	f107 0320 	add.w	r3, r7, #32
 8004344:	22c0      	movs	r2, #192	; 0xc0
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f009 f884 	bl	800d456 <memset>
  if(spiHandle->Instance==SPI1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a60      	ldr	r2, [pc, #384]	; (80044d4 <HAL_SPI_MspInit+0x1ac>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d147      	bne.n	80043e8 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8004364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800436c:	f107 0320 	add.w	r3, r7, #32
 8004370:	4618      	mov	r0, r3
 8004372:	f002 f8db 	bl	800652c <HAL_RCCEx_PeriphCLKConfig>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800437c:	f7ff fd74 	bl	8003e68 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004380:	4b55      	ldr	r3, [pc, #340]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 8004382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004386:	4a54      	ldr	r2, [pc, #336]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 8004388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800438c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004390:	4b51      	ldr	r3, [pc, #324]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 8004392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439e:	4b4e      	ldr	r3, [pc, #312]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 80043a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043a4:	4a4c      	ldr	r2, [pc, #304]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043ae:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 80043b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80043bc:	23e0      	movs	r3, #224	; 0xe0
 80043be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043d4:	2305      	movs	r3, #5
 80043d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80043de:	4619      	mov	r1, r3
 80043e0:	483e      	ldr	r0, [pc, #248]	; (80044dc <HAL_SPI_MspInit+0x1b4>)
 80043e2:	f000 fefb 	bl	80051dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80043e6:	e070      	b.n	80044ca <HAL_SPI_MspInit+0x1a2>
  else if(spiHandle->Instance==SPI2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3c      	ldr	r2, [pc, #240]	; (80044e0 <HAL_SPI_MspInit+0x1b8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d16b      	bne.n	80044ca <HAL_SPI_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80043f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80043fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004406:	f107 0320 	add.w	r3, r7, #32
 800440a:	4618      	mov	r0, r3
 800440c:	f002 f88e 	bl	800652c <HAL_RCCEx_PeriphCLKConfig>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_SPI_MspInit+0xf2>
      Error_Handler();
 8004416:	f7ff fd27 	bl	8003e68 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 800441c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004420:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 8004422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800442a:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 800442c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 800443a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800443e:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 800444a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 8004458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800445c:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 800445e:	f043 0302 	orr.w	r3, r3, #2
 8004462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004466:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <HAL_SPI_MspInit+0x1b0>)
 8004468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_DIN_Pin|T_DO_Pin;
 8004474:	2306      	movs	r3, #6
 8004476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004486:	2300      	movs	r3, #0
 8004488:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800448c:	2305      	movs	r3, #5
 800448e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004492:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004496:	4619      	mov	r1, r3
 8004498:	4812      	ldr	r0, [pc, #72]	; (80044e4 <HAL_SPI_MspInit+0x1bc>)
 800449a:	f000 fe9f 	bl	80051dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = T_CLK_Pin;
 800449e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044b8:	2305      	movs	r3, #5
 80044ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(T_CLK_GPIO_Port, &GPIO_InitStruct);
 80044be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4808      	ldr	r0, [pc, #32]	; (80044e8 <HAL_SPI_MspInit+0x1c0>)
 80044c6:	f000 fe89 	bl	80051dc <HAL_GPIO_Init>
}
 80044ca:	bf00      	nop
 80044cc:	37f8      	adds	r7, #248	; 0xf8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40013000 	.word	0x40013000
 80044d8:	58024400 	.word	0x58024400
 80044dc:	58020000 	.word	0x58020000
 80044e0:	40003800 	.word	0x40003800
 80044e4:	58020800 	.word	0x58020800
 80044e8:	58020400 	.word	0x58020400

080044ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_MspInit+0x30>)
 80044f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <HAL_MspInit+0x30>)
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_MspInit+0x30>)
 8004504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	58024400 	.word	0x58024400

08004520 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
if(Timer1>0) Timer1--;
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <SDTimer_Handler+0x40>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <SDTimer_Handler+0x1c>
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <SDTimer_Handler+0x40>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <SDTimer_Handler+0x40>)
 800453a:	701a      	strb	r2, [r3, #0]
if(Timer2>0) Timer2--;
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <SDTimer_Handler+0x44>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <SDTimer_Handler+0x34>
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <SDTimer_Handler+0x44>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <SDTimer_Handler+0x44>)
 8004552:	701a      	strb	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	240023a1 	.word	0x240023a1
 8004564:	240023a2 	.word	0x240023a2

08004568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800456c:	e7fe      	b.n	800456c <NMI_Handler+0x4>

0800456e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004572:	e7fe      	b.n	8004572 <HardFault_Handler+0x4>

08004574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004578:	e7fe      	b.n	8004578 <MemManage_Handler+0x4>

0800457a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800457e:	e7fe      	b.n	800457e <BusFault_Handler+0x4>

08004580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004584:	e7fe      	b.n	8004584 <UsageFault_Handler+0x4>

08004586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <SysTick_Handler+0x30>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <SysTick_Handler+0x30>)
 80045c0:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt>=10)
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <SysTick_Handler+0x30>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d904      	bls.n	80045d6 <SysTick_Handler+0x26>
		{
			FatFsCnt=0;
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <SysTick_Handler+0x30>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
			SDTimer_Handler();
 80045d2:	f7ff ffa5 	bl	8004520 <SDTimer_Handler>
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045d6:	f000 fca1 	bl	8004f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	240023a0 	.word	0x240023a0

080045e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_S_Pin);
 80045e8:	2004      	movs	r0, #4
 80045ea:	f000 ffc0 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_S_Pin);
 80045f6:	2020      	movs	r0, #32
 80045f8:	f000 ffb9 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M3_S_Pin);
 80045fc:	2040      	movs	r0, #64	; 0x40
 80045fe:	f000 ffb6 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M4_S_Pin);
 8004602:	2080      	movs	r0, #128	; 0x80
 8004604:	f000 ffb3 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M5_S_Pin);
 8004608:	f44f 7080 	mov.w	r0, #256	; 0x100
 800460c:	f000 ffaf 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8004610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004614:	f000 ffab 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004618:	bf00      	nop
 800461a:	bd80      	pop	{r7, pc}

0800461c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004620:	4802      	ldr	r0, [pc, #8]	; (800462c <TIM6_DAC_IRQHandler+0x10>)
 8004622:	f004 fc5b 	bl	8008edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	240023f4 	.word	0x240023f4

08004630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return 1;
 8004634:	2301      	movs	r3, #1
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_kill>:

int _kill(int pid, int sig)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800464a:	f008 ffd5 	bl	800d5f8 <__errno>
 800464e:	4603      	mov	r3, r0
 8004650:	2216      	movs	r2, #22
 8004652:	601a      	str	r2, [r3, #0]
  return -1;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_exit>:

void _exit (int status)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004668:	f04f 31ff 	mov.w	r1, #4294967295
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ffe7 	bl	8004640 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004672:	e7fe      	b.n	8004672 <_exit+0x12>

08004674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e00a      	b.n	800469c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004686:	f3af 8000 	nop.w
 800468a:	4601      	mov	r1, r0
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	60ba      	str	r2, [r7, #8]
 8004692:	b2ca      	uxtb	r2, r1
 8004694:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3301      	adds	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	dbf0      	blt.n	8004686 <_read+0x12>
  }

  return len;
 80046a4:	687b      	ldr	r3, [r7, #4]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e009      	b.n	80046d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	60ba      	str	r2, [r7, #8]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3301      	adds	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	dbf1      	blt.n	80046c0 <_write+0x12>
  }
  return len;
 80046dc:	687b      	ldr	r3, [r7, #4]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <_close>:

int _close(int file)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800470e:	605a      	str	r2, [r3, #4]
  return 0;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <_isatty>:

int _isatty(int file)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004726:	2301      	movs	r3, #1
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <_sbrk+0x5c>)
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <_sbrk+0x60>)
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <_sbrk+0x64>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <_sbrk+0x64>)
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <_sbrk+0x68>)
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <_sbrk+0x64>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	429a      	cmp	r2, r3
 800477e:	d207      	bcs.n	8004790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004780:	f008 ff3a 	bl	800d5f8 <__errno>
 8004784:	4603      	mov	r3, r0
 8004786:	220c      	movs	r2, #12
 8004788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	e009      	b.n	80047a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <_sbrk+0x64>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <_sbrk+0x64>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <_sbrk+0x64>)
 80047a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047a2:	68fb      	ldr	r3, [r7, #12]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	24080000 	.word	0x24080000
 80047b0:	00000400 	.word	0x00000400
 80047b4:	240023a4 	.word	0x240023a4
 80047b8:	240027d0 	.word	0x240027d0

080047bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80047c0:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <SystemInit+0xe4>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	4a36      	ldr	r2, [pc, #216]	; (80048a0 <SystemInit+0xe4>)
 80047c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <SystemInit+0xe8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2b06      	cmp	r3, #6
 80047da:	d807      	bhi.n	80047ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047dc:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <SystemInit+0xe8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 030f 	bic.w	r3, r3, #15
 80047e4:	4a2f      	ldr	r2, [pc, #188]	; (80048a4 <SystemInit+0xe8>)
 80047e6:	f043 0307 	orr.w	r3, r3, #7
 80047ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80047ec:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <SystemInit+0xec>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <SystemInit+0xec>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047f8:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <SystemInit+0xec>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80047fe:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <SystemInit+0xec>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4929      	ldr	r1, [pc, #164]	; (80048a8 <SystemInit+0xec>)
 8004804:	4b29      	ldr	r3, [pc, #164]	; (80048ac <SystemInit+0xf0>)
 8004806:	4013      	ands	r3, r2
 8004808:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800480a:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <SystemInit+0xe8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004816:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <SystemInit+0xe8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 030f 	bic.w	r3, r3, #15
 800481e:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <SystemInit+0xe8>)
 8004820:	f043 0307 	orr.w	r3, r3, #7
 8004824:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004826:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <SystemInit+0xec>)
 8004828:	2200      	movs	r2, #0
 800482a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800482c:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <SystemInit+0xec>)
 800482e:	2200      	movs	r2, #0
 8004830:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004832:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <SystemInit+0xec>)
 8004834:	2200      	movs	r2, #0
 8004836:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <SystemInit+0xec>)
 800483a:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <SystemInit+0xf4>)
 800483c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <SystemInit+0xec>)
 8004840:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <SystemInit+0xf8>)
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <SystemInit+0xec>)
 8004846:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <SystemInit+0xfc>)
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <SystemInit+0xec>)
 800484c:	2200      	movs	r2, #0
 800484e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <SystemInit+0xec>)
 8004852:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <SystemInit+0xfc>)
 8004854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <SystemInit+0xec>)
 8004858:	2200      	movs	r2, #0
 800485a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <SystemInit+0xec>)
 800485e:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <SystemInit+0xfc>)
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <SystemInit+0xec>)
 8004864:	2200      	movs	r2, #0
 8004866:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <SystemInit+0xec>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <SystemInit+0xec>)
 800486e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004872:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <SystemInit+0xec>)
 8004876:	2200      	movs	r2, #0
 8004878:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <SystemInit+0x100>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <SystemInit+0x104>)
 8004880:	4013      	ands	r3, r2
 8004882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004886:	d202      	bcs.n	800488e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <SystemInit+0x108>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <SystemInit+0x10c>)
 8004890:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004894:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00
 80048a4:	52002000 	.word	0x52002000
 80048a8:	58024400 	.word	0x58024400
 80048ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80048b0:	02020200 	.word	0x02020200
 80048b4:	01ff0000 	.word	0x01ff0000
 80048b8:	01010280 	.word	0x01010280
 80048bc:	5c001000 	.word	0x5c001000
 80048c0:	ffff0000 	.word	0xffff0000
 80048c4:	51008108 	.word	0x51008108
 80048c8:	52004000 	.word	0x52004000

080048cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b096      	sub	sp, #88	; 0x58
 80048d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	611a      	str	r2, [r3, #16]
 80048ee:	615a      	str	r2, [r3, #20]
 80048f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	222c      	movs	r2, #44	; 0x2c
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f008 fdac 	bl	800d456 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80048fe:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <MX_TIM1_Init+0x118>)
 8004900:	4a39      	ldr	r2, [pc, #228]	; (80049e8 <MX_TIM1_Init+0x11c>)
 8004902:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 8004904:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <MX_TIM1_Init+0x118>)
 8004906:	22c7      	movs	r2, #199	; 0xc7
 8004908:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490a:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <MX_TIM1_Init+0x118>)
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <MX_TIM1_Init+0x118>)
 8004912:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004916:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004918:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <MX_TIM1_Init+0x118>)
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800491e:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <MX_TIM1_Init+0x118>)
 8004920:	2200      	movs	r2, #0
 8004922:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004924:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <MX_TIM1_Init+0x118>)
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800492a:	482e      	ldr	r0, [pc, #184]	; (80049e4 <MX_TIM1_Init+0x118>)
 800492c:	f004 f970 	bl	8008c10 <HAL_TIM_PWM_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004936:	f7ff fa97 	bl	8003e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004942:	2300      	movs	r3, #0
 8004944:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004946:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800494a:	4619      	mov	r1, r3
 800494c:	4825      	ldr	r0, [pc, #148]	; (80049e4 <MX_TIM1_Init+0x118>)
 800494e:	f005 f8ab 	bl	8009aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004958:	f7ff fa86 	bl	8003e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800495c:	2360      	movs	r3, #96	; 0x60
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004964:	2300      	movs	r3, #0
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004968:	2300      	movs	r3, #0
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800496c:	2300      	movs	r3, #0
 800496e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004970:	2300      	movs	r3, #0
 8004972:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004974:	2300      	movs	r3, #0
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004978:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800497c:	2200      	movs	r2, #0
 800497e:	4619      	mov	r1, r3
 8004980:	4818      	ldr	r0, [pc, #96]	; (80049e4 <MX_TIM1_Init+0x118>)
 8004982:	f004 fbb3 	bl	80090ec <HAL_TIM_PWM_ConfigChannel>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800498c:	f7ff fa6c 	bl	8003e68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004990:	2300      	movs	r3, #0
 8004992:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80049b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049bc:	2300      	movs	r3, #0
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80049c0:	1d3b      	adds	r3, r7, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4807      	ldr	r0, [pc, #28]	; (80049e4 <MX_TIM1_Init+0x118>)
 80049c6:	f005 f8fd 	bl	8009bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80049d0:	f7ff fa4a 	bl	8003e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80049d4:	4803      	ldr	r0, [pc, #12]	; (80049e4 <MX_TIM1_Init+0x118>)
 80049d6:	f000 f889 	bl	8004aec <HAL_TIM_MspPostInit>

}
 80049da:	bf00      	nop
 80049dc:	3758      	adds	r7, #88	; 0x58
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	240023a8 	.word	0x240023a8
 80049e8:	40010000 	.word	0x40010000

080049ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049f2:	1d3b      	adds	r3, r7, #4
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <MX_TIM6_Init+0x64>)
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <MX_TIM6_Init+0x68>)
 8004a00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <MX_TIM6_Init+0x64>)
 8004a04:	2250      	movs	r2, #80	; 0x50
 8004a06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <MX_TIM6_Init+0x64>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1919;
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <MX_TIM6_Init+0x64>)
 8004a10:	f240 727f 	movw	r2, #1919	; 0x77f
 8004a14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <MX_TIM6_Init+0x64>)
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a1c:	480c      	ldr	r0, [pc, #48]	; (8004a50 <MX_TIM6_Init+0x64>)
 8004a1e:	f004 f828 	bl	8008a72 <HAL_TIM_Base_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004a28:	f7ff fa1e 	bl	8003e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	4619      	mov	r1, r3
 8004a38:	4805      	ldr	r0, [pc, #20]	; (8004a50 <MX_TIM6_Init+0x64>)
 8004a3a:	f005 f835 	bl	8009aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004a44:	f7ff fa10 	bl	8003e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	240023f4 	.word	0x240023f4
 8004a54:	40001000 	.word	0x40001000

08004a58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_TIM_PWM_MspInit+0x40>)
 8004a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a70:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <HAL_TIM_PWM_MspInit+0x40>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <HAL_TIM_PWM_MspInit+0x40>)
 8004a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40010000 	.word	0x40010000
 8004a98:	58024400 	.word	0x58024400

08004a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <HAL_TIM_Base_MspInit+0x48>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d116      	bne.n	8004adc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <HAL_TIM_Base_MspInit+0x4c>)
 8004ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <HAL_TIM_Base_MspInit+0x4c>)
 8004ab6:	f043 0310 	orr.w	r3, r3, #16
 8004aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_TIM_Base_MspInit+0x4c>)
 8004ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8004acc:	2200      	movs	r2, #0
 8004ace:	2104      	movs	r1, #4
 8004ad0:	2036      	movs	r0, #54	; 0x36
 8004ad2:	f000 fb4e 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ad6:	2036      	movs	r0, #54	; 0x36
 8004ad8:	f000 fb65 	bl	80051a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40001000 	.word	0x40001000
 8004ae8:	58024400 	.word	0x58024400

08004aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af4:	f107 030c 	add.w	r3, r7, #12
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <HAL_TIM_MspPostInit+0x6c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d11f      	bne.n	8004b4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_TIM_MspPostInit+0x70>)
 8004b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b14:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <HAL_TIM_MspPostInit+0x70>)
 8004b16:	f043 0310 	orr.w	r3, r3, #16
 8004b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <HAL_TIM_MspPostInit+0x70>)
 8004b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b42:	f107 030c 	add.w	r3, r7, #12
 8004b46:	4619      	mov	r1, r3
 8004b48:	4805      	ldr	r0, [pc, #20]	; (8004b60 <HAL_TIM_MspPostInit+0x74>)
 8004b4a:	f000 fb47 	bl	80051dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b4e:	bf00      	nop
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	58021000 	.word	0x58021000

08004b64 <remap>:


extern SPI_HandleTypeDef hspi2;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	ed87 0a05 	vstr	s0, [r7, #20]
 8004b6e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004b72:	ed87 1a03 	vstr	s2, [r7, #12]
 8004b76:	edc7 1a02 	vstr	s3, [r7, #8]
 8004b7a:	ed87 2a01 	vstr	s4, [r7, #4]

	return ((x - in_min)  / (in_max - in_min))* (out_max - out_min) + out_min;
 8004b7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004b8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	edd7 6a01 	vldr	s13, [r7, #4]
 8004b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ba2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af02      	add	r7, sp, #8
	uint8_t data;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bcc:	4814      	ldr	r0, [pc, #80]	; (8004c20 <XPT2046_Init+0x60>)
 8004bce:	f000 fcb5 	bl	800553c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f000 f9c2 	bl	8004f5c <HAL_Delay>
//	for (int i =0; i<1000;i+=1)
//	{
//		asm("nop");
//	}
	HAL_SPI_Transmit(&hspi2, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8004bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2183      	movs	r1, #131	; 0x83
 8004be0:	4810      	ldr	r0, [pc, #64]	; (8004c24 <XPT2046_Init+0x64>)
 8004be2:	f003 f935 	bl	8007e50 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)XPT2046_ADDR_I, &data, sizeof(data), 1000);
 8004be6:	1dfa      	adds	r2, r7, #7
 8004be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	2301      	movs	r3, #1
 8004bf0:	2183      	movs	r1, #131	; 0x83
 8004bf2:	480c      	ldr	r0, [pc, #48]	; (8004c24 <XPT2046_Init+0x64>)
 8004bf4:	f003 fb1a 	bl	800822c <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)XPT2046_ADDR_I, &data, sizeof(data), 1000);
 8004bf8:	1dfa      	adds	r2, r7, #7
 8004bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2301      	movs	r3, #1
 8004c02:	2183      	movs	r1, #131	; 0x83
 8004c04:	4807      	ldr	r0, [pc, #28]	; (8004c24 <XPT2046_Init+0x64>)
 8004c06:	f003 fb11 	bl	800822c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c10:	4803      	ldr	r0, [pc, #12]	; (8004c20 <XPT2046_Init+0x60>)
 8004c12:	f000 fc93 	bl	800553c <HAL_GPIO_WritePin>

}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	58020400 	.word	0x58020400
 8004c24:	24002318 	.word	0x24002318

08004c28 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004c32:	2200      	movs	r2, #0
 8004c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c38:	481a      	ldr	r0, [pc, #104]	; (8004ca4 <getRaw+0x7c>)
 8004c3a:	f000 fc7f 	bl	800553c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
//			for (int i =0; i<1000;i+=1)
//			{
//				asm("nop");
//			}
	HAL_SPI_Transmit(&hspi2, &address, 1, 1000);
 8004c3e:	1df9      	adds	r1, r7, #7
 8004c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c44:	2201      	movs	r2, #1
 8004c46:	4818      	ldr	r0, [pc, #96]	; (8004ca8 <getRaw+0x80>)
 8004c48:	f003 f902 	bl	8007e50 <HAL_SPI_Transmit>
	address = 0x00;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &address, &data, sizeof(data), 1000);
 8004c50:	f107 020b 	add.w	r2, r7, #11
 8004c54:	1df9      	adds	r1, r7, #7
 8004c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4812      	ldr	r0, [pc, #72]	; (8004ca8 <getRaw+0x80>)
 8004c60:	f003 fae4 	bl	800822c <HAL_SPI_TransmitReceive>
	MSB = data;
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &address, &data, sizeof(data), 1000);
 8004c6c:	f107 020b 	add.w	r2, r7, #11
 8004c70:	1df9      	adds	r1, r7, #7
 8004c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	480b      	ldr	r0, [pc, #44]	; (8004ca8 <getRaw+0x80>)
 8004c7c:	f003 fad6 	bl	800822c <HAL_SPI_TransmitReceive>
	LSB = data;
 8004c80:	7afb      	ldrb	r3, [r7, #11]
 8004c82:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004c84:	2201      	movs	r2, #1
 8004c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c8a:	4806      	ldr	r0, [pc, #24]	; (8004ca4 <getRaw+0x7c>)
 8004c8c:	f000 fc56 	bl	800553c <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	021a      	lsls	r2, r3, #8
 8004c94:	89bb      	ldrh	r3, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	10db      	asrs	r3, r3, #3
 8004c9a:	b29b      	uxth	r3, r3


}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58020400 	.word	0x58020400
 8004ca8:	24002318 	.word	0x24002318

08004cac <X>:

inline static uint16_t X(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8004cb2:	20d3      	movs	r0, #211	; 0xd3
 8004cb4:	f7ff ffb8 	bl	8004c28 <getRaw>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004d04 <X+0x58>
 8004cc6:	eddf 1a10 	vldr	s3, [pc, #64]	; 8004d08 <X+0x5c>
 8004cca:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8004d0c <X+0x60>
 8004cce:	eddf 0a10 	vldr	s1, [pc, #64]	; 8004d10 <X+0x64>
 8004cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd6:	f7ff ff45 	bl	8004b64 <remap>
 8004cda:	eef0 7a40 	vmov.f32	s15, s0
 8004cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce2:	ee17 3a90 	vmov	r3, s15
 8004ce6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <X+0x4e>
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004cf4:	d201      	bcs.n	8004cfa <X+0x4e>
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	e000      	b.n	8004cfc <X+0x50>
	else return 0;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	44480000 	.word	0x44480000
 8004d08:	00000000 	.word	0x00000000
 8004d0c:	45fc0000 	.word	0x45fc0000
 8004d10:	45866000 	.word	0x45866000

08004d14 <Y>:

inline static uint16_t Y(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8004d1a:	2093      	movs	r0, #147	; 0x93
 8004d1c:	f7ff ff84 	bl	8004c28 <getRaw>
 8004d20:	4603      	mov	r3, r0
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004d6c <Y+0x58>
 8004d2e:	eddf 1a10 	vldr	s3, [pc, #64]	; 8004d70 <Y+0x5c>
 8004d32:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8004d74 <Y+0x60>
 8004d36:	eddf 0a10 	vldr	s1, [pc, #64]	; 8004d78 <Y+0x64>
 8004d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3e:	f7ff ff11 	bl	8004b64 <remap>
 8004d42:	eef0 7a40 	vmov.f32	s15, s0
 8004d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4a:	ee17 3a90 	vmov	r3, s15
 8004d4e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <Y+0x4e>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004d5c:	d201      	bcs.n	8004d62 <Y+0x4e>
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	e000      	b.n	8004d64 <Y+0x50>
	else return 0;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	43f00000 	.word	0x43f00000
 8004d70:	00000000 	.word	0x00000000
 8004d74:	45f6e000 	.word	0x45f6e000
 8004d78:	458ca000 	.word	0x458ca000

08004d7c <getX>:

uint16_t getX(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <getX+0x30>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8004d88:	e007      	b.n	8004d9a <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8004d8a:	f7ff ff8f 	bl	8004cac <X>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	80bb      	strh	r3, [r7, #4]
 8004d92:	f7ff ff8b 	bl	8004cac <X>
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8004d9a:	88ba      	ldrh	r2, [r7, #4]
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d1f3      	bne.n	8004d8a <getX+0xe>
		}
		return x[0];
 8004da2:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	0800e690 	.word	0x0800e690

08004db0 <getY>:

uint16_t getY(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8004db6:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <getY+0x30>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8004dbc:	e007      	b.n	8004dce <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8004dbe:	f7ff ffa9 	bl	8004d14 <Y>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	80bb      	strh	r3, [r7, #4]
 8004dc6:	f7ff ffa5 	bl	8004d14 <Y>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8004dce:	88ba      	ldrh	r2, [r7, #4]
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d1f3      	bne.n	8004dbe <getY+0xe>
		}
		return y[0];
 8004dd6:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();

}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	0800e690 	.word	0x0800e690

08004de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004de8:	f7ff fce8 	bl	80047bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004dec:	480c      	ldr	r0, [pc, #48]	; (8004e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004dee:	490d      	ldr	r1, [pc, #52]	; (8004e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004df0:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004df4:	e002      	b.n	8004dfc <LoopCopyDataInit>

08004df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dfa:	3304      	adds	r3, #4

08004dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e00:	d3f9      	bcc.n	8004df6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e04:	4c0a      	ldr	r4, [pc, #40]	; (8004e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e08:	e001      	b.n	8004e0e <LoopFillZerobss>

08004e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e0c:	3204      	adds	r2, #4

08004e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e10:	d3fb      	bcc.n	8004e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e12:	f008 fbf7 	bl	800d604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e16:	f7fe fcb3 	bl	8003780 <main>
  bx  lr
 8004e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004e20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004e24:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8004e28:	080130ec 	.word	0x080130ec
  ldr r2, =_sbss
 8004e2c:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8004e30:	240027cc 	.word	0x240027cc

08004e34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e34:	e7fe      	b.n	8004e34 <ADC3_IRQHandler>
	...

08004e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e3e:	2003      	movs	r0, #3
 8004e40:	f000 f98c 	bl	800515c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e44:	f001 f9f8 	bl	8006238 <HAL_RCC_GetSysClockFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_Init+0x68>)
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	4913      	ldr	r1, [pc, #76]	; (8004ea4 <HAL_Init+0x6c>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_Init+0x68>)
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <HAL_Init+0x6c>)
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <HAL_Init+0x70>)
 8004e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e7c:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <HAL_Init+0x74>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e82:	2005      	movs	r0, #5
 8004e84:	f000 f814 	bl	8004eb0 <HAL_InitTick>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e002      	b.n	8004e98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004e92:	f7ff fb2b 	bl	80044ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	0800f0cc 	.word	0x0800f0cc
 8004ea8:	24000010 	.word	0x24000010
 8004eac:	2400000c 	.word	0x2400000c

08004eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <HAL_InitTick+0x60>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e021      	b.n	8004f08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_InitTick+0x64>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <HAL_InitTick+0x60>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f971 	bl	80051c2 <HAL_SYSTICK_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e00e      	b.n	8004f08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b0f      	cmp	r3, #15
 8004eee:	d80a      	bhi.n	8004f06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	f000 f93b 	bl	8005172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <HAL_InitTick+0x68>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	24000018 	.word	0x24000018
 8004f14:	2400000c 	.word	0x2400000c
 8004f18:	24000014 	.word	0x24000014

08004f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_IncTick+0x20>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_IncTick+0x24>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <HAL_IncTick+0x24>)
 8004f2e:	6013      	str	r3, [r2, #0]
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	24000018 	.word	0x24000018
 8004f40:	24002440 	.word	0x24002440

08004f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return uwTick;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_GetTick+0x14>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	24002440 	.word	0x24002440

08004f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7ff ffee 	bl	8004f44 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d005      	beq.n	8004f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_Delay+0x44>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f82:	bf00      	nop
 8004f84:	f7ff ffde 	bl	8004f44 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d8f7      	bhi.n	8004f84 <HAL_Delay+0x28>
  {
  }
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	24000018 	.word	0x24000018

08004fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <HAL_GetREVID+0x14>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0c1b      	lsrs	r3, r3, #16
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	5c001000 	.word	0x5c001000

08004fbc <__NVIC_SetPriorityGrouping>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <__NVIC_SetPriorityGrouping+0x40>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fe4:	4b06      	ldr	r3, [pc, #24]	; (8005000 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fea:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <__NVIC_SetPriorityGrouping+0x40>)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	60d3      	str	r3, [r2, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	e000ed00 	.word	0xe000ed00
 8005000:	05fa0000 	.word	0x05fa0000

08005004 <__NVIC_GetPriorityGrouping>:
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <__NVIC_GetPriorityGrouping+0x18>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	0a1b      	lsrs	r3, r3, #8
 800500e:	f003 0307 	and.w	r3, r3, #7
}
 8005012:	4618      	mov	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <__NVIC_EnableIRQ>:
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800502a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800502e:	2b00      	cmp	r3, #0
 8005030:	db0b      	blt.n	800504a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	f003 021f 	and.w	r2, r3, #31
 8005038:	4907      	ldr	r1, [pc, #28]	; (8005058 <__NVIC_EnableIRQ+0x38>)
 800503a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2001      	movs	r0, #1
 8005042:	fa00 f202 	lsl.w	r2, r0, r2
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000e100 	.word	0xe000e100

0800505c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800506c:	2b00      	cmp	r3, #0
 800506e:	db0a      	blt.n	8005086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	490c      	ldr	r1, [pc, #48]	; (80050a8 <__NVIC_SetPriority+0x4c>)
 8005076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800507a:	0112      	lsls	r2, r2, #4
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	440b      	add	r3, r1
 8005080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005084:	e00a      	b.n	800509c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4908      	ldr	r1, [pc, #32]	; (80050ac <__NVIC_SetPriority+0x50>)
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	3b04      	subs	r3, #4
 8005094:	0112      	lsls	r2, r2, #4
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	440b      	add	r3, r1
 800509a:	761a      	strb	r2, [r3, #24]
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000e100 	.word	0xe000e100
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f1c3 0307 	rsb	r3, r3, #7
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	bf28      	it	cs
 80050ce:	2304      	movcs	r3, #4
 80050d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3304      	adds	r3, #4
 80050d6:	2b06      	cmp	r3, #6
 80050d8:	d902      	bls.n	80050e0 <NVIC_EncodePriority+0x30>
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	3b03      	subs	r3, #3
 80050de:	e000      	b.n	80050e2 <NVIC_EncodePriority+0x32>
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	401a      	ands	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050f8:	f04f 31ff 	mov.w	r1, #4294967295
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	43d9      	mvns	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005108:	4313      	orrs	r3, r2
         );
}
 800510a:	4618      	mov	r0, r3
 800510c:	3724      	adds	r7, #36	; 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005128:	d301      	bcc.n	800512e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800512a:	2301      	movs	r3, #1
 800512c:	e00f      	b.n	800514e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800512e:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <SysTick_Config+0x40>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005136:	210f      	movs	r1, #15
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	f7ff ff8e 	bl	800505c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <SysTick_Config+0x40>)
 8005142:	2200      	movs	r2, #0
 8005144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005146:	4b04      	ldr	r3, [pc, #16]	; (8005158 <SysTick_Config+0x40>)
 8005148:	2207      	movs	r2, #7
 800514a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	e000e010 	.word	0xe000e010

0800515c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ff29 	bl	8004fbc <__NVIC_SetPriorityGrouping>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	4603      	mov	r3, r0
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005180:	f7ff ff40 	bl	8005004 <__NVIC_GetPriorityGrouping>
 8005184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff ff90 	bl	80050b0 <NVIC_EncodePriority>
 8005190:	4602      	mov	r2, r0
 8005192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff5f 	bl	800505c <__NVIC_SetPriority>
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	4603      	mov	r3, r0
 80051ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff33 	bl	8005020 <__NVIC_EnableIRQ>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ffa4 	bl	8005118 <SysTick_Config>
 80051d0:	4603      	mov	r3, r0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051ea:	4b89      	ldr	r3, [pc, #548]	; (8005410 <HAL_GPIO_Init+0x234>)
 80051ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ee:	e194      	b.n	800551a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2101      	movs	r1, #1
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	4013      	ands	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8186 	beq.w	8005514 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d005      	beq.n	8005220 <HAL_GPIO_Init+0x44>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d130      	bne.n	8005282 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	2203      	movs	r2, #3
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005256:	2201      	movs	r2, #1
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f003 0201 	and.w	r2, r3, #1
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d017      	beq.n	80052be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	2203      	movs	r2, #3
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d123      	bne.n	8005312 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	08da      	lsrs	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3208      	adds	r2, #8
 80052d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	220f      	movs	r2, #15
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	08da      	lsrs	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3208      	adds	r2, #8
 800530c:	69b9      	ldr	r1, [r7, #24]
 800530e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	2203      	movs	r2, #3
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0203 	and.w	r2, r3, #3
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80e0 	beq.w	8005514 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005354:	4b2f      	ldr	r3, [pc, #188]	; (8005414 <HAL_GPIO_Init+0x238>)
 8005356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800535a:	4a2e      	ldr	r2, [pc, #184]	; (8005414 <HAL_GPIO_Init+0x238>)
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005364:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <HAL_GPIO_Init+0x238>)
 8005366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005372:	4a29      	ldr	r2, [pc, #164]	; (8005418 <HAL_GPIO_Init+0x23c>)
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	3302      	adds	r3, #2
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <HAL_GPIO_Init+0x240>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d052      	beq.n	8005444 <HAL_GPIO_Init+0x268>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_GPIO_Init+0x244>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <HAL_GPIO_Init+0x22e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_GPIO_Init+0x248>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d02b      	beq.n	8005406 <HAL_GPIO_Init+0x22a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_GPIO_Init+0x24c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d025      	beq.n	8005402 <HAL_GPIO_Init+0x226>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <HAL_GPIO_Init+0x250>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01f      	beq.n	80053fe <HAL_GPIO_Init+0x222>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_GPIO_Init+0x254>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d019      	beq.n	80053fa <HAL_GPIO_Init+0x21e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <HAL_GPIO_Init+0x258>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_GPIO_Init+0x21a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <HAL_GPIO_Init+0x25c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00d      	beq.n	80053f2 <HAL_GPIO_Init+0x216>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_GPIO_Init+0x260>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <HAL_GPIO_Init+0x212>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a17      	ldr	r2, [pc, #92]	; (8005440 <HAL_GPIO_Init+0x264>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_GPIO_Init+0x20e>
 80053e6:	2309      	movs	r3, #9
 80053e8:	e02d      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053ea:	230a      	movs	r3, #10
 80053ec:	e02b      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053ee:	2308      	movs	r3, #8
 80053f0:	e029      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053f2:	2307      	movs	r3, #7
 80053f4:	e027      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053f6:	2306      	movs	r3, #6
 80053f8:	e025      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053fa:	2305      	movs	r3, #5
 80053fc:	e023      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053fe:	2304      	movs	r3, #4
 8005400:	e021      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 8005402:	2303      	movs	r3, #3
 8005404:	e01f      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 8005406:	2302      	movs	r3, #2
 8005408:	e01d      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 800540a:	2301      	movs	r3, #1
 800540c:	e01b      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 800540e:	bf00      	nop
 8005410:	58000080 	.word	0x58000080
 8005414:	58024400 	.word	0x58024400
 8005418:	58000400 	.word	0x58000400
 800541c:	58020000 	.word	0x58020000
 8005420:	58020400 	.word	0x58020400
 8005424:	58020800 	.word	0x58020800
 8005428:	58020c00 	.word	0x58020c00
 800542c:	58021000 	.word	0x58021000
 8005430:	58021400 	.word	0x58021400
 8005434:	58021800 	.word	0x58021800
 8005438:	58021c00 	.word	0x58021c00
 800543c:	58022000 	.word	0x58022000
 8005440:	58022400 	.word	0x58022400
 8005444:	2300      	movs	r3, #0
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	f002 0203 	and.w	r2, r2, #3
 800544c:	0092      	lsls	r2, r2, #2
 800544e:	4093      	lsls	r3, r2
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005456:	4938      	ldr	r1, [pc, #224]	; (8005538 <HAL_GPIO_Init+0x35c>)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	3302      	adds	r3, #2
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800548a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80054b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	3301      	adds	r3, #1
 8005518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	f47f ae63 	bne.w	80051f0 <HAL_GPIO_Init+0x14>
  }
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	3724      	adds	r7, #36	; 0x24
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	58000400 	.word	0x58000400

0800553c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
 8005548:	4613      	mov	r3, r2
 800554a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800554c:	787b      	ldrb	r3, [r7, #1]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005552:	887a      	ldrh	r2, [r7, #2]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005558:	e003      	b.n	8005562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800555a:	887b      	ldrh	r3, [r7, #2]
 800555c:	041a      	lsls	r2, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe fb1f 	bl	8003bd8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d00a      	beq.n	80055ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d001      	beq.n	80055ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e01f      	b.n	800560a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e01d      	b.n	800560a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055ce:	4b11      	ldr	r3, [pc, #68]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 0207 	bic.w	r2, r3, #7
 80055d6:	490f      	ldr	r1, [pc, #60]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055de:	f7ff fcb1 	bl	8004f44 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055e4:	e009      	b.n	80055fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80055e6:	f7ff fcad 	bl	8004f44 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f4:	d901      	bls.n	80055fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e007      	b.n	800560a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_PWREx_ConfigSupply+0x70>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	d1ee      	bne.n	80055e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	58024800 	.word	0x58024800

08005618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08c      	sub	sp, #48	; 0x30
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f000 bc48 	b.w	8005ebc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8088 	beq.w	800574a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800563a:	4b99      	ldr	r3, [pc, #612]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005644:	4b96      	ldr	r3, [pc, #600]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	2b10      	cmp	r3, #16
 800564e:	d007      	beq.n	8005660 <HAL_RCC_OscConfig+0x48>
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b18      	cmp	r3, #24
 8005654:	d111      	bne.n	800567a <HAL_RCC_OscConfig+0x62>
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d10c      	bne.n	800567a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005660:	4b8f      	ldr	r3, [pc, #572]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d06d      	beq.n	8005748 <HAL_RCC_OscConfig+0x130>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d169      	bne.n	8005748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	f000 bc21 	b.w	8005ebc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005682:	d106      	bne.n	8005692 <HAL_RCC_OscConfig+0x7a>
 8005684:	4b86      	ldr	r3, [pc, #536]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a85      	ldr	r2, [pc, #532]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800568a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e02e      	b.n	80056f0 <HAL_RCC_OscConfig+0xd8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x9c>
 800569a:	4b81      	ldr	r3, [pc, #516]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a80      	ldr	r2, [pc, #512]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b7e      	ldr	r3, [pc, #504]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a7d      	ldr	r2, [pc, #500]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e01d      	b.n	80056f0 <HAL_RCC_OscConfig+0xd8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0xc0>
 80056be:	4b78      	ldr	r3, [pc, #480]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a77      	ldr	r2, [pc, #476]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b75      	ldr	r3, [pc, #468]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a74      	ldr	r2, [pc, #464]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0xd8>
 80056d8:	4b71      	ldr	r3, [pc, #452]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a70      	ldr	r2, [pc, #448]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b6e      	ldr	r3, [pc, #440]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6d      	ldr	r2, [pc, #436]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80056ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d013      	beq.n	8005720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7ff fc24 	bl	8004f44 <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005700:	f7ff fc20 	bl	8004f44 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e3d4      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005712:	4b63      	ldr	r3, [pc, #396]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0xe8>
 800571e:	e014      	b.n	800574a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7ff fc10 	bl	8004f44 <HAL_GetTick>
 8005724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005728:	f7ff fc0c 	bl	8004f44 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e3c0      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800573a:	4b59      	ldr	r3, [pc, #356]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x110>
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80ca 	beq.w	80058ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005758:	4b51      	ldr	r3, [pc, #324]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005760:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005762:	4b4f      	ldr	r3, [pc, #316]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <HAL_RCC_OscConfig+0x166>
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	2b18      	cmp	r3, #24
 8005772:	d156      	bne.n	8005822 <HAL_RCC_OscConfig+0x20a>
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d151      	bne.n	8005822 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800577e:	4b48      	ldr	r3, [pc, #288]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_RCC_OscConfig+0x17e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e392      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005796:	4b42      	ldr	r3, [pc, #264]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f023 0219 	bic.w	r2, r3, #25
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	493f      	ldr	r1, [pc, #252]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7ff fbcc 	bl	8004f44 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b0:	f7ff fbc8 	bl	8004f44 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e37c      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ce:	f7ff fbe9 	bl	8004fa4 <HAL_GetREVID>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80057d8:	4293      	cmp	r3, r2
 80057da:	d817      	bhi.n	800580c <HAL_RCC_OscConfig+0x1f4>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d108      	bne.n	80057f6 <HAL_RCC_OscConfig+0x1de>
 80057e4:	4b2e      	ldr	r3, [pc, #184]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057ec:	4a2c      	ldr	r2, [pc, #176]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f4:	e07a      	b.n	80058ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f6:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	031b      	lsls	r3, r3, #12
 8005804:	4926      	ldr	r1, [pc, #152]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005806:	4313      	orrs	r3, r2
 8005808:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800580a:	e06f      	b.n	80058ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580c:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	4921      	ldr	r1, [pc, #132]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800581c:	4313      	orrs	r3, r2
 800581e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005820:	e064      	b.n	80058ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d047      	beq.n	80058ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 0219 	bic.w	r2, r3, #25
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	491a      	ldr	r1, [pc, #104]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7ff fb82 	bl	8004f44 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005844:	f7ff fb7e 	bl	8004f44 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e332      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	f7ff fb9f 	bl	8004fa4 <HAL_GetREVID>
 8005866:	4603      	mov	r3, r0
 8005868:	f241 0203 	movw	r2, #4099	; 0x1003
 800586c:	4293      	cmp	r3, r2
 800586e:	d819      	bhi.n	80058a4 <HAL_RCC_OscConfig+0x28c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d108      	bne.n	800588a <HAL_RCC_OscConfig+0x272>
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005880:	4a07      	ldr	r2, [pc, #28]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 8005882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005886:	6053      	str	r3, [r2, #4]
 8005888:	e030      	b.n	80058ec <HAL_RCC_OscConfig+0x2d4>
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	031b      	lsls	r3, r3, #12
 8005898:	4901      	ldr	r1, [pc, #4]	; (80058a0 <HAL_RCC_OscConfig+0x288>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
 800589e:	e025      	b.n	80058ec <HAL_RCC_OscConfig+0x2d4>
 80058a0:	58024400 	.word	0x58024400
 80058a4:	4b9a      	ldr	r3, [pc, #616]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	4997      	ldr	r1, [pc, #604]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]
 80058b8:	e018      	b.n	80058ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ba:	4b95      	ldr	r3, [pc, #596]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a94      	ldr	r2, [pc, #592]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80058c0:	f023 0301 	bic.w	r3, r3, #1
 80058c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7ff fb3d 	bl	8004f44 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ce:	f7ff fb39 	bl	8004f44 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e2ed      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058e0:	4b8b      	ldr	r3, [pc, #556]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80a9 	beq.w	8005a4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058fa:	4b85      	ldr	r3, [pc, #532]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005902:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005904:	4b82      	ldr	r3, [pc, #520]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d007      	beq.n	8005920 <HAL_RCC_OscConfig+0x308>
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b18      	cmp	r3, #24
 8005914:	d13a      	bne.n	800598c <HAL_RCC_OscConfig+0x374>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d135      	bne.n	800598c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005920:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_OscConfig+0x320>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d001      	beq.n	8005938 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e2c1      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005938:	f7ff fb34 	bl	8004fa4 <HAL_GetREVID>
 800593c:	4603      	mov	r3, r0
 800593e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005942:	4293      	cmp	r3, r2
 8005944:	d817      	bhi.n	8005976 <HAL_RCC_OscConfig+0x35e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	2b20      	cmp	r3, #32
 800594c:	d108      	bne.n	8005960 <HAL_RCC_OscConfig+0x348>
 800594e:	4b70      	ldr	r3, [pc, #448]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005956:	4a6e      	ldr	r2, [pc, #440]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800595c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800595e:	e075      	b.n	8005a4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005960:	4b6b      	ldr	r3, [pc, #428]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	069b      	lsls	r3, r3, #26
 800596e:	4968      	ldr	r1, [pc, #416]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005974:	e06a      	b.n	8005a4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005976:	4b66      	ldr	r3, [pc, #408]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	061b      	lsls	r3, r3, #24
 8005984:	4962      	ldr	r1, [pc, #392]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005986:	4313      	orrs	r3, r2
 8005988:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800598a:	e05f      	b.n	8005a4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d042      	beq.n	8005a1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005994:	4b5e      	ldr	r3, [pc, #376]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5d      	ldr	r2, [pc, #372]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7ff fad0 	bl	8004f44 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059a8:	f7ff facc 	bl	8004f44 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e280      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059ba:	4b55      	ldr	r3, [pc, #340]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059c6:	f7ff faed 	bl	8004fa4 <HAL_GetREVID>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d817      	bhi.n	8005a04 <HAL_RCC_OscConfig+0x3ec>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d108      	bne.n	80059ee <HAL_RCC_OscConfig+0x3d6>
 80059dc:	4b4c      	ldr	r3, [pc, #304]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80059e4:	4a4a      	ldr	r2, [pc, #296]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80059e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ea:	6053      	str	r3, [r2, #4]
 80059ec:	e02e      	b.n	8005a4c <HAL_RCC_OscConfig+0x434>
 80059ee:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	069b      	lsls	r3, r3, #26
 80059fc:	4944      	ldr	r1, [pc, #272]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
 8005a02:	e023      	b.n	8005a4c <HAL_RCC_OscConfig+0x434>
 8005a04:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	061b      	lsls	r3, r3, #24
 8005a12:	493f      	ldr	r1, [pc, #252]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60cb      	str	r3, [r1, #12]
 8005a18:	e018      	b.n	8005a4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a3c      	ldr	r2, [pc, #240]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7ff fa8d 	bl	8004f44 <HAL_GetTick>
 8005a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a2e:	f7ff fa89 	bl	8004f44 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e23d      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a40:	4b33      	ldr	r3, [pc, #204]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d036      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d019      	beq.n	8005a94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a60:	4b2b      	ldr	r3, [pc, #172]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7ff fa6a 	bl	8004f44 <HAL_GetTick>
 8005a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a74:	f7ff fa66 	bl	8004f44 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e21a      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a86:	4b22      	ldr	r3, [pc, #136]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x45c>
 8005a92:	e018      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a94:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a98:	4a1d      	ldr	r2, [pc, #116]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7ff fa50 	bl	8004f44 <HAL_GetTick>
 8005aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7ff fa4c 	bl	8004f44 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e200      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d039      	beq.n	8005b46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01c      	beq.n	8005b14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0c      	ldr	r2, [pc, #48]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ae4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ae6:	f7ff fa2d 	bl	8004f44 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aee:	f7ff fa29 	bl	8004f44 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e1dd      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <HAL_RCC_OscConfig+0x4f8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x4d6>
 8005b0c:	e01b      	b.n	8005b46 <HAL_RCC_OscConfig+0x52e>
 8005b0e:	bf00      	nop
 8005b10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b14:	4b9b      	ldr	r3, [pc, #620]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a9a      	ldr	r2, [pc, #616]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b20:	f7ff fa10 	bl	8004f44 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b28:	f7ff fa0c 	bl	8004f44 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e1c0      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b3a:	4b92      	ldr	r3, [pc, #584]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8081 	beq.w	8005c56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b54:	4b8c      	ldr	r3, [pc, #560]	; (8005d88 <HAL_RCC_OscConfig+0x770>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a8b      	ldr	r2, [pc, #556]	; (8005d88 <HAL_RCC_OscConfig+0x770>)
 8005b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b60:	f7ff f9f0 	bl	8004f44 <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b68:	f7ff f9ec 	bl	8004f44 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	; 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e1a0      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b7a:	4b83      	ldr	r3, [pc, #524]	; (8005d88 <HAL_RCC_OscConfig+0x770>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCC_OscConfig+0x584>
 8005b8e:	4b7d      	ldr	r3, [pc, #500]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	4a7c      	ldr	r2, [pc, #496]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9a:	e02d      	b.n	8005bf8 <HAL_RCC_OscConfig+0x5e0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCC_OscConfig+0x5a6>
 8005ba4:	4b77      	ldr	r3, [pc, #476]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a76      	ldr	r2, [pc, #472]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	4b74      	ldr	r3, [pc, #464]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	4a73      	ldr	r2, [pc, #460]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bb6:	f023 0304 	bic.w	r3, r3, #4
 8005bba:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbc:	e01c      	b.n	8005bf8 <HAL_RCC_OscConfig+0x5e0>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d10c      	bne.n	8005be0 <HAL_RCC_OscConfig+0x5c8>
 8005bc6:	4b6f      	ldr	r3, [pc, #444]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a6e      	ldr	r2, [pc, #440]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bcc:	f043 0304 	orr.w	r3, r3, #4
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd2:	4b6c      	ldr	r3, [pc, #432]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a6b      	ldr	r2, [pc, #428]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bde:	e00b      	b.n	8005bf8 <HAL_RCC_OscConfig+0x5e0>
 8005be0:	4b68      	ldr	r3, [pc, #416]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a67      	ldr	r2, [pc, #412]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
 8005bec:	4b65      	ldr	r3, [pc, #404]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	4a64      	ldr	r2, [pc, #400]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005bf2:	f023 0304 	bic.w	r3, r3, #4
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d015      	beq.n	8005c2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c00:	f7ff f9a0 	bl	8004f44 <HAL_GetTick>
 8005c04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c08:	f7ff f99c 	bl	8004f44 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e14e      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c1e:	4b59      	ldr	r3, [pc, #356]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0ee      	beq.n	8005c08 <HAL_RCC_OscConfig+0x5f0>
 8005c2a:	e014      	b.n	8005c56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2c:	f7ff f98a 	bl	8004f44 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c32:	e00a      	b.n	8005c4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7ff f986 	bl	8004f44 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e138      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c4a:	4b4e      	ldr	r3, [pc, #312]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1ee      	bne.n	8005c34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 812d 	beq.w	8005eba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c60:	4b48      	ldr	r3, [pc, #288]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c68:	2b18      	cmp	r3, #24
 8005c6a:	f000 80bd 	beq.w	8005de8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	f040 809e 	bne.w	8005db4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c78:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a41      	ldr	r2, [pc, #260]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7ff f95e 	bl	8004f44 <HAL_GetTick>
 8005c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8c:	f7ff f95a 	bl	8004f44 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e10e      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c9e:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005caa:	4b36      	ldr	r3, [pc, #216]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cae:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <HAL_RCC_OscConfig+0x774>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cba:	0112      	lsls	r2, r2, #4
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	4931      	ldr	r1, [pc, #196]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	628b      	str	r3, [r1, #40]	; 0x28
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	025b      	lsls	r3, r3, #9
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cec:	3b01      	subs	r3, #1
 8005cee:	061b      	lsls	r3, r3, #24
 8005cf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cf4:	4923      	ldr	r1, [pc, #140]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005cfa:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a21      	ldr	r2, [pc, #132]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d06:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0a:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <HAL_RCC_OscConfig+0x778>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d12:	00d2      	lsls	r2, r2, #3
 8005d14:	491b      	ldr	r1, [pc, #108]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	f023 020c 	bic.w	r2, r3, #12
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	4917      	ldr	r1, [pc, #92]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	f023 0202 	bic.w	r2, r3, #2
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	4912      	ldr	r1, [pc, #72]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d3e:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	4a10      	ldr	r2, [pc, #64]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d4a:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	4a07      	ldr	r2, [pc, #28]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <HAL_RCC_OscConfig+0x76c>)
 8005d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7a:	f7ff f8e3 	bl	8004f44 <HAL_GetTick>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d80:	e011      	b.n	8005da6 <HAL_RCC_OscConfig+0x78e>
 8005d82:	bf00      	nop
 8005d84:	58024400 	.word	0x58024400
 8005d88:	58024800 	.word	0x58024800
 8005d8c:	fffffc0c 	.word	0xfffffc0c
 8005d90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d94:	f7ff f8d6 	bl	8004f44 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e08a      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005da6:	4b47      	ldr	r3, [pc, #284]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x77c>
 8005db2:	e082      	b.n	8005eba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a42      	ldr	r2, [pc, #264]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7ff f8c0 	bl	8004f44 <HAL_GetTick>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc8:	f7ff f8bc 	bl	8004f44 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e070      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dda:	4b3a      	ldr	r3, [pc, #232]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x7b0>
 8005de6:	e068      	b.n	8005eba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005dee:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d031      	beq.n	8005e60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f003 0203 	and.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d12a      	bne.n	8005e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	091b      	lsrs	r3, r3, #4
 8005e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d122      	bne.n	8005e60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d11a      	bne.n	8005e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	0a5b      	lsrs	r3, r3, #9
 8005e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d111      	bne.n	8005e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d108      	bne.n	8005e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	0e1b      	lsrs	r3, r3, #24
 8005e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d001      	beq.n	8005e64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e02b      	b.n	8005ebc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e64:	4b17      	ldr	r3, [pc, #92]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e68:	08db      	lsrs	r3, r3, #3
 8005e6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d01f      	beq.n	8005eba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	4a11      	ldr	r2, [pc, #68]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e86:	f7ff f85d 	bl	8004f44 <HAL_GetTick>
 8005e8a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e8c:	bf00      	nop
 8005e8e:	f7ff f859 	bl	8004f44 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d0f9      	beq.n	8005e8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <HAL_RCC_OscConfig+0x8b0>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ea6:	00d2      	lsls	r2, r2, #3
 8005ea8:	4906      	ldr	r1, [pc, #24]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <HAL_RCC_OscConfig+0x8ac>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3730      	adds	r7, #48	; 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	58024400 	.word	0x58024400
 8005ec8:	ffff0007 	.word	0xffff0007

08005ecc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e19c      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b8a      	ldr	r3, [pc, #552]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d910      	bls.n	8005f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b87      	ldr	r3, [pc, #540]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 020f 	bic.w	r2, r3, #15
 8005ef6:	4985      	ldr	r1, [pc, #532]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b83      	ldr	r3, [pc, #524]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e184      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d010      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	4b7b      	ldr	r3, [pc, #492]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d908      	bls.n	8005f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f2c:	4b78      	ldr	r3, [pc, #480]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	4975      	ldr	r1, [pc, #468]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d010      	beq.n	8005f6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	4b70      	ldr	r3, [pc, #448]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d908      	bls.n	8005f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f5a:	4b6d      	ldr	r3, [pc, #436]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	496a      	ldr	r1, [pc, #424]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d010      	beq.n	8005f9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	4b64      	ldr	r3, [pc, #400]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d908      	bls.n	8005f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f88:	4b61      	ldr	r3, [pc, #388]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	495e      	ldr	r1, [pc, #376]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d010      	beq.n	8005fc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	4b59      	ldr	r3, [pc, #356]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d908      	bls.n	8005fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fb6:	4b56      	ldr	r3, [pc, #344]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	4953      	ldr	r1, [pc, #332]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d010      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	4b4d      	ldr	r3, [pc, #308]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d908      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe4:	4b4a      	ldr	r3, [pc, #296]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f023 020f 	bic.w	r2, r3, #15
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4947      	ldr	r1, [pc, #284]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d055      	beq.n	80060ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006002:	4b43      	ldr	r3, [pc, #268]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4940      	ldr	r1, [pc, #256]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8006010:	4313      	orrs	r3, r2
 8006012:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d107      	bne.n	800602c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800601c:	4b3c      	ldr	r3, [pc, #240]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d121      	bne.n	800606c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0f6      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b03      	cmp	r3, #3
 8006032:	d107      	bne.n	8006044 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006034:	4b36      	ldr	r3, [pc, #216]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d115      	bne.n	800606c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0ea      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d107      	bne.n	800605c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0de      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605c:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0d6      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800606c:	4b28      	ldr	r3, [pc, #160]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f023 0207 	bic.w	r2, r3, #7
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4925      	ldr	r1, [pc, #148]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 800607a:	4313      	orrs	r3, r2
 800607c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800607e:	f7fe ff61 	bl	8004f44 <HAL_GetTick>
 8006082:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006084:	e00a      	b.n	800609c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006086:	f7fe ff5d 	bl	8004f44 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	f241 3288 	movw	r2, #5000	; 0x1388
 8006094:	4293      	cmp	r3, r2
 8006096:	d901      	bls.n	800609c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e0be      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609c:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d1eb      	bne.n	8006086 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d010      	beq.n	80060dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	4b14      	ldr	r3, [pc, #80]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d208      	bcs.n	80060dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ca:	4b11      	ldr	r3, [pc, #68]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f023 020f 	bic.w	r2, r3, #15
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	490e      	ldr	r1, [pc, #56]	; (8006110 <HAL_RCC_ClockConfig+0x244>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d214      	bcs.n	8006114 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 020f 	bic.w	r2, r3, #15
 80060f2:	4906      	ldr	r1, [pc, #24]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <HAL_RCC_ClockConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d005      	beq.n	8006114 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e086      	b.n	800621a <HAL_RCC_ClockConfig+0x34e>
 800610c:	52002000 	.word	0x52002000
 8006110:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d010      	beq.n	8006142 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	4b3f      	ldr	r3, [pc, #252]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800612c:	429a      	cmp	r2, r3
 800612e:	d208      	bcs.n	8006142 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006130:	4b3c      	ldr	r3, [pc, #240]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4939      	ldr	r1, [pc, #228]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 800613e:	4313      	orrs	r3, r2
 8006140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d010      	beq.n	8006170 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	4b34      	ldr	r3, [pc, #208]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800615a:	429a      	cmp	r2, r3
 800615c:	d208      	bcs.n	8006170 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800615e:	4b31      	ldr	r3, [pc, #196]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	492e      	ldr	r1, [pc, #184]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 800616c:	4313      	orrs	r3, r2
 800616e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	d010      	beq.n	800619e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006188:	429a      	cmp	r2, r3
 800618a:	d208      	bcs.n	800619e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	4922      	ldr	r1, [pc, #136]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 800619a:	4313      	orrs	r3, r2
 800619c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d010      	beq.n	80061cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d208      	bcs.n	80061cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4917      	ldr	r1, [pc, #92]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061cc:	f000 f834 	bl	8006238 <HAL_RCC_GetSysClockFreq>
 80061d0:	4602      	mov	r2, r0
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	0a1b      	lsrs	r3, r3, #8
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	4912      	ldr	r1, [pc, #72]	; (8006228 <HAL_RCC_ClockConfig+0x35c>)
 80061de:	5ccb      	ldrb	r3, [r1, r3]
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	fa22 f303 	lsr.w	r3, r2, r3
 80061e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCC_ClockConfig+0x358>)
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	4a0d      	ldr	r2, [pc, #52]	; (8006228 <HAL_RCC_ClockConfig+0x35c>)
 80061f4:	5cd3      	ldrb	r3, [r2, r3]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <HAL_RCC_ClockConfig+0x360>)
 8006202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <HAL_RCC_ClockConfig+0x364>)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <HAL_RCC_ClockConfig+0x368>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fe4e 	bl	8004eb0 <HAL_InitTick>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	58024400 	.word	0x58024400
 8006228:	0800f0cc 	.word	0x0800f0cc
 800622c:	24000010 	.word	0x24000010
 8006230:	2400000c 	.word	0x2400000c
 8006234:	24000014 	.word	0x24000014

08006238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800623e:	4bb3      	ldr	r3, [pc, #716]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006246:	2b18      	cmp	r3, #24
 8006248:	f200 8155 	bhi.w	80064f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <HAL_RCC_GetSysClockFreq+0x1c>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	080062b9 	.word	0x080062b9
 8006258:	080064f7 	.word	0x080064f7
 800625c:	080064f7 	.word	0x080064f7
 8006260:	080064f7 	.word	0x080064f7
 8006264:	080064f7 	.word	0x080064f7
 8006268:	080064f7 	.word	0x080064f7
 800626c:	080064f7 	.word	0x080064f7
 8006270:	080064f7 	.word	0x080064f7
 8006274:	080062df 	.word	0x080062df
 8006278:	080064f7 	.word	0x080064f7
 800627c:	080064f7 	.word	0x080064f7
 8006280:	080064f7 	.word	0x080064f7
 8006284:	080064f7 	.word	0x080064f7
 8006288:	080064f7 	.word	0x080064f7
 800628c:	080064f7 	.word	0x080064f7
 8006290:	080064f7 	.word	0x080064f7
 8006294:	080062e5 	.word	0x080062e5
 8006298:	080064f7 	.word	0x080064f7
 800629c:	080064f7 	.word	0x080064f7
 80062a0:	080064f7 	.word	0x080064f7
 80062a4:	080064f7 	.word	0x080064f7
 80062a8:	080064f7 	.word	0x080064f7
 80062ac:	080064f7 	.word	0x080064f7
 80062b0:	080064f7 	.word	0x080064f7
 80062b4:	080062eb 	.word	0x080062eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b8:	4b94      	ldr	r3, [pc, #592]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062c4:	4b91      	ldr	r3, [pc, #580]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	08db      	lsrs	r3, r3, #3
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	4a90      	ldr	r2, [pc, #576]	; (8006510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
 80062d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062d6:	e111      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062d8:	4b8d      	ldr	r3, [pc, #564]	; (8006510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062da:	61bb      	str	r3, [r7, #24]
      break;
 80062dc:	e10e      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062de:	4b8d      	ldr	r3, [pc, #564]	; (8006514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062e0:	61bb      	str	r3, [r7, #24]
      break;
 80062e2:	e10b      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80062e4:	4b8c      	ldr	r3, [pc, #560]	; (8006518 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062e6:	61bb      	str	r3, [r7, #24]
      break;
 80062e8:	e108      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062ea:	4b88      	ldr	r3, [pc, #544]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062f4:	4b85      	ldr	r3, [pc, #532]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006300:	4b82      	ldr	r3, [pc, #520]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800630a:	4b80      	ldr	r3, [pc, #512]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800630c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630e:	08db      	lsrs	r3, r3, #3
 8006310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80e1 	beq.w	80064f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b02      	cmp	r3, #2
 8006332:	f000 8083 	beq.w	800643c <HAL_RCC_GetSysClockFreq+0x204>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b02      	cmp	r3, #2
 800633a:	f200 80a1 	bhi.w	8006480 <HAL_RCC_GetSysClockFreq+0x248>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x114>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d056      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800634a:	e099      	b.n	8006480 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800634c:	4b6f      	ldr	r3, [pc, #444]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d02d      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006358:	4b6c      	ldr	r3, [pc, #432]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	08db      	lsrs	r3, r3, #3
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	4a6b      	ldr	r2, [pc, #428]	; (8006510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006364:	fa22 f303 	lsr.w	r3, r2, r3
 8006368:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	ee07 3a90 	vmov	s15, r3
 8006370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006382:	4b62      	ldr	r3, [pc, #392]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006392:	ed97 6a02 	vldr	s12, [r7, #8]
 8006396:	eddf 5a61 	vldr	s11, [pc, #388]	; 800651c <HAL_RCC_GetSysClockFreq+0x2e4>
 800639a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80063b2:	e087      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006520 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c6:	4b51      	ldr	r3, [pc, #324]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800651c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063f6:	e065      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006402:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006524 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640a:	4b40      	ldr	r3, [pc, #256]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641a:	ed97 6a02 	vldr	s12, [r7, #8]
 800641e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800651c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800642e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800643a:	e043      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006528 <HAL_RCC_GetSysClockFreq+0x2f0>
 800644a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644e:	4b2f      	ldr	r3, [pc, #188]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006462:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800651c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800647e:	e021      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800648e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006492:	4b1e      	ldr	r3, [pc, #120]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800651c <HAL_RCC_GetSysClockFreq+0x2e4>
 80064aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064c4:	4b11      	ldr	r3, [pc, #68]	; (800650c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	0a5b      	lsrs	r3, r3, #9
 80064ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ce:	3301      	adds	r3, #1
 80064d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e8:	ee17 3a90 	vmov	r3, s15
 80064ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80064ee:	e005      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
      break;
 80064f4:	e002      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80064f6:	4b07      	ldr	r3, [pc, #28]	; (8006514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064f8:	61bb      	str	r3, [r7, #24]
      break;
 80064fa:	bf00      	nop
  }

  return sysclockfreq;
 80064fc:	69bb      	ldr	r3, [r7, #24]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3724      	adds	r7, #36	; 0x24
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	58024400 	.word	0x58024400
 8006510:	03d09000 	.word	0x03d09000
 8006514:	003d0900 	.word	0x003d0900
 8006518:	007a1200 	.word	0x007a1200
 800651c:	46000000 	.word	0x46000000
 8006520:	4c742400 	.word	0x4c742400
 8006524:	4a742400 	.word	0x4a742400
 8006528:	4af42400 	.word	0x4af42400

0800652c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800652c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006530:	b0ca      	sub	sp, #296	; 0x128
 8006532:	af00      	add	r7, sp, #0
 8006534:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800653e:	2300      	movs	r3, #0
 8006540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006550:	2500      	movs	r5, #0
 8006552:	ea54 0305 	orrs.w	r3, r4, r5
 8006556:	d049      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006562:	d02f      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006564:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006568:	d828      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800656a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800656e:	d01a      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006574:	d822      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800657a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657e:	d007      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006580:	e01c      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006582:	4bb8      	ldr	r3, [pc, #736]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	4ab7      	ldr	r2, [pc, #732]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800658c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800658e:	e01a      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006594:	3308      	adds	r3, #8
 8006596:	2102      	movs	r1, #2
 8006598:	4618      	mov	r0, r3
 800659a:	f001 f9d1 	bl	8007940 <RCCEx_PLL2_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065a4:	e00f      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065aa:	3328      	adds	r3, #40	; 0x28
 80065ac:	2102      	movs	r1, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fa78 	bl	8007aa4 <RCCEx_PLL3_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065ba:	e004      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065c2:	e000      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065ce:	4ba5      	ldr	r3, [pc, #660]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065dc:	4aa1      	ldr	r2, [pc, #644]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	6513      	str	r3, [r2, #80]	; 0x50
 80065e2:	e003      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80065f8:	f04f 0900 	mov.w	r9, #0
 80065fc:	ea58 0309 	orrs.w	r3, r8, r9
 8006600:	d047      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006608:	2b04      	cmp	r3, #4
 800660a:	d82a      	bhi.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006629 	.word	0x08006629
 8006618:	08006637 	.word	0x08006637
 800661c:	0800664d 	.word	0x0800664d
 8006620:	0800666b 	.word	0x0800666b
 8006624:	0800666b 	.word	0x0800666b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006628:	4b8e      	ldr	r3, [pc, #568]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	4a8d      	ldr	r2, [pc, #564]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800662e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006634:	e01a      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	3308      	adds	r3, #8
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f97e 	bl	8007940 <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800664a:	e00f      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006650:	3328      	adds	r3, #40	; 0x28
 8006652:	2100      	movs	r1, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f001 fa25 	bl	8007aa4 <RCCEx_PLL3_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006660:	e004      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800666a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006674:	4b7b      	ldr	r3, [pc, #492]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	f023 0107 	bic.w	r1, r3, #7
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006682:	4a78      	ldr	r2, [pc, #480]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006684:	430b      	orrs	r3, r1
 8006686:	6513      	str	r3, [r2, #80]	; 0x50
 8006688:	e003      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800668e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800669e:	f04f 0b00 	mov.w	fp, #0
 80066a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80066a6:	d04c      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d030      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80066b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b8:	d829      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066ba:	2bc0      	cmp	r3, #192	; 0xc0
 80066bc:	d02d      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066be:	2bc0      	cmp	r3, #192	; 0xc0
 80066c0:	d825      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066c2:	2b80      	cmp	r3, #128	; 0x80
 80066c4:	d018      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80066c6:	2b80      	cmp	r3, #128	; 0x80
 80066c8:	d821      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d007      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80066d2:	e01c      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d4:	4b63      	ldr	r3, [pc, #396]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	4a62      	ldr	r2, [pc, #392]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066e0:	e01c      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e6:	3308      	adds	r3, #8
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f928 	bl	8007940 <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066f6:	e011      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fc:	3328      	adds	r3, #40	; 0x28
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f001 f9cf 	bl	8007aa4 <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800670c:	e006      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006714:	e002      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800671a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006724:	4b4f      	ldr	r3, [pc, #316]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006728:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006732:	4a4c      	ldr	r2, [pc, #304]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6513      	str	r3, [r2, #80]	; 0x50
 8006738:	e003      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800673e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800674e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006752:	2300      	movs	r3, #0
 8006754:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006758:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800675c:	460b      	mov	r3, r1
 800675e:	4313      	orrs	r3, r2
 8006760:	d053      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006766:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800676a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800676e:	d035      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006774:	d82e      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800677a:	d031      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800677c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006780:	d828      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006786:	d01a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800678c:	d822      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006796:	d007      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006798:	e01c      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800679a:	4b32      	ldr	r3, [pc, #200]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	4a31      	ldr	r2, [pc, #196]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067a6:	e01c      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ac:	3308      	adds	r3, #8
 80067ae:	2100      	movs	r1, #0
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 f8c5 	bl	8007940 <RCCEx_PLL2_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067bc:	e011      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c2:	3328      	adds	r3, #40	; 0x28
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 f96c 	bl	8007aa4 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067d2:	e006      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067da:	e002      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067dc:	bf00      	nop
 80067de:	e000      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067ea:	4b1e      	ldr	r3, [pc, #120]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067fa:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006800:	e003      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006816:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800681a:	2300      	movs	r3, #0
 800681c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006820:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006824:	460b      	mov	r3, r1
 8006826:	4313      	orrs	r3, r2
 8006828:	d056      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006836:	d038      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800683c:	d831      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800683e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006842:	d034      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006844:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006848:	d82b      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800684a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800684e:	d01d      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006854:	d825      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800685a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006860:	e01f      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4ba2      	ldr	r3, [pc, #648]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4aa1      	ldr	r2, [pc, #644]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006874:	e01c      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687a:	3308      	adds	r3, #8
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f001 f85e 	bl	8007940 <RCCEx_PLL2_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800688a:	e011      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	3328      	adds	r3, #40	; 0x28
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f905 	bl	8007aa4 <RCCEx_PLL3_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068a0:	e006      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068a8:	e002      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80068aa:	bf00      	nop
 80068ac:	e000      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80068ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068b8:	4b8e      	ldr	r3, [pc, #568]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068c8:	4a8a      	ldr	r2, [pc, #552]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6593      	str	r3, [r2, #88]	; 0x58
 80068ce:	e003      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80068e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e8:	2300      	movs	r3, #0
 80068ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80068f2:	460b      	mov	r3, r1
 80068f4:	4313      	orrs	r3, r2
 80068f6:	d03a      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fe:	2b30      	cmp	r3, #48	; 0x30
 8006900:	d01f      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006902:	2b30      	cmp	r3, #48	; 0x30
 8006904:	d819      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006906:	2b20      	cmp	r3, #32
 8006908:	d00c      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800690a:	2b20      	cmp	r3, #32
 800690c:	d815      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d019      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006912:	2b10      	cmp	r3, #16
 8006914:	d111      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006916:	4b77      	ldr	r3, [pc, #476]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	4a76      	ldr	r2, [pc, #472]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800691c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006920:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006922:	e011      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006928:	3308      	adds	r3, #8
 800692a:	2102      	movs	r1, #2
 800692c:	4618      	mov	r0, r3
 800692e:	f001 f807 	bl	8007940 <RCCEx_PLL2_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006938:	e006      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006940:	e002      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006950:	4b68      	ldr	r3, [pc, #416]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006954:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695e:	4a65      	ldr	r2, [pc, #404]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006960:	430b      	orrs	r3, r1
 8006962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800696a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800697a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800697e:	2300      	movs	r3, #0
 8006980:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006984:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006988:	460b      	mov	r3, r1
 800698a:	4313      	orrs	r3, r2
 800698c:	d051      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006998:	d035      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800699a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699e:	d82e      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069a4:	d031      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80069a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069aa:	d828      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b0:	d01a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80069b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b6:	d822      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d007      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80069c2:	e01c      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c4:	4b4b      	ldr	r3, [pc, #300]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	4a4a      	ldr	r2, [pc, #296]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069d0:	e01c      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d6:	3308      	adds	r3, #8
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 ffb0 	bl	8007940 <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069e6:	e011      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ec:	3328      	adds	r3, #40	; 0x28
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 f857 	bl	8007aa4 <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069fc:	e006      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a04:	e002      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a14:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a22:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6513      	str	r3, [r2, #80]	; 0x50
 8006a28:	e003      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a42:	2300      	movs	r3, #0
 8006a44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d056      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a5c:	d033      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006a5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a62:	d82c      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a68:	d02f      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a6e:	d826      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a74:	d02b      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006a76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a7a:	d820      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a80:	d012      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a86:	d81a      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d022      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a90:	d115      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a96:	3308      	adds	r3, #8
 8006a98:	2101      	movs	r1, #1
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 ff50 	bl	8007940 <RCCEx_PLL2_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006aa6:	e015      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aac:	3328      	adds	r3, #40	; 0x28
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fff7 	bl	8007aa4 <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ac4:	e006      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ac6:	bf00      	nop
 8006ac8:	e004      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aca:	bf00      	nop
 8006acc:	e002      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10d      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aea:	4a02      	ldr	r2, [pc, #8]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6513      	str	r3, [r2, #80]	; 0x50
 8006af0:	e006      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006af2:	bf00      	nop
 8006af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	d055      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b2c:	d033      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b32:	d82c      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d02f      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d826      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b44:	d02b      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b4a:	d820      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b50:	d012      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b56:	d81a      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d022      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b60:	d115      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b66:	3308      	adds	r3, #8
 8006b68:	2101      	movs	r1, #1
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fee8 	bl	8007940 <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b76:	e015      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7c:	3328      	adds	r3, #40	; 0x28
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 ff8f 	bl	8007aa4 <RCCEx_PLL3_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b8c:	e00a      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b94:	e006      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b96:	bf00      	nop
 8006b98:	e004      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b9a:	bf00      	nop
 8006b9c:	e002      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b9e:	bf00      	nop
 8006ba0:	e000      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bac:	4ba3      	ldr	r3, [pc, #652]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bbc:	4a9f      	ldr	r2, [pc, #636]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8006bc2:	e003      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006be6:	460b      	mov	r3, r1
 8006be8:	4313      	orrs	r3, r2
 8006bea:	d037      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf6:	d00e      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfc:	d816      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c06:	d111      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c08:	4b8c      	ldr	r3, [pc, #560]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	4a8b      	ldr	r2, [pc, #556]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c14:	e00f      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fe8e 	bl	8007940 <RCCEx_PLL2_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c2a:	e004      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c3e:	4b7f      	ldr	r3, [pc, #508]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4c:	4a7b      	ldr	r2, [pc, #492]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	6513      	str	r3, [r2, #80]	; 0x50
 8006c52:	e003      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d039      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d81c      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cc9 	.word	0x08006cc9
 8006c90:	08006c9d 	.word	0x08006c9d
 8006c94:	08006cab 	.word	0x08006cab
 8006c98:	08006cc9 	.word	0x08006cc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c9c:	4b67      	ldr	r3, [pc, #412]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	4a66      	ldr	r2, [pc, #408]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ca8:	e00f      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cae:	3308      	adds	r3, #8
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fe44 	bl	8007940 <RCCEx_PLL2_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cbe:	e004      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cd2:	4b5a      	ldr	r3, [pc, #360]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	f023 0103 	bic.w	r1, r3, #3
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce0:	4a56      	ldr	r2, [pc, #344]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ce6:	e003      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f000 809f 	beq.w	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d12:	4b4b      	ldr	r3, [pc, #300]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a4a      	ldr	r2, [pc, #296]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d1e:	f7fe f911 	bl	8004f44 <HAL_GetTick>
 8006d22:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d26:	e00b      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d28:	f7fe f90c 	bl	8004f44 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b64      	cmp	r3, #100	; 0x64
 8006d36:	d903      	bls.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d3e:	e005      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d40:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0ed      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d179      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d54:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d60:	4053      	eors	r3, r2
 8006d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d015      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d6a:	4b34      	ldr	r3, [pc, #208]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d76:	4b31      	ldr	r3, [pc, #196]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	4a30      	ldr	r2, [pc, #192]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d82:	4b2e      	ldr	r3, [pc, #184]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a2d      	ldr	r2, [pc, #180]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da2:	d118      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fe f8ce 	bl	8004f44 <HAL_GetTick>
 8006da8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dac:	e00d      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dae:	f7fe f8c9 	bl	8004f44 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006db8:	1ad2      	subs	r2, r2, r3
 8006dba:	f241 3388 	movw	r3, #5000	; 0x1388
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d903      	bls.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006dc8:	e005      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dca:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0eb      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d129      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dee:	d10e      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e00:	091a      	lsrs	r2, r3, #4
 8006e02:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	4a0d      	ldr	r2, [pc, #52]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6113      	str	r3, [r2, #16]
 8006e0c:	e005      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e18:	6113      	str	r3, [r2, #16]
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2a:	4a04      	ldr	r2, [pc, #16]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e30:	e00e      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006e3a:	e009      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	58024800 	.word	0x58024800
 8006e44:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f002 0301 	and.w	r3, r2, #1
 8006e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e60:	2300      	movs	r3, #0
 8006e62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f000 8089 	beq.w	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e78:	2b28      	cmp	r3, #40	; 0x28
 8006e7a:	d86b      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006f5d 	.word	0x08006f5d
 8006e88:	08006f55 	.word	0x08006f55
 8006e8c:	08006f55 	.word	0x08006f55
 8006e90:	08006f55 	.word	0x08006f55
 8006e94:	08006f55 	.word	0x08006f55
 8006e98:	08006f55 	.word	0x08006f55
 8006e9c:	08006f55 	.word	0x08006f55
 8006ea0:	08006f55 	.word	0x08006f55
 8006ea4:	08006f29 	.word	0x08006f29
 8006ea8:	08006f55 	.word	0x08006f55
 8006eac:	08006f55 	.word	0x08006f55
 8006eb0:	08006f55 	.word	0x08006f55
 8006eb4:	08006f55 	.word	0x08006f55
 8006eb8:	08006f55 	.word	0x08006f55
 8006ebc:	08006f55 	.word	0x08006f55
 8006ec0:	08006f55 	.word	0x08006f55
 8006ec4:	08006f3f 	.word	0x08006f3f
 8006ec8:	08006f55 	.word	0x08006f55
 8006ecc:	08006f55 	.word	0x08006f55
 8006ed0:	08006f55 	.word	0x08006f55
 8006ed4:	08006f55 	.word	0x08006f55
 8006ed8:	08006f55 	.word	0x08006f55
 8006edc:	08006f55 	.word	0x08006f55
 8006ee0:	08006f55 	.word	0x08006f55
 8006ee4:	08006f5d 	.word	0x08006f5d
 8006ee8:	08006f55 	.word	0x08006f55
 8006eec:	08006f55 	.word	0x08006f55
 8006ef0:	08006f55 	.word	0x08006f55
 8006ef4:	08006f55 	.word	0x08006f55
 8006ef8:	08006f55 	.word	0x08006f55
 8006efc:	08006f55 	.word	0x08006f55
 8006f00:	08006f55 	.word	0x08006f55
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f55 	.word	0x08006f55
 8006f0c:	08006f55 	.word	0x08006f55
 8006f10:	08006f55 	.word	0x08006f55
 8006f14:	08006f55 	.word	0x08006f55
 8006f18:	08006f55 	.word	0x08006f55
 8006f1c:	08006f55 	.word	0x08006f55
 8006f20:	08006f55 	.word	0x08006f55
 8006f24:	08006f5d 	.word	0x08006f5d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fd05 	bl	8007940 <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f3c:	e00f      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f42:	3328      	adds	r3, #40	; 0x28
 8006f44:	2101      	movs	r1, #1
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fdac 	bl	8007aa4 <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f52:	e004      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f5a:	e000      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f66:	4bbf      	ldr	r3, [pc, #764]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f74:	4abb      	ldr	r2, [pc, #748]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f76:	430b      	orrs	r3, r1
 8006f78:	6553      	str	r3, [r2, #84]	; 0x54
 8006f7a:	e003      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f002 0302 	and.w	r3, r2, #2
 8006f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f94:	2300      	movs	r3, #0
 8006f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	d041      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	d824      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006fae:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	08006fcd 	.word	0x08006fcd
 8006fbc:	08006fe3 	.word	0x08006fe3
 8006fc0:	08007001 	.word	0x08007001
 8006fc4:	08007001 	.word	0x08007001
 8006fc8:	08007001 	.word	0x08007001
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fcb3 	bl	8007940 <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00f      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe6:	3328      	adds	r3, #40	; 0x28
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fd5a 	bl	8007aa4 <RCCEx_PLL3_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ff6:	e004      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ffe:	e000      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800700a:	4b96      	ldr	r3, [pc, #600]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700e:	f023 0107 	bic.w	r1, r3, #7
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007018:	4a92      	ldr	r2, [pc, #584]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800701a:	430b      	orrs	r3, r1
 800701c:	6553      	str	r3, [r2, #84]	; 0x54
 800701e:	e003      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f002 0304 	and.w	r3, r2, #4
 8007034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007038:	2300      	movs	r3, #0
 800703a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800703e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007042:	460b      	mov	r3, r1
 8007044:	4313      	orrs	r3, r2
 8007046:	d044      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007050:	2b05      	cmp	r3, #5
 8007052:	d825      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007054:	a201      	add	r2, pc, #4	; (adr r2, 800705c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	080070a9 	.word	0x080070a9
 8007060:	08007075 	.word	0x08007075
 8007064:	0800708b 	.word	0x0800708b
 8007068:	080070a9 	.word	0x080070a9
 800706c:	080070a9 	.word	0x080070a9
 8007070:	080070a9 	.word	0x080070a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007078:	3308      	adds	r3, #8
 800707a:	2101      	movs	r1, #1
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fc5f 	bl	8007940 <RCCEx_PLL2_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007088:	e00f      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708e:	3328      	adds	r3, #40	; 0x28
 8007090:	2101      	movs	r1, #1
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fd06 	bl	8007aa4 <RCCEx_PLL3_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80070a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070b2:	4b6c      	ldr	r3, [pc, #432]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b6:	f023 0107 	bic.w	r1, r3, #7
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c2:	4a68      	ldr	r2, [pc, #416]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6593      	str	r3, [r2, #88]	; 0x58
 80070c8:	e003      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f002 0320 	and.w	r3, r2, #32
 80070de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070e2:	2300      	movs	r3, #0
 80070e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070ec:	460b      	mov	r3, r1
 80070ee:	4313      	orrs	r3, r2
 80070f0:	d055      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80070f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070fe:	d033      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007104:	d82c      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d02f      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007110:	d826      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007116:	d02b      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800711c:	d820      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800711e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007122:	d012      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007128:	d81a      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d022      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800712e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007132:	d115      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007138:	3308      	adds	r3, #8
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fbff 	bl	8007940 <RCCEx_PLL2_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007148:	e015      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714e:	3328      	adds	r3, #40	; 0x28
 8007150:	2102      	movs	r1, #2
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fca6 	bl	8007aa4 <RCCEx_PLL3_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800715e:	e00a      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007166:	e006      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007168:	bf00      	nop
 800716a:	e004      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800716c:	bf00      	nop
 800716e:	e002      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007170:	bf00      	nop
 8007172:	e000      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10b      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800717e:	4b39      	ldr	r3, [pc, #228]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718e:	4a35      	ldr	r2, [pc, #212]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007190:	430b      	orrs	r3, r1
 8007192:	6553      	str	r3, [r2, #84]	; 0x54
 8007194:	e003      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800719a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80071aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071ae:	2300      	movs	r3, #0
 80071b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4313      	orrs	r3, r2
 80071bc:	d058      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071ca:	d033      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80071cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071d0:	d82c      	bhi.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d6:	d02f      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80071d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071dc:	d826      	bhi.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071e2:	d02b      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80071e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071e8:	d820      	bhi.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ee:	d012      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80071f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f4:	d81a      	bhi.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d022      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80071fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fe:	d115      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007204:	3308      	adds	r3, #8
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fb99 	bl	8007940 <RCCEx_PLL2_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007214:	e015      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721a:	3328      	adds	r3, #40	; 0x28
 800721c:	2102      	movs	r1, #2
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fc40 	bl	8007aa4 <RCCEx_PLL3_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800722a:	e00a      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007232:	e006      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007234:	bf00      	nop
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007238:	bf00      	nop
 800723a:	e002      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800723c:	bf00      	nop
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10e      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800725a:	4a02      	ldr	r2, [pc, #8]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800725c:	430b      	orrs	r3, r1
 800725e:	6593      	str	r3, [r2, #88]	; 0x58
 8007260:	e006      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007262:	bf00      	nop
 8007264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800726c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800727c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007280:	2300      	movs	r3, #0
 8007282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007286:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800728a:	460b      	mov	r3, r1
 800728c:	4313      	orrs	r3, r2
 800728e:	d055      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007298:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800729c:	d033      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800729e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072a2:	d82c      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a8:	d02f      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80072aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ae:	d826      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072b4:	d02b      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80072b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072ba:	d820      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072c0:	d012      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80072c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072c6:	d81a      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d022      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80072cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d0:	d115      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d6:	3308      	adds	r3, #8
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fb30 	bl	8007940 <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072e6:	e015      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ec:	3328      	adds	r3, #40	; 0x28
 80072ee:	2102      	movs	r1, #2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fbd7 	bl	8007aa4 <RCCEx_PLL3_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072fc:	e00a      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007304:	e006      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007306:	bf00      	nop
 8007308:	e004      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10b      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800731c:	4ba1      	ldr	r3, [pc, #644]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800731e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007320:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800732c:	4a9d      	ldr	r2, [pc, #628]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800732e:	430b      	orrs	r3, r1
 8007330:	6593      	str	r3, [r2, #88]	; 0x58
 8007332:	e003      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007338:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f002 0308 	and.w	r3, r2, #8
 8007348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800734c:	2300      	movs	r3, #0
 800734e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007352:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007356:	460b      	mov	r3, r1
 8007358:	4313      	orrs	r3, r2
 800735a:	d01e      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007368:	d10c      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736e:	3328      	adds	r3, #40	; 0x28
 8007370:	2102      	movs	r1, #2
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fb96 	bl	8007aa4 <RCCEx_PLL3_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007384:	4b87      	ldr	r3, [pc, #540]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007388:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007394:	4a83      	ldr	r2, [pc, #524]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007396:	430b      	orrs	r3, r1
 8007398:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f002 0310 	and.w	r3, r2, #16
 80073a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073aa:	2300      	movs	r3, #0
 80073ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80073b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d01e      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c6:	d10c      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073cc:	3328      	adds	r3, #40	; 0x28
 80073ce:	2102      	movs	r1, #2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fb67 	bl	8007aa4 <RCCEx_PLL3_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073e2:	4b70      	ldr	r3, [pc, #448]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073f2:	4a6c      	ldr	r2, [pc, #432]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800740e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007412:	460b      	mov	r3, r1
 8007414:	4313      	orrs	r3, r2
 8007416:	d03e      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007424:	d022      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800742a:	d81b      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007434:	d00b      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007436:	e015      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743c:	3308      	adds	r3, #8
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fa7d 	bl	8007940 <RCCEx_PLL2_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800744c:	e00f      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007452:	3328      	adds	r3, #40	; 0x28
 8007454:	2102      	movs	r1, #2
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fb24 	bl	8007aa4 <RCCEx_PLL3_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007462:	e004      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800746a:	e000      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800746c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007476:	4b4b      	ldr	r3, [pc, #300]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007486:	4a47      	ldr	r2, [pc, #284]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007488:	430b      	orrs	r3, r1
 800748a:	6593      	str	r3, [r2, #88]	; 0x58
 800748c:	e003      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007492:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80074a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80074a4:	2300      	movs	r3, #0
 80074a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80074ac:	460b      	mov	r3, r1
 80074ae:	4313      	orrs	r3, r2
 80074b0:	d03b      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074be:	d01f      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80074c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c4:	d818      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80074c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ca:	d003      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80074cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d0:	d007      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80074d2:	e011      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d4:	4b33      	ldr	r3, [pc, #204]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	4a32      	ldr	r2, [pc, #200]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074e0:	e00f      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e6:	3328      	adds	r3, #40	; 0x28
 80074e8:	2101      	movs	r1, #1
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fada 	bl	8007aa4 <RCCEx_PLL3_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80074f6:	e004      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074fe:	e000      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800750a:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800751c:	430b      	orrs	r3, r1
 800751e:	6553      	str	r3, [r2, #84]	; 0x54
 8007520:	e003      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007536:	673b      	str	r3, [r7, #112]	; 0x70
 8007538:	2300      	movs	r3, #0
 800753a:	677b      	str	r3, [r7, #116]	; 0x74
 800753c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007540:	460b      	mov	r3, r1
 8007542:	4313      	orrs	r3, r2
 8007544:	d034      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d007      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007556:	e011      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007558:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	4a11      	ldr	r2, [pc, #68]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800755e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007564:	e00e      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756a:	3308      	adds	r3, #8
 800756c:	2102      	movs	r1, #2
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f9e6 	bl	8007940 <RCCEx_PLL2_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800757a:	e003      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10d      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800758e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759a:	4a02      	ldr	r2, [pc, #8]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800759c:	430b      	orrs	r3, r1
 800759e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075a0:	e006      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80075a2:	bf00      	nop
 80075a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80075bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80075be:	2300      	movs	r3, #0
 80075c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80075c6:	460b      	mov	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	d00c      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d0:	3328      	adds	r3, #40	; 0x28
 80075d2:	2102      	movs	r1, #2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fa65 	bl	8007aa4 <RCCEx_PLL3_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80075f2:	663b      	str	r3, [r7, #96]	; 0x60
 80075f4:	2300      	movs	r3, #0
 80075f6:	667b      	str	r3, [r7, #100]	; 0x64
 80075f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80075fc:	460b      	mov	r3, r1
 80075fe:	4313      	orrs	r3, r2
 8007600:	d038      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d018      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007614:	d811      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d014      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800761c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007620:	d80b      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d011      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762a:	d106      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800762c:	4bc3      	ldr	r3, [pc, #780]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	4ac2      	ldr	r2, [pc, #776]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007638:	e008      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007640:	e004      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007642:	bf00      	nop
 8007644:	e002      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007646:	bf00      	nop
 8007648:	e000      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800764a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10b      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007654:	4bb9      	ldr	r3, [pc, #740]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007658:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007664:	4ab5      	ldr	r2, [pc, #724]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007666:	430b      	orrs	r3, r1
 8007668:	6553      	str	r3, [r2, #84]	; 0x54
 800766a:	e003      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007680:	65bb      	str	r3, [r7, #88]	; 0x58
 8007682:	2300      	movs	r3, #0
 8007684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007686:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800768a:	460b      	mov	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	d009      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007690:	4baa      	ldr	r3, [pc, #680]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769e:	4aa7      	ldr	r2, [pc, #668]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80076b0:	653b      	str	r3, [r7, #80]	; 0x50
 80076b2:	2300      	movs	r3, #0
 80076b4:	657b      	str	r3, [r7, #84]	; 0x54
 80076b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d00a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80076c0:	4b9e      	ldr	r3, [pc, #632]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80076d0:	4a9a      	ldr	r2, [pc, #616]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076d2:	430b      	orrs	r3, r1
 80076d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80076e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076e4:	2300      	movs	r3, #0
 80076e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80076ec:	460b      	mov	r3, r1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	d009      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076f2:	4b92      	ldr	r3, [pc, #584]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80076fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007700:	4a8e      	ldr	r2, [pc, #568]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007702:	430b      	orrs	r3, r1
 8007704:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007712:	643b      	str	r3, [r7, #64]	; 0x40
 8007714:	2300      	movs	r3, #0
 8007716:	647b      	str	r3, [r7, #68]	; 0x44
 8007718:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800771c:	460b      	mov	r3, r1
 800771e:	4313      	orrs	r3, r2
 8007720:	d00e      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007722:	4b86      	ldr	r3, [pc, #536]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	4a85      	ldr	r2, [pc, #532]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007728:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800772c:	6113      	str	r3, [r2, #16]
 800772e:	4b83      	ldr	r3, [pc, #524]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007730:	6919      	ldr	r1, [r3, #16]
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007736:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800773a:	4a80      	ldr	r2, [pc, #512]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800773c:	430b      	orrs	r3, r1
 800773e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800774c:	63bb      	str	r3, [r7, #56]	; 0x38
 800774e:	2300      	movs	r3, #0
 8007750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007752:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007756:	460b      	mov	r3, r1
 8007758:	4313      	orrs	r3, r2
 800775a:	d009      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800775c:	4b77      	ldr	r3, [pc, #476]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800775e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007760:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	4a74      	ldr	r2, [pc, #464]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800776c:	430b      	orrs	r3, r1
 800776e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800777c:	633b      	str	r3, [r7, #48]	; 0x30
 800777e:	2300      	movs	r3, #0
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
 8007782:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d00a      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800778c:	4b6b      	ldr	r3, [pc, #428]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800779c:	4a67      	ldr	r2, [pc, #412]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800779e:	430b      	orrs	r3, r1
 80077a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	2100      	movs	r1, #0
 80077ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80077b8:	460b      	mov	r3, r1
 80077ba:	4313      	orrs	r3, r2
 80077bc:	d011      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c2:	3308      	adds	r3, #8
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f8ba 	bl	8007940 <RCCEx_PLL2_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	2100      	movs	r1, #0
 80077ec:	6239      	str	r1, [r7, #32]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
 80077f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077f8:	460b      	mov	r3, r1
 80077fa:	4313      	orrs	r3, r2
 80077fc:	d011      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	3308      	adds	r3, #8
 8007804:	2101      	movs	r1, #1
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f89a 	bl	8007940 <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800781e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	2100      	movs	r1, #0
 800782c:	61b9      	str	r1, [r7, #24]
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007838:	460b      	mov	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	d011      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007842:	3308      	adds	r3, #8
 8007844:	2102      	movs	r1, #2
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f87a 	bl	8007940 <RCCEx_PLL2_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800785e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	2100      	movs	r1, #0
 800786c:	6139      	str	r1, [r7, #16]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007878:	460b      	mov	r3, r1
 800787a:	4313      	orrs	r3, r2
 800787c:	d011      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007882:	3328      	adds	r3, #40	; 0x28
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f90c 	bl	8007aa4 <RCCEx_PLL3_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800789e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	2100      	movs	r1, #0
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80078b8:	460b      	mov	r3, r1
 80078ba:	4313      	orrs	r3, r2
 80078bc:	d011      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c2:	3328      	adds	r3, #40	; 0x28
 80078c4:	2101      	movs	r1, #1
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f8ec 	bl	8007aa4 <RCCEx_PLL3_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80078d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	2100      	movs	r1, #0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078f8:	460b      	mov	r3, r1
 80078fa:	4313      	orrs	r3, r2
 80078fc:	d011      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007902:	3328      	adds	r3, #40	; 0x28
 8007904:	2102      	movs	r1, #2
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f8cc 	bl	8007aa4 <RCCEx_PLL3_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800791e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007922:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
}
 8007930:	4618      	mov	r0, r3
 8007932:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007936:	46bd      	mov	sp, r7
 8007938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800793c:	58024400 	.word	0x58024400

08007940 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800794e:	4b53      	ldr	r3, [pc, #332]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b03      	cmp	r3, #3
 8007958:	d101      	bne.n	800795e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e099      	b.n	8007a92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800795e:	4b4f      	ldr	r3, [pc, #316]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a4e      	ldr	r2, [pc, #312]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007964:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796a:	f7fd faeb 	bl	8004f44 <HAL_GetTick>
 800796e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007970:	e008      	b.n	8007984 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007972:	f7fd fae7 	bl	8004f44 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d901      	bls.n	8007984 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e086      	b.n	8007a92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007984:	4b45      	ldr	r3, [pc, #276]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f0      	bne.n	8007972 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007990:	4b42      	ldr	r3, [pc, #264]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	493f      	ldr	r1, [pc, #252]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	628b      	str	r3, [r1, #40]	; 0x28
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	025b      	lsls	r3, r3, #9
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	3b01      	subs	r3, #1
 80079c0:	041b      	lsls	r3, r3, #16
 80079c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	061b      	lsls	r3, r3, #24
 80079d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079d4:	4931      	ldr	r1, [pc, #196]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079da:	4b30      	ldr	r3, [pc, #192]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	492d      	ldr	r1, [pc, #180]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079ec:	4b2b      	ldr	r3, [pc, #172]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	f023 0220 	bic.w	r2, r3, #32
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	4928      	ldr	r1, [pc, #160]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079fe:	4b27      	ldr	r3, [pc, #156]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	4a26      	ldr	r2, [pc, #152]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a04:	f023 0310 	bic.w	r3, r3, #16
 8007a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a0e:	4b24      	ldr	r3, [pc, #144]	; (8007aa0 <RCCEx_PLL2_Config+0x160>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	69d2      	ldr	r2, [r2, #28]
 8007a16:	00d2      	lsls	r2, r2, #3
 8007a18:	4920      	ldr	r1, [pc, #128]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a1e:	4b1f      	ldr	r3, [pc, #124]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	4a1e      	ldr	r2, [pc, #120]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a24:	f043 0310 	orr.w	r3, r3, #16
 8007a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d106      	bne.n	8007a3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a30:	4b1a      	ldr	r3, [pc, #104]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a3c:	e00f      	b.n	8007a5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d106      	bne.n	8007a52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a44:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	4a14      	ldr	r2, [pc, #80]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a50:	e005      	b.n	8007a5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a52:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a0e      	ldr	r2, [pc, #56]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a6a:	f7fd fa6b 	bl	8004f44 <HAL_GetTick>
 8007a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a70:	e008      	b.n	8007a84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a72:	f7fd fa67 	bl	8004f44 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e006      	b.n	8007a92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <RCCEx_PLL2_Config+0x15c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	ffff0007 	.word	0xffff0007

08007aa4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ab2:	4b53      	ldr	r3, [pc, #332]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d101      	bne.n	8007ac2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e099      	b.n	8007bf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ac2:	4b4f      	ldr	r3, [pc, #316]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a4e      	ldr	r2, [pc, #312]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ace:	f7fd fa39 	bl	8004f44 <HAL_GetTick>
 8007ad2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ad4:	e008      	b.n	8007ae8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ad6:	f7fd fa35 	bl	8004f44 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e086      	b.n	8007bf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ae8:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1f0      	bne.n	8007ad6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007af4:	4b42      	ldr	r3, [pc, #264]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	051b      	lsls	r3, r3, #20
 8007b02:	493f      	ldr	r1, [pc, #252]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	628b      	str	r3, [r1, #40]	; 0x28
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	025b      	lsls	r3, r3, #9
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	061b      	lsls	r3, r3, #24
 8007b34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b38:	4931      	ldr	r1, [pc, #196]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b3e:	4b30      	ldr	r3, [pc, #192]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	492d      	ldr	r1, [pc, #180]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b50:	4b2b      	ldr	r3, [pc, #172]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	4928      	ldr	r1, [pc, #160]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b6e:	4b24      	ldr	r3, [pc, #144]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b72:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <RCCEx_PLL3_Config+0x160>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	69d2      	ldr	r2, [r2, #28]
 8007b7a:	00d2      	lsls	r2, r2, #3
 8007b7c:	4920      	ldr	r1, [pc, #128]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b82:	4b1f      	ldr	r3, [pc, #124]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b86:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d106      	bne.n	8007ba2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b94:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007b9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba0:	e00f      	b.n	8007bc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d106      	bne.n	8007bb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ba8:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	4a14      	ldr	r2, [pc, #80]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007bae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bb4:	e005      	b.n	8007bc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	4a11      	ldr	r2, [pc, #68]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bce:	f7fd f9b9 	bl	8004f44 <HAL_GetTick>
 8007bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bd4:	e008      	b.n	8007be8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bd6:	f7fd f9b5 	bl	8004f44 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d901      	bls.n	8007be8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e006      	b.n	8007bf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <RCCEx_PLL3_Config+0x15c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0f0      	beq.n	8007bd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	58024400 	.word	0x58024400
 8007c04:	ffff0007 	.word	0xffff0007

08007c08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e10f      	b.n	8007e3a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a87      	ldr	r2, [pc, #540]	; (8007e44 <HAL_SPI_Init+0x23c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00f      	beq.n	8007c4a <HAL_SPI_Init+0x42>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a86      	ldr	r2, [pc, #536]	; (8007e48 <HAL_SPI_Init+0x240>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00a      	beq.n	8007c4a <HAL_SPI_Init+0x42>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a84      	ldr	r2, [pc, #528]	; (8007e4c <HAL_SPI_Init+0x244>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d005      	beq.n	8007c4a <HAL_SPI_Init+0x42>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b0f      	cmp	r3, #15
 8007c44:	d901      	bls.n	8007c4a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e0f7      	b.n	8007e3a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fef6 	bl	8008a3c <SPI_GetPacketSize>
 8007c50:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a7b      	ldr	r2, [pc, #492]	; (8007e44 <HAL_SPI_Init+0x23c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00c      	beq.n	8007c76 <HAL_SPI_Init+0x6e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a79      	ldr	r2, [pc, #484]	; (8007e48 <HAL_SPI_Init+0x240>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <HAL_SPI_Init+0x6e>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a78      	ldr	r2, [pc, #480]	; (8007e4c <HAL_SPI_Init+0x244>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d002      	beq.n	8007c76 <HAL_SPI_Init+0x6e>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b08      	cmp	r3, #8
 8007c74:	d811      	bhi.n	8007c9a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c7a:	4a72      	ldr	r2, [pc, #456]	; (8007e44 <HAL_SPI_Init+0x23c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d009      	beq.n	8007c94 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a70      	ldr	r2, [pc, #448]	; (8007e48 <HAL_SPI_Init+0x240>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d004      	beq.n	8007c94 <HAL_SPI_Init+0x8c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a6f      	ldr	r2, [pc, #444]	; (8007e4c <HAL_SPI_Init+0x244>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d104      	bne.n	8007c9e <HAL_SPI_Init+0x96>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d901      	bls.n	8007c9e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e0cd      	b.n	8007e3a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fc fb38 	bl	8004328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0201 	bic.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007cda:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ce4:	d119      	bne.n	8007d1a <HAL_SPI_Init+0x112>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cee:	d103      	bne.n	8007cf8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10c      	bne.n	8007d1a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d08:	d107      	bne.n	8007d1a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00f      	beq.n	8007d46 <HAL_SPI_Init+0x13e>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b06      	cmp	r3, #6
 8007d2c:	d90b      	bls.n	8007d46 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	e007      	b.n	8007d56 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69da      	ldr	r2, [r3, #28]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d68:	ea42 0103 	orr.w	r1, r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db6:	ea42 0103 	orr.w	r1, r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d113      	bne.n	8007df6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007df4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40013000 	.word	0x40013000
 8007e48:	40003800 	.word	0x40003800
 8007e4c:	40003c00 	.word	0x40003c00

08007e50 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3320      	adds	r3, #32
 8007e66:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e68:	f7fd f86c 	bl	8004f44 <HAL_GetTick>
 8007e6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d001      	beq.n	8007e7e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e1d1      	b.n	8008222 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_SPI_Transmit+0x3a>
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e1c9      	b.n	8008222 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_SPI_Transmit+0x4c>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e1c2      	b.n	8008222 <HAL_SPI_Transmit+0x3d2>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	88fa      	ldrh	r2, [r7, #6]
 8007ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	88fa      	ldrh	r2, [r7, #6]
 8007ec6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007ef4:	d108      	bne.n	8007f08 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e009      	b.n	8007f1c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f1a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	4b96      	ldr	r3, [pc, #600]	; (800817c <HAL_SPI_Transmit+0x32c>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	88f9      	ldrh	r1, [r7, #6]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f48:	d107      	bne.n	8007f5a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d947      	bls.n	8007ff2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f62:	e03f      	b.n	8007fe4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d114      	bne.n	8007f9c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f9a:	e023      	b.n	8007fe4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f9c:	f7fc ffd2 	bl	8004f44 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d803      	bhi.n	8007fb4 <HAL_SPI_Transmit+0x164>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d102      	bne.n	8007fba <HAL_SPI_Transmit+0x16a>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d114      	bne.n	8007fe4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 fc70 	bl	80088a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e11e      	b.n	8008222 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1b9      	bne.n	8007f64 <HAL_SPI_Transmit+0x114>
 8007ff0:	e0f1      	b.n	80081d6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b07      	cmp	r3, #7
 8007ff8:	f240 80e6 	bls.w	80081c8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ffc:	e05d      	b.n	80080ba <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b02      	cmp	r3, #2
 800800a:	d132      	bne.n	8008072 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008012:	b29b      	uxth	r3, r3
 8008014:	2b01      	cmp	r3, #1
 8008016:	d918      	bls.n	800804a <HAL_SPI_Transmit+0x1fa>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d014      	beq.n	800804a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008030:	1d1a      	adds	r2, r3, #4
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b02      	subs	r3, #2
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008048:	e037      	b.n	80080ba <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	881a      	ldrh	r2, [r3, #0]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008058:	1c9a      	adds	r2, r3, #2
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008064:	b29b      	uxth	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008070:	e023      	b.n	80080ba <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008072:	f7fc ff67 	bl	8004f44 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d803      	bhi.n	800808a <HAL_SPI_Transmit+0x23a>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d102      	bne.n	8008090 <HAL_SPI_Transmit+0x240>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d114      	bne.n	80080ba <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 fc05 	bl	80088a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800809c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e0b3      	b.n	8008222 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d19b      	bne.n	8007ffe <HAL_SPI_Transmit+0x1ae>
 80080c6:	e086      	b.n	80081d6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d154      	bne.n	8008180 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d918      	bls.n	8008114 <HAL_SPI_Transmit+0x2c4>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d914      	bls.n	8008114 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b04      	subs	r3, #4
 800810a:	b29a      	uxth	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008112:	e059      	b.n	80081c8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800811a:	b29b      	uxth	r3, r3
 800811c:	2b01      	cmp	r3, #1
 800811e:	d917      	bls.n	8008150 <HAL_SPI_Transmit+0x300>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008124:	2b00      	cmp	r3, #0
 8008126:	d013      	beq.n	8008150 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812c:	881a      	ldrh	r2, [r3, #0]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008136:	1c9a      	adds	r2, r3, #2
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b02      	subs	r3, #2
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800814e:	e03b      	b.n	80081c8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3320      	adds	r3, #32
 800815a:	7812      	ldrb	r2, [r2, #0]
 800815c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800817a:	e025      	b.n	80081c8 <HAL_SPI_Transmit+0x378>
 800817c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008180:	f7fc fee0 	bl	8004f44 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d803      	bhi.n	8008198 <HAL_SPI_Transmit+0x348>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008196:	d102      	bne.n	800819e <HAL_SPI_Transmit+0x34e>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d114      	bne.n	80081c8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fb7e 	bl	80088a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e02c      	b.n	8008222 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f47f af79 	bne.w	80080c8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2200      	movs	r2, #0
 80081de:	2108      	movs	r1, #8
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fbfd 	bl	80089e0 <SPI_WaitOnFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f2:	f043 0220 	orr.w	r2, r3, #32
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fb4f 	bl	80088a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008220:	2300      	movs	r3, #0
  }
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop

0800822c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08e      	sub	sp, #56	; 0x38
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3320      	adds	r3, #32
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3330      	adds	r3, #48	; 0x30
 8008248:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	b29b      	uxth	r3, r3
 8008252:	3301      	adds	r3, #1
 8008254:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008256:	f7fc fe75 	bl	8004f44 <HAL_GetTick>
 800825a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800825c:	887b      	ldrh	r3, [r7, #2]
 800825e:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8008260:	887b      	ldrh	r3, [r7, #2]
 8008262:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b01      	cmp	r3, #1
 800826e:	d001      	beq.n	8008274 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8008270:	2302      	movs	r3, #2
 8008272:	e310      	b.n	8008896 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d005      	beq.n	8008286 <HAL_SPI_TransmitReceive+0x5a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <HAL_SPI_TransmitReceive+0x5a>
 8008280:	887b      	ldrh	r3, [r7, #2]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e305      	b.n	8008896 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x6c>
 8008294:	2302      	movs	r3, #2
 8008296:	e2fe      	b.n	8008896 <HAL_SPI_TransmitReceive+0x66a>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2205      	movs	r2, #5
 80082a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	887a      	ldrh	r2, [r7, #2]
 80082ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	887a      	ldrh	r2, [r7, #2]
 80082c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	887a      	ldrh	r2, [r7, #2]
 80082d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	887a      	ldrh	r2, [r7, #2]
 80082d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80082f6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a70      	ldr	r2, [pc, #448]	; (80084c0 <HAL_SPI_TransmitReceive+0x294>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d009      	beq.n	8008316 <HAL_SPI_TransmitReceive+0xea>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a6f      	ldr	r2, [pc, #444]	; (80084c4 <HAL_SPI_TransmitReceive+0x298>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d004      	beq.n	8008316 <HAL_SPI_TransmitReceive+0xea>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a6d      	ldr	r2, [pc, #436]	; (80084c8 <HAL_SPI_TransmitReceive+0x29c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d102      	bne.n	800831c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008316:	2310      	movs	r3, #16
 8008318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831a:	e001      	b.n	8008320 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800831c:	2308      	movs	r3, #8
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	4b69      	ldr	r3, [pc, #420]	; (80084cc <HAL_SPI_TransmitReceive+0x2a0>)
 8008328:	4013      	ands	r3, r2
 800832a:	8879      	ldrh	r1, [r7, #2]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	430b      	orrs	r3, r1
 8008332:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800834c:	d107      	bne.n	800835e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800835c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b0f      	cmp	r3, #15
 8008364:	f240 80a2 	bls.w	80084ac <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	089b      	lsrs	r3, r3, #2
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800836e:	e094      	b.n	800849a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b02      	cmp	r3, #2
 800837c:	d120      	bne.n	80083c0 <HAL_SPI_TransmitReceive+0x194>
 800837e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008380:	2b00      	cmp	r3, #0
 8008382:	d01d      	beq.n	80083c0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008384:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008386:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800838c:	429a      	cmp	r2, r3
 800838e:	d217      	bcs.n	80083c0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a0:	1d1a      	adds	r2, r3, #4
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083be:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80083c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d065      	beq.n	800849a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d118      	bne.n	800840e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80083e6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ec:	1d1a      	adds	r2, r3, #4
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800840a:	853b      	strh	r3, [r7, #40]	; 0x28
 800840c:	e045      	b.n	800849a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800840e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008410:	8bfb      	ldrh	r3, [r7, #30]
 8008412:	429a      	cmp	r2, r3
 8008414:	d21d      	bcs.n	8008452 <HAL_SPI_TransmitReceive+0x226>
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d018      	beq.n	8008452 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008428:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800842a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008430:	1d1a      	adds	r2, r3, #4
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800844e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008450:	e023      	b.n	800849a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008452:	f7fc fd77 	bl	8004f44 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800845e:	429a      	cmp	r2, r3
 8008460:	d803      	bhi.n	800846a <HAL_SPI_TransmitReceive+0x23e>
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d102      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x244>
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	d114      	bne.n	800849a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fa15 	bl	80088a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800847c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e1fd      	b.n	8008896 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800849a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800849c:	2b00      	cmp	r3, #0
 800849e:	f47f af67 	bne.w	8008370 <HAL_SPI_TransmitReceive+0x144>
 80084a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f47f af63 	bne.w	8008370 <HAL_SPI_TransmitReceive+0x144>
 80084aa:	e1ce      	b.n	800884a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b07      	cmp	r3, #7
 80084b2:	f240 81c2 	bls.w	800883a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80084bc:	e0c9      	b.n	8008652 <HAL_SPI_TransmitReceive+0x426>
 80084be:	bf00      	nop
 80084c0:	40013000 	.word	0x40013000
 80084c4:	40003800 	.word	0x40003800
 80084c8:	40003c00 	.word	0x40003c00
 80084cc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d11f      	bne.n	800851e <HAL_SPI_TransmitReceive+0x2f2>
 80084de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01c      	beq.n	800851e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80084e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80084e6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d216      	bcs.n	800851e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f4:	881a      	ldrh	r2, [r3, #0]
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800851c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008526:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8092 	beq.w	8008652 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b01      	cmp	r3, #1
 800853a:	d118      	bne.n	800856e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008540:	6a3a      	ldr	r2, [r7, #32]
 8008542:	8812      	ldrh	r2, [r2, #0]
 8008544:	b292      	uxth	r2, r2
 8008546:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800854c:	1c9a      	adds	r2, r3, #2
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008558:	b29b      	uxth	r3, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800856a:	853b      	strh	r3, [r7, #40]	; 0x28
 800856c:	e071      	b.n	8008652 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800856e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008570:	8bfb      	ldrh	r3, [r7, #30]
 8008572:	429a      	cmp	r2, r3
 8008574:	d228      	bcs.n	80085c8 <HAL_SPI_TransmitReceive+0x39c>
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d023      	beq.n	80085c8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008584:	6a3a      	ldr	r2, [r7, #32]
 8008586:	8812      	ldrh	r2, [r2, #0]
 8008588:	b292      	uxth	r2, r2
 800858a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008590:	1c9a      	adds	r2, r3, #2
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800859a:	6a3a      	ldr	r2, [r7, #32]
 800859c:	8812      	ldrh	r2, [r2, #0]
 800859e:	b292      	uxth	r2, r2
 80085a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a6:	1c9a      	adds	r2, r3, #2
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3b02      	subs	r3, #2
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80085c6:	e044      	b.n	8008652 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80085c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d11d      	bne.n	800860a <HAL_SPI_TransmitReceive+0x3de>
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d018      	beq.n	800860a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085dc:	6a3a      	ldr	r2, [r7, #32]
 80085de:	8812      	ldrh	r2, [r2, #0]
 80085e0:	b292      	uxth	r2, r2
 80085e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e8:	1c9a      	adds	r2, r3, #2
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008606:	853b      	strh	r3, [r7, #40]	; 0x28
 8008608:	e023      	b.n	8008652 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800860a:	f7fc fc9b 	bl	8004f44 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008616:	429a      	cmp	r2, r3
 8008618:	d803      	bhi.n	8008622 <HAL_SPI_TransmitReceive+0x3f6>
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d102      	bne.n	8008628 <HAL_SPI_TransmitReceive+0x3fc>
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	2b00      	cmp	r3, #0
 8008626:	d114      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 f939 	bl	80088a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008634:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e121      	b.n	8008896 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008652:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008654:	2b00      	cmp	r3, #0
 8008656:	f47f af3b 	bne.w	80084d0 <HAL_SPI_TransmitReceive+0x2a4>
 800865a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	f47f af37 	bne.w	80084d0 <HAL_SPI_TransmitReceive+0x2a4>
 8008662:	e0f2      	b.n	800884a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b02      	cmp	r3, #2
 8008670:	d121      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x48a>
 8008672:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01e      	beq.n	80086b6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008678:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800867a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008680:	429a      	cmp	r2, r3
 8008682:	d218      	bcs.n	80086b6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3320      	adds	r3, #32
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086b4:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80086be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80ba 	beq.w	800883a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d11b      	bne.n	800870c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008708:	853b      	strh	r3, [r7, #40]	; 0x28
 800870a:	e096      	b.n	800883a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800870c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800870e:	8bfb      	ldrh	r3, [r7, #30]
 8008710:	429a      	cmp	r2, r3
 8008712:	d24a      	bcs.n	80087aa <HAL_SPI_TransmitReceive+0x57e>
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d045      	beq.n	80087aa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872a:	7812      	ldrb	r2, [r2, #0]
 800872c:	b2d2      	uxtb	r2, r2
 800872e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877e:	7812      	ldrb	r2, [r2, #0]
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008794:	b29b      	uxth	r3, r3
 8008796:	3b04      	subs	r3, #4
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80087a8:	e047      	b.n	800883a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80087aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d820      	bhi.n	80087f2 <HAL_SPI_TransmitReceive+0x5c6>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01b      	beq.n	80087f2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087c6:	7812      	ldrb	r2, [r2, #0]
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80087f0:	e023      	b.n	800883a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087f2:	f7fc fba7 	bl	8004f44 <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087fe:	429a      	cmp	r2, r3
 8008800:	d803      	bhi.n	800880a <HAL_SPI_TransmitReceive+0x5de>
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d102      	bne.n	8008810 <HAL_SPI_TransmitReceive+0x5e4>
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d114      	bne.n	800883a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f845 	bl	80088a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800881c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e02d      	b.n	8008896 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800883a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800883c:	2b00      	cmp	r3, #0
 800883e:	f47f af11 	bne.w	8008664 <HAL_SPI_TransmitReceive+0x438>
 8008842:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008844:	2b00      	cmp	r3, #0
 8008846:	f47f af0d 	bne.w	8008664 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	2200      	movs	r2, #0
 8008852:	2108      	movs	r1, #8
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 f8c3 	bl	80089e0 <SPI_WaitOnFlagUntilTimeout>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008866:	f043 0220 	orr.w	r2, r3, #32
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f815 	bl	80088a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008894:	2300      	movs	r3, #0
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3730      	adds	r7, #48	; 0x30
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop

080088a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0208 	orr.w	r2, r2, #8
 80088be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0210 	orr.w	r2, r2, #16
 80088ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0201 	bic.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6919      	ldr	r1, [r3, #16]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	4b3c      	ldr	r3, [pc, #240]	; (80089dc <SPI_CloseTransfer+0x13c>)
 80088ec:	400b      	ands	r3, r1
 80088ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80088fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b04      	cmp	r3, #4
 800890a:	d014      	beq.n	8008936 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00f      	beq.n	8008936 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	699a      	ldr	r2, [r3, #24]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0220 	orr.w	r2, r2, #32
 8008934:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b03      	cmp	r3, #3
 8008940:	d014      	beq.n	800896c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00f      	beq.n	800896c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008952:	f043 0204 	orr.w	r2, r3, #4
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00f      	beq.n	8008996 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800897c:	f043 0201 	orr.w	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699a      	ldr	r2, [r3, #24]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008994:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00f      	beq.n	80089c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089a6:	f043 0208 	orr.w	r2, r3, #8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80089d0:	bf00      	nop
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	fffffc90 	.word	0xfffffc90

080089e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	4613      	mov	r3, r2
 80089ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80089f0:	e010      	b.n	8008a14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f2:	f7fc faa7 	bl	8004f44 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d803      	bhi.n	8008a0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a08:	d102      	bne.n	8008a10 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e00f      	b.n	8008a34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695a      	ldr	r2, [r3, #20]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d0df      	beq.n	80089f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a48:	095b      	lsrs	r3, r3, #5
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	3301      	adds	r3, #1
 8008a54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3307      	adds	r3, #7
 8008a5a:	08db      	lsrs	r3, r3, #3
 8008a5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e049      	b.n	8008b18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7fb ffff 	bl	8004a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f000 fc57 	bl	8009364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d001      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e054      	b.n	8008be2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a26      	ldr	r2, [pc, #152]	; (8008bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d022      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x80>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b62:	d01d      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x80>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a22      	ldr	r2, [pc, #136]	; (8008bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d018      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x80>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a21      	ldr	r2, [pc, #132]	; (8008bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d013      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x80>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a1f      	ldr	r2, [pc, #124]	; (8008bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00e      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x80>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a1e      	ldr	r2, [pc, #120]	; (8008c00 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d009      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x80>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1c      	ldr	r2, [pc, #112]	; (8008c04 <HAL_TIM_Base_Start_IT+0xe4>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d004      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x80>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a1b      	ldr	r2, [pc, #108]	; (8008c08 <HAL_TIM_Base_Start_IT+0xe8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d115      	bne.n	8008bcc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <HAL_TIM_Base_Start_IT+0xec>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b06      	cmp	r3, #6
 8008bb0:	d015      	beq.n	8008bde <HAL_TIM_Base_Start_IT+0xbe>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb8:	d011      	beq.n	8008bde <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0201 	orr.w	r2, r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bca:	e008      	b.n	8008bde <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0201 	orr.w	r2, r2, #1
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e000      	b.n	8008be0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40000400 	.word	0x40000400
 8008bf8:	40000800 	.word	0x40000800
 8008bfc:	40000c00 	.word	0x40000c00
 8008c00:	40010400 	.word	0x40010400
 8008c04:	40001800 	.word	0x40001800
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	00010007 	.word	0x00010007

08008c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e049      	b.n	8008cb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fb ff0e 	bl	8004a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	f000 fb88 	bl	8009364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d109      	bne.n	8008ce4 <HAL_TIM_PWM_Start+0x24>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	bf14      	ite	ne
 8008cdc:	2301      	movne	r3, #1
 8008cde:	2300      	moveq	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	e03c      	b.n	8008d5e <HAL_TIM_PWM_Start+0x9e>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d109      	bne.n	8008cfe <HAL_TIM_PWM_Start+0x3e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	bf14      	ite	ne
 8008cf6:	2301      	movne	r3, #1
 8008cf8:	2300      	moveq	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	e02f      	b.n	8008d5e <HAL_TIM_PWM_Start+0x9e>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d109      	bne.n	8008d18 <HAL_TIM_PWM_Start+0x58>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	bf14      	ite	ne
 8008d10:	2301      	movne	r3, #1
 8008d12:	2300      	moveq	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	e022      	b.n	8008d5e <HAL_TIM_PWM_Start+0x9e>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b0c      	cmp	r3, #12
 8008d1c:	d109      	bne.n	8008d32 <HAL_TIM_PWM_Start+0x72>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	bf14      	ite	ne
 8008d2a:	2301      	movne	r3, #1
 8008d2c:	2300      	moveq	r3, #0
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	e015      	b.n	8008d5e <HAL_TIM_PWM_Start+0x9e>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b10      	cmp	r3, #16
 8008d36:	d109      	bne.n	8008d4c <HAL_TIM_PWM_Start+0x8c>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	bf14      	ite	ne
 8008d44:	2301      	movne	r3, #1
 8008d46:	2300      	moveq	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	e008      	b.n	8008d5e <HAL_TIM_PWM_Start+0x9e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	bf14      	ite	ne
 8008d58:	2301      	movne	r3, #1
 8008d5a:	2300      	moveq	r3, #0
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e0a1      	b.n	8008eaa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <HAL_TIM_PWM_Start+0xb6>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d74:	e023      	b.n	8008dbe <HAL_TIM_PWM_Start+0xfe>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_PWM_Start+0xc6>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d84:	e01b      	b.n	8008dbe <HAL_TIM_PWM_Start+0xfe>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d104      	bne.n	8008d96 <HAL_TIM_PWM_Start+0xd6>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d94:	e013      	b.n	8008dbe <HAL_TIM_PWM_Start+0xfe>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b0c      	cmp	r3, #12
 8008d9a:	d104      	bne.n	8008da6 <HAL_TIM_PWM_Start+0xe6>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008da4:	e00b      	b.n	8008dbe <HAL_TIM_PWM_Start+0xfe>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b10      	cmp	r3, #16
 8008daa:	d104      	bne.n	8008db6 <HAL_TIM_PWM_Start+0xf6>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008db4:	e003      	b.n	8008dbe <HAL_TIM_PWM_Start+0xfe>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2202      	movs	r2, #2
 8008dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fe48 	bl	8009a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a38      	ldr	r2, [pc, #224]	; (8008eb4 <HAL_TIM_PWM_Start+0x1f4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x13e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a37      	ldr	r2, [pc, #220]	; (8008eb8 <HAL_TIM_PWM_Start+0x1f8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00e      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x13e>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a35      	ldr	r2, [pc, #212]	; (8008ebc <HAL_TIM_PWM_Start+0x1fc>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d009      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x13e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a34      	ldr	r2, [pc, #208]	; (8008ec0 <HAL_TIM_PWM_Start+0x200>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d004      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x13e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a32      	ldr	r2, [pc, #200]	; (8008ec4 <HAL_TIM_PWM_Start+0x204>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d101      	bne.n	8008e02 <HAL_TIM_PWM_Start+0x142>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <HAL_TIM_PWM_Start+0x144>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a25      	ldr	r2, [pc, #148]	; (8008eb4 <HAL_TIM_PWM_Start+0x1f4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d022      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x1a8>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2a:	d01d      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x1a8>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a25      	ldr	r2, [pc, #148]	; (8008ec8 <HAL_TIM_PWM_Start+0x208>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d018      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x1a8>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a24      	ldr	r2, [pc, #144]	; (8008ecc <HAL_TIM_PWM_Start+0x20c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d013      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x1a8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a22      	ldr	r2, [pc, #136]	; (8008ed0 <HAL_TIM_PWM_Start+0x210>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00e      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x1a8>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a1a      	ldr	r2, [pc, #104]	; (8008eb8 <HAL_TIM_PWM_Start+0x1f8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d009      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x1a8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a1e      	ldr	r2, [pc, #120]	; (8008ed4 <HAL_TIM_PWM_Start+0x214>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_TIM_PWM_Start+0x1a8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a16      	ldr	r2, [pc, #88]	; (8008ebc <HAL_TIM_PWM_Start+0x1fc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d115      	bne.n	8008e94 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	4b1a      	ldr	r3, [pc, #104]	; (8008ed8 <HAL_TIM_PWM_Start+0x218>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b06      	cmp	r3, #6
 8008e78:	d015      	beq.n	8008ea6 <HAL_TIM_PWM_Start+0x1e6>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e80:	d011      	beq.n	8008ea6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f042 0201 	orr.w	r2, r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e92:	e008      	b.n	8008ea6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f042 0201 	orr.w	r2, r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e000      	b.n	8008ea8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	40010000 	.word	0x40010000
 8008eb8:	40010400 	.word	0x40010400
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	40014400 	.word	0x40014400
 8008ec4:	40014800 	.word	0x40014800
 8008ec8:	40000400 	.word	0x40000400
 8008ecc:	40000800 	.word	0x40000800
 8008ed0:	40000c00 	.word	0x40000c00
 8008ed4:	40001800 	.word	0x40001800
 8008ed8:	00010007 	.word	0x00010007

08008edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d020      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01b      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0202 	mvn.w	r2, #2
 8008f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f9fe 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008f2c:	e005      	b.n	8008f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f9f0 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa01 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d020      	beq.n	8008f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01b      	beq.n	8008f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0204 	mvn.w	r2, #4
 8008f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2202      	movs	r2, #2
 8008f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f9d8 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008f78:	e005      	b.n	8008f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f9ca 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9db 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d020      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01b      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f06f 0208 	mvn.w	r2, #8
 8008fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2204      	movs	r2, #4
 8008fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	f003 0303 	and.w	r3, r3, #3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9b2 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008fc4:	e005      	b.n	8008fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9a4 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f9b5 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0310 	and.w	r3, r3, #16
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d020      	beq.n	8009024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01b      	beq.n	8009024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0210 	mvn.w	r2, #16
 8008ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f98c 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f97e 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f98f 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00c      	beq.n	8009048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d007      	beq.n	8009048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f06f 0201 	mvn.w	r2, #1
 8009040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7fa fe3c 	bl	8003cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00c      	beq.n	8009076 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800906e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fe2f 	bl	8009cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00c      	beq.n	800909a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fe27 	bl	8009ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00c      	beq.n	80090be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d007      	beq.n	80090be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f949 	bl	8009350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00c      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f06f 0220 	mvn.w	r2, #32
 80090da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fdef 	bl	8009cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009106:	2302      	movs	r3, #2
 8009108:	e0ff      	b.n	800930a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b14      	cmp	r3, #20
 8009116:	f200 80f0 	bhi.w	80092fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009175 	.word	0x08009175
 8009124:	080092fb 	.word	0x080092fb
 8009128:	080092fb 	.word	0x080092fb
 800912c:	080092fb 	.word	0x080092fb
 8009130:	080091b5 	.word	0x080091b5
 8009134:	080092fb 	.word	0x080092fb
 8009138:	080092fb 	.word	0x080092fb
 800913c:	080092fb 	.word	0x080092fb
 8009140:	080091f7 	.word	0x080091f7
 8009144:	080092fb 	.word	0x080092fb
 8009148:	080092fb 	.word	0x080092fb
 800914c:	080092fb 	.word	0x080092fb
 8009150:	08009237 	.word	0x08009237
 8009154:	080092fb 	.word	0x080092fb
 8009158:	080092fb 	.word	0x080092fb
 800915c:	080092fb 	.word	0x080092fb
 8009160:	08009279 	.word	0x08009279
 8009164:	080092fb 	.word	0x080092fb
 8009168:	080092fb 	.word	0x080092fb
 800916c:	080092fb 	.word	0x080092fb
 8009170:	080092b9 	.word	0x080092b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	4618      	mov	r0, r3
 800917c:	f000 f998 	bl	80094b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0208 	orr.w	r2, r2, #8
 800918e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699a      	ldr	r2, [r3, #24]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0204 	bic.w	r2, r2, #4
 800919e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6999      	ldr	r1, [r3, #24]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	691a      	ldr	r2, [r3, #16]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	619a      	str	r2, [r3, #24]
      break;
 80091b2:	e0a5      	b.n	8009300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fa08 	bl	80095d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699a      	ldr	r2, [r3, #24]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6999      	ldr	r1, [r3, #24]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	021a      	lsls	r2, r3, #8
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	619a      	str	r2, [r3, #24]
      break;
 80091f4:	e084      	b.n	8009300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fa71 	bl	80096e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69da      	ldr	r2, [r3, #28]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0208 	orr.w	r2, r2, #8
 8009210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69da      	ldr	r2, [r3, #28]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0204 	bic.w	r2, r2, #4
 8009220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69d9      	ldr	r1, [r3, #28]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	61da      	str	r2, [r3, #28]
      break;
 8009234:	e064      	b.n	8009300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	4618      	mov	r0, r3
 800923e:	f000 fad9 	bl	80097f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69da      	ldr	r2, [r3, #28]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69da      	ldr	r2, [r3, #28]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69d9      	ldr	r1, [r3, #28]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	021a      	lsls	r2, r3, #8
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	61da      	str	r2, [r3, #28]
      break;
 8009276:	e043      	b.n	8009300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fb22 	bl	80098c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0208 	orr.w	r2, r2, #8
 8009292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0204 	bic.w	r2, r2, #4
 80092a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	691a      	ldr	r2, [r3, #16]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092b6:	e023      	b.n	8009300 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68b9      	ldr	r1, [r7, #8]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fb66 	bl	8009990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	021a      	lsls	r2, r3, #8
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092f8:	e002      	b.n	8009300 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	75fb      	strb	r3, [r7, #23]
      break;
 80092fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop

08009314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a46      	ldr	r2, [pc, #280]	; (8009490 <TIM_Base_SetConfig+0x12c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d013      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009382:	d00f      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a43      	ldr	r2, [pc, #268]	; (8009494 <TIM_Base_SetConfig+0x130>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00b      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a42      	ldr	r2, [pc, #264]	; (8009498 <TIM_Base_SetConfig+0x134>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d007      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a41      	ldr	r2, [pc, #260]	; (800949c <TIM_Base_SetConfig+0x138>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d003      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a40      	ldr	r2, [pc, #256]	; (80094a0 <TIM_Base_SetConfig+0x13c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d108      	bne.n	80093b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a35      	ldr	r2, [pc, #212]	; (8009490 <TIM_Base_SetConfig+0x12c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d01f      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c4:	d01b      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a32      	ldr	r2, [pc, #200]	; (8009494 <TIM_Base_SetConfig+0x130>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d017      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a31      	ldr	r2, [pc, #196]	; (8009498 <TIM_Base_SetConfig+0x134>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a30      	ldr	r2, [pc, #192]	; (800949c <TIM_Base_SetConfig+0x138>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00f      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a2f      	ldr	r2, [pc, #188]	; (80094a0 <TIM_Base_SetConfig+0x13c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00b      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a2e      	ldr	r2, [pc, #184]	; (80094a4 <TIM_Base_SetConfig+0x140>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d007      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a2d      	ldr	r2, [pc, #180]	; (80094a8 <TIM_Base_SetConfig+0x144>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a2c      	ldr	r2, [pc, #176]	; (80094ac <TIM_Base_SetConfig+0x148>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d108      	bne.n	8009410 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a16      	ldr	r2, [pc, #88]	; (8009490 <TIM_Base_SetConfig+0x12c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00f      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a18      	ldr	r2, [pc, #96]	; (80094a0 <TIM_Base_SetConfig+0x13c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00b      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a17      	ldr	r2, [pc, #92]	; (80094a4 <TIM_Base_SetConfig+0x140>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d007      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a16      	ldr	r2, [pc, #88]	; (80094a8 <TIM_Base_SetConfig+0x144>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d003      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a15      	ldr	r2, [pc, #84]	; (80094ac <TIM_Base_SetConfig+0x148>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d103      	bne.n	8009464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b01      	cmp	r3, #1
 8009474:	d105      	bne.n	8009482 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f023 0201 	bic.w	r2, r3, #1
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	611a      	str	r2, [r3, #16]
  }
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	40010000 	.word	0x40010000
 8009494:	40000400 	.word	0x40000400
 8009498:	40000800 	.word	0x40000800
 800949c:	40000c00 	.word	0x40000c00
 80094a0:	40010400 	.word	0x40010400
 80094a4:	40014000 	.word	0x40014000
 80094a8:	40014400 	.word	0x40014400
 80094ac:	40014800 	.word	0x40014800

080094b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	f023 0201 	bic.w	r2, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	4b37      	ldr	r3, [pc, #220]	; (80095b8 <TIM_OC1_SetConfig+0x108>)
 80094dc:	4013      	ands	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0303 	bic.w	r3, r3, #3
 80094e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f023 0302 	bic.w	r3, r3, #2
 80094f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4313      	orrs	r3, r2
 8009502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a2d      	ldr	r2, [pc, #180]	; (80095bc <TIM_OC1_SetConfig+0x10c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00f      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a2c      	ldr	r2, [pc, #176]	; (80095c0 <TIM_OC1_SetConfig+0x110>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d00b      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a2b      	ldr	r2, [pc, #172]	; (80095c4 <TIM_OC1_SetConfig+0x114>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d007      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a2a      	ldr	r2, [pc, #168]	; (80095c8 <TIM_OC1_SetConfig+0x118>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_OC1_SetConfig+0x7c>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a29      	ldr	r2, [pc, #164]	; (80095cc <TIM_OC1_SetConfig+0x11c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d10c      	bne.n	8009546 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0308 	bic.w	r3, r3, #8
 8009532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f023 0304 	bic.w	r3, r3, #4
 8009544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a1c      	ldr	r2, [pc, #112]	; (80095bc <TIM_OC1_SetConfig+0x10c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00f      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <TIM_OC1_SetConfig+0x110>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00b      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a1a      	ldr	r2, [pc, #104]	; (80095c4 <TIM_OC1_SetConfig+0x114>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d007      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a19      	ldr	r2, [pc, #100]	; (80095c8 <TIM_OC1_SetConfig+0x118>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_OC1_SetConfig+0xbe>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a18      	ldr	r2, [pc, #96]	; (80095cc <TIM_OC1_SetConfig+0x11c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d111      	bne.n	8009592 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800957c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4313      	orrs	r3, r2
 8009586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	4313      	orrs	r3, r2
 8009590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	621a      	str	r2, [r3, #32]
}
 80095ac:	bf00      	nop
 80095ae:	371c      	adds	r7, #28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	fffeff8f 	.word	0xfffeff8f
 80095bc:	40010000 	.word	0x40010000
 80095c0:	40010400 	.word	0x40010400
 80095c4:	40014000 	.word	0x40014000
 80095c8:	40014400 	.word	0x40014400
 80095cc:	40014800 	.word	0x40014800

080095d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f023 0210 	bic.w	r2, r3, #16
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4b34      	ldr	r3, [pc, #208]	; (80096cc <TIM_OC2_SetConfig+0xfc>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f023 0320 	bic.w	r3, r3, #32
 800961a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a29      	ldr	r2, [pc, #164]	; (80096d0 <TIM_OC2_SetConfig+0x100>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d003      	beq.n	8009638 <TIM_OC2_SetConfig+0x68>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a28      	ldr	r2, [pc, #160]	; (80096d4 <TIM_OC2_SetConfig+0x104>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d10d      	bne.n	8009654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800963e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	4313      	orrs	r3, r2
 800964a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a1e      	ldr	r2, [pc, #120]	; (80096d0 <TIM_OC2_SetConfig+0x100>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d00f      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <TIM_OC2_SetConfig+0x104>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d00b      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a1c      	ldr	r2, [pc, #112]	; (80096d8 <TIM_OC2_SetConfig+0x108>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d007      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a1b      	ldr	r2, [pc, #108]	; (80096dc <TIM_OC2_SetConfig+0x10c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d003      	beq.n	800967c <TIM_OC2_SetConfig+0xac>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a1a      	ldr	r2, [pc, #104]	; (80096e0 <TIM_OC2_SetConfig+0x110>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d113      	bne.n	80096a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800968a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	621a      	str	r2, [r3, #32]
}
 80096be:	bf00      	nop
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	feff8fff 	.word	0xfeff8fff
 80096d0:	40010000 	.word	0x40010000
 80096d4:	40010400 	.word	0x40010400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40014400 	.word	0x40014400
 80096e0:	40014800 	.word	0x40014800

080096e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4b33      	ldr	r3, [pc, #204]	; (80097dc <TIM_OC3_SetConfig+0xf8>)
 8009710:	4013      	ands	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 0303 	bic.w	r3, r3, #3
 800971a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800972c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	021b      	lsls	r3, r3, #8
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <TIM_OC3_SetConfig+0xfc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d003      	beq.n	800974a <TIM_OC3_SetConfig+0x66>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a27      	ldr	r2, [pc, #156]	; (80097e4 <TIM_OC3_SetConfig+0x100>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d10d      	bne.n	8009766 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	021b      	lsls	r3, r3, #8
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a1d      	ldr	r2, [pc, #116]	; (80097e0 <TIM_OC3_SetConfig+0xfc>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a1c      	ldr	r2, [pc, #112]	; (80097e4 <TIM_OC3_SetConfig+0x100>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a1b      	ldr	r2, [pc, #108]	; (80097e8 <TIM_OC3_SetConfig+0x104>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a1a      	ldr	r2, [pc, #104]	; (80097ec <TIM_OC3_SetConfig+0x108>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_OC3_SetConfig+0xaa>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a19      	ldr	r2, [pc, #100]	; (80097f0 <TIM_OC3_SetConfig+0x10c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d113      	bne.n	80097b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800979c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	621a      	str	r2, [r3, #32]
}
 80097d0:	bf00      	nop
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	fffeff8f 	.word	0xfffeff8f
 80097e0:	40010000 	.word	0x40010000
 80097e4:	40010400 	.word	0x40010400
 80097e8:	40014000 	.word	0x40014000
 80097ec:	40014400 	.word	0x40014400
 80097f0:	40014800 	.word	0x40014800

080097f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4b24      	ldr	r3, [pc, #144]	; (80098b0 <TIM_OC4_SetConfig+0xbc>)
 8009820:	4013      	ands	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800982a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4313      	orrs	r3, r2
 8009836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800983e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	031b      	lsls	r3, r3, #12
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a19      	ldr	r2, [pc, #100]	; (80098b4 <TIM_OC4_SetConfig+0xc0>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00f      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a18      	ldr	r2, [pc, #96]	; (80098b8 <TIM_OC4_SetConfig+0xc4>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00b      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a17      	ldr	r2, [pc, #92]	; (80098bc <TIM_OC4_SetConfig+0xc8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a16      	ldr	r2, [pc, #88]	; (80098c0 <TIM_OC4_SetConfig+0xcc>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_OC4_SetConfig+0x80>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a15      	ldr	r2, [pc, #84]	; (80098c4 <TIM_OC4_SetConfig+0xd0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d109      	bne.n	8009888 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800987a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	019b      	lsls	r3, r3, #6
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	feff8fff 	.word	0xfeff8fff
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40010400 	.word	0x40010400
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40014400 	.word	0x40014400
 80098c4:	40014800 	.word	0x40014800

080098c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4b21      	ldr	r3, [pc, #132]	; (8009978 <TIM_OC5_SetConfig+0xb0>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	041b      	lsls	r3, r3, #16
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a18      	ldr	r2, [pc, #96]	; (800997c <TIM_OC5_SetConfig+0xb4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00f      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a17      	ldr	r2, [pc, #92]	; (8009980 <TIM_OC5_SetConfig+0xb8>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00b      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a16      	ldr	r2, [pc, #88]	; (8009984 <TIM_OC5_SetConfig+0xbc>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d007      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a15      	ldr	r2, [pc, #84]	; (8009988 <TIM_OC5_SetConfig+0xc0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d003      	beq.n	800993e <TIM_OC5_SetConfig+0x76>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a14      	ldr	r2, [pc, #80]	; (800998c <TIM_OC5_SetConfig+0xc4>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d109      	bne.n	8009952 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	021b      	lsls	r3, r3, #8
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	621a      	str	r2, [r3, #32]
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	fffeff8f 	.word	0xfffeff8f
 800997c:	40010000 	.word	0x40010000
 8009980:	40010400 	.word	0x40010400
 8009984:	40014000 	.word	0x40014000
 8009988:	40014400 	.word	0x40014400
 800998c:	40014800 	.word	0x40014800

08009990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <TIM_OC6_SetConfig+0xb4>)
 80099bc:	4013      	ands	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	021b      	lsls	r3, r3, #8
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	051b      	lsls	r3, r3, #20
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	4313      	orrs	r3, r2
 80099de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a19      	ldr	r2, [pc, #100]	; (8009a48 <TIM_OC6_SetConfig+0xb8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00f      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a18      	ldr	r2, [pc, #96]	; (8009a4c <TIM_OC6_SetConfig+0xbc>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00b      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <TIM_OC6_SetConfig+0xc0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d007      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a16      	ldr	r2, [pc, #88]	; (8009a54 <TIM_OC6_SetConfig+0xc4>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_OC6_SetConfig+0x78>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <TIM_OC6_SetConfig+0xc8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d109      	bne.n	8009a1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	029b      	lsls	r3, r3, #10
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	621a      	str	r2, [r3, #32]
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	feff8fff 	.word	0xfeff8fff
 8009a48:	40010000 	.word	0x40010000
 8009a4c:	40010400 	.word	0x40010400
 8009a50:	40014000 	.word	0x40014000
 8009a54:	40014400 	.word	0x40014400
 8009a58:	40014800 	.word	0x40014800

08009a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f003 031f 	and.w	r3, r3, #31
 8009a6e:	2201      	movs	r2, #1
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a1a      	ldr	r2, [r3, #32]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	43db      	mvns	r3, r3
 8009a7e:	401a      	ands	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6a1a      	ldr	r2, [r3, #32]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f003 031f 	and.w	r3, r3, #31
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	fa01 f303 	lsl.w	r3, r1, r3
 8009a94:	431a      	orrs	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	621a      	str	r2, [r3, #32]
}
 8009a9a:	bf00      	nop
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
	...

08009aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d101      	bne.n	8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009abc:	2302      	movs	r3, #2
 8009abe:	e06d      	b.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a30      	ldr	r2, [pc, #192]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d004      	beq.n	8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a2f      	ldr	r2, [pc, #188]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d108      	bne.n	8009b06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009afa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a20      	ldr	r2, [pc, #128]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d022      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b32:	d01d      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a1d      	ldr	r2, [pc, #116]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d018      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a1c      	ldr	r2, [pc, #112]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d013      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1a      	ldr	r2, [pc, #104]	; (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d00e      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a15      	ldr	r2, [pc, #84]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d009      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a16      	ldr	r2, [pc, #88]	; (8009bbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a15      	ldr	r2, [pc, #84]	; (8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10c      	bne.n	8009b8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	40010000 	.word	0x40010000
 8009bac:	40010400 	.word	0x40010400
 8009bb0:	40000400 	.word	0x40000400
 8009bb4:	40000800 	.word	0x40000800
 8009bb8:	40000c00 	.word	0x40000c00
 8009bbc:	40001800 	.word	0x40001800
 8009bc0:	40014000 	.word	0x40014000

08009bc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e065      	b.n	8009cac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	041b      	lsls	r3, r3, #16
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a16      	ldr	r2, [pc, #88]	; (8009cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d004      	beq.n	8009c6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a14      	ldr	r2, [pc, #80]	; (8009cbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d115      	bne.n	8009c9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	051b      	lsls	r3, r3, #20
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	40010400 	.word	0x40010400

08009cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009d00:	4904      	ldr	r1, [pc, #16]	; (8009d14 <MX_FATFS_Init+0x18>)
 8009d02:	4805      	ldr	r0, [pc, #20]	; (8009d18 <MX_FATFS_Init+0x1c>)
 8009d04:	f003 f8c4 	bl	800ce90 <FATFS_LinkDriver>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <MX_FATFS_Init+0x20>)
 8009d0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009d10:	bf00      	nop
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	24002448 	.word	0x24002448
 8009d18:	2400001c 	.word	0x2400001c
 8009d1c:	24002444 	.word	0x24002444

08009d20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009d24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7f9 f8cd 	bl	8002edc <SD_disk_initialize>
 8009d42:	4603      	mov	r3, r0
 8009d44:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	4603      	mov	r3, r0
 8009d56:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7f9 f9aa 	bl	80030b4 <SD_disk_status>
 8009d60:	4603      	mov	r3, r0
 8009d62:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009d7c:	7bf8      	ldrb	r0, [r7, #15]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	f7f9 f9ac 	bl	80030e0 <SD_disk_read>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	607a      	str	r2, [r7, #4]
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009da4:	7bf8      	ldrb	r0, [r7, #15]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	f7f9 fa02 	bl	80031b4 <SD_disk_write>
 8009db0:	4603      	mov	r3, r0
 8009db2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	603a      	str	r2, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl( pdrv, cmd, buff );
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	79b9      	ldrb	r1, [r7, #6]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7f9 fa72 	bl	80032bc <SD_disk_ioctl>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <disk_status+0x30>)
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	79fa      	ldrb	r2, [r7, #7]
 8009dfc:	4905      	ldr	r1, [pc, #20]	; (8009e14 <disk_status+0x30>)
 8009dfe:	440a      	add	r2, r1
 8009e00:	7a12      	ldrb	r2, [r2, #8]
 8009e02:	4610      	mov	r0, r2
 8009e04:	4798      	blx	r3
 8009e06:	4603      	mov	r3, r0
 8009e08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	24002674 	.word	0x24002674

08009e18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	4a0e      	ldr	r2, [pc, #56]	; (8009e64 <disk_initialize+0x4c>)
 8009e2a:	5cd3      	ldrb	r3, [r2, r3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d114      	bne.n	8009e5a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	4a0c      	ldr	r2, [pc, #48]	; (8009e64 <disk_initialize+0x4c>)
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	79fa      	ldrb	r2, [r7, #7]
 8009e3e:	4909      	ldr	r1, [pc, #36]	; (8009e64 <disk_initialize+0x4c>)
 8009e40:	440a      	add	r2, r1
 8009e42:	7a12      	ldrb	r2, [r2, #8]
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d103      	bne.n	8009e5a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	4a03      	ldr	r2, [pc, #12]	; (8009e64 <disk_initialize+0x4c>)
 8009e56:	2101      	movs	r1, #1
 8009e58:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	24002674 	.word	0x24002674

08009e68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e68:	b590      	push	{r4, r7, lr}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60b9      	str	r1, [r7, #8]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	4a0a      	ldr	r2, [pc, #40]	; (8009ea4 <disk_read+0x3c>)
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	689c      	ldr	r4, [r3, #8]
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	4a07      	ldr	r2, [pc, #28]	; (8009ea4 <disk_read+0x3c>)
 8009e88:	4413      	add	r3, r2
 8009e8a:	7a18      	ldrb	r0, [r3, #8]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	68b9      	ldr	r1, [r7, #8]
 8009e92:	47a0      	blx	r4
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd90      	pop	{r4, r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	24002674 	.word	0x24002674

08009ea8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ea8:	b590      	push	{r4, r7, lr}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60b9      	str	r1, [r7, #8]
 8009eb0:	607a      	str	r2, [r7, #4]
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	4a0a      	ldr	r2, [pc, #40]	; (8009ee4 <disk_write+0x3c>)
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	68dc      	ldr	r4, [r3, #12]
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <disk_write+0x3c>)
 8009ec8:	4413      	add	r3, r2
 8009eca:	7a18      	ldrb	r0, [r3, #8]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	47a0      	blx	r4
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd90      	pop	{r4, r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	24002674 	.word	0x24002674

08009ee8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	603a      	str	r2, [r7, #0]
 8009ef2:	71fb      	strb	r3, [r7, #7]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	4a09      	ldr	r2, [pc, #36]	; (8009f20 <disk_ioctl+0x38>)
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	79fa      	ldrb	r2, [r7, #7]
 8009f06:	4906      	ldr	r1, [pc, #24]	; (8009f20 <disk_ioctl+0x38>)
 8009f08:	440a      	add	r2, r1
 8009f0a:	7a10      	ldrb	r0, [r2, #8]
 8009f0c:	79b9      	ldrb	r1, [r7, #6]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	73fb      	strb	r3, [r7, #15]
  return res;
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	24002674 	.word	0x24002674

08009f24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009f34:	89fb      	ldrh	r3, [r7, #14]
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	b21a      	sxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	b21b      	sxth	r3, r3
 8009f40:	4313      	orrs	r3, r2
 8009f42:	b21b      	sxth	r3, r3
 8009f44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009f46:	89fb      	ldrh	r3, [r7, #14]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3303      	adds	r3, #3
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	021b      	lsls	r3, r3, #8
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	3202      	adds	r2, #2
 8009f6c:	7812      	ldrb	r2, [r2, #0]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	3201      	adds	r2, #1
 8009f7a:	7812      	ldrb	r2, [r2, #0]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	7812      	ldrb	r2, [r2, #0]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b083      	sub	sp, #12
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	887a      	ldrh	r2, [r7, #2]
 8009fae:	b2d2      	uxtb	r2, r2
 8009fb0:	701a      	strb	r2, [r3, #0]
 8009fb2:	887b      	ldrh	r3, [r7, #2]
 8009fb4:	0a1b      	lsrs	r3, r3, #8
 8009fb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	887a      	ldrh	r2, [r7, #2]
 8009fc0:	b2d2      	uxtb	r2, r2
 8009fc2:	701a      	strb	r2, [r3, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	0a1b      	lsrs	r3, r3, #8
 8009fea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	b2d2      	uxtb	r2, r2
 8009ff6:	701a      	strb	r2, [r3, #0]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	607a      	str	r2, [r7, #4]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	b2d2      	uxtb	r2, r2
 800a01a:	701a      	strb	r2, [r3, #0]
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00d      	beq.n	800a05e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	1c53      	adds	r3, r2, #1
 800a046:	613b      	str	r3, [r7, #16]
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	1c59      	adds	r1, r3, #1
 800a04c:	6179      	str	r1, [r7, #20]
 800a04e:	7812      	ldrb	r2, [r2, #0]
 800a050:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3b01      	subs	r3, #1
 800a056:	607b      	str	r3, [r7, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1f1      	bne.n	800a042 <mem_cpy+0x1a>
	}
}
 800a05e:	bf00      	nop
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a06a:	b480      	push	{r7}
 800a06c:	b087      	sub	sp, #28
 800a06e:	af00      	add	r7, sp, #0
 800a070:	60f8      	str	r0, [r7, #12]
 800a072:	60b9      	str	r1, [r7, #8]
 800a074:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	617a      	str	r2, [r7, #20]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3b01      	subs	r3, #1
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1f3      	bne.n	800a07a <mem_set+0x10>
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	371c      	adds	r7, #28
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a0a0:	b480      	push	{r7}
 800a0a2:	b089      	sub	sp, #36	; 0x24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	61fa      	str	r2, [r7, #28]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	61ba      	str	r2, [r7, #24]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	1acb      	subs	r3, r1, r3
 800a0cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	607b      	str	r3, [r7, #4]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <mem_cmp+0x40>
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d0eb      	beq.n	800a0b8 <mem_cmp+0x18>

	return r;
 800a0e0:	697b      	ldr	r3, [r7, #20]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3724      	adds	r7, #36	; 0x24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a0f8:	e002      	b.n	800a100 <chk_chr+0x12>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	607b      	str	r3, [r7, #4]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <chk_chr+0x26>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	4293      	cmp	r3, r2
 800a112:	d1f2      	bne.n	800a0fa <chk_chr+0xc>
	return *str;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	781b      	ldrb	r3, [r3, #0]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a12e:	2300      	movs	r3, #0
 800a130:	60bb      	str	r3, [r7, #8]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	60fb      	str	r3, [r7, #12]
 800a136:	e029      	b.n	800a18c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a138:	4a27      	ldr	r2, [pc, #156]	; (800a1d8 <chk_lock+0xb4>)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	011b      	lsls	r3, r3, #4
 800a13e:	4413      	add	r3, r2
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01d      	beq.n	800a182 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a146:	4a24      	ldr	r2, [pc, #144]	; (800a1d8 <chk_lock+0xb4>)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	4413      	add	r3, r2
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	429a      	cmp	r2, r3
 800a156:	d116      	bne.n	800a186 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a158:	4a1f      	ldr	r2, [pc, #124]	; (800a1d8 <chk_lock+0xb4>)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	4413      	add	r3, r2
 800a160:	3304      	adds	r3, #4
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a168:	429a      	cmp	r2, r3
 800a16a:	d10c      	bne.n	800a186 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a16c:	4a1a      	ldr	r2, [pc, #104]	; (800a1d8 <chk_lock+0xb4>)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	4413      	add	r3, r2
 800a174:	3308      	adds	r3, #8
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d102      	bne.n	800a186 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a180:	e007      	b.n	800a192 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a182:	2301      	movs	r3, #1
 800a184:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d9d2      	bls.n	800a138 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d109      	bne.n	800a1ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <chk_lock+0x80>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d101      	bne.n	800a1a8 <chk_lock+0x84>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	e010      	b.n	800a1ca <chk_lock+0xa6>
 800a1a8:	2312      	movs	r3, #18
 800a1aa:	e00e      	b.n	800a1ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d108      	bne.n	800a1c4 <chk_lock+0xa0>
 800a1b2:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <chk_lock+0xb4>)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	4413      	add	r3, r2
 800a1ba:	330c      	adds	r3, #12
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c2:	d101      	bne.n	800a1c8 <chk_lock+0xa4>
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	e000      	b.n	800a1ca <chk_lock+0xa6>
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	24002454 	.word	0x24002454

0800a1dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	607b      	str	r3, [r7, #4]
 800a1e6:	e002      	b.n	800a1ee <enq_lock+0x12>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	607b      	str	r3, [r7, #4]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d806      	bhi.n	800a202 <enq_lock+0x26>
 800a1f4:	4a09      	ldr	r2, [pc, #36]	; (800a21c <enq_lock+0x40>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	011b      	lsls	r3, r3, #4
 800a1fa:	4413      	add	r3, r2
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f2      	bne.n	800a1e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b02      	cmp	r3, #2
 800a206:	bf14      	ite	ne
 800a208:	2301      	movne	r3, #1
 800a20a:	2300      	moveq	r3, #0
 800a20c:	b2db      	uxtb	r3, r3
}
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	24002454 	.word	0x24002454

0800a220 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e01f      	b.n	800a270 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a230:	4a41      	ldr	r2, [pc, #260]	; (800a338 <inc_lock+0x118>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	4413      	add	r3, r2
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d113      	bne.n	800a26a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a242:	4a3d      	ldr	r2, [pc, #244]	; (800a338 <inc_lock+0x118>)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	4413      	add	r3, r2
 800a24a:	3304      	adds	r3, #4
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a252:	429a      	cmp	r2, r3
 800a254:	d109      	bne.n	800a26a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a256:	4a38      	ldr	r2, [pc, #224]	; (800a338 <inc_lock+0x118>)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	4413      	add	r3, r2
 800a25e:	3308      	adds	r3, #8
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a266:	429a      	cmp	r2, r3
 800a268:	d006      	beq.n	800a278 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d9dc      	bls.n	800a230 <inc_lock+0x10>
 800a276:	e000      	b.n	800a27a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a278:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d132      	bne.n	800a2e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e002      	b.n	800a28c <inc_lock+0x6c>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d806      	bhi.n	800a2a0 <inc_lock+0x80>
 800a292:	4a29      	ldr	r2, [pc, #164]	; (800a338 <inc_lock+0x118>)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	4413      	add	r3, r2
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1f2      	bne.n	800a286 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d101      	bne.n	800a2aa <inc_lock+0x8a>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e040      	b.n	800a32c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	4922      	ldr	r1, [pc, #136]	; (800a338 <inc_lock+0x118>)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	440b      	add	r3, r1
 800a2b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	491e      	ldr	r1, [pc, #120]	; (800a338 <inc_lock+0x118>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	440b      	add	r3, r1
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	695a      	ldr	r2, [r3, #20]
 800a2cc:	491a      	ldr	r1, [pc, #104]	; (800a338 <inc_lock+0x118>)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	011b      	lsls	r3, r3, #4
 800a2d2:	440b      	add	r3, r1
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a2d8:	4a17      	ldr	r2, [pc, #92]	; (800a338 <inc_lock+0x118>)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	4413      	add	r3, r2
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <inc_lock+0xe0>
 800a2ec:	4a12      	ldr	r2, [pc, #72]	; (800a338 <inc_lock+0x118>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	4413      	add	r3, r2
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <inc_lock+0xe0>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	e015      	b.n	800a32c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d108      	bne.n	800a318 <inc_lock+0xf8>
 800a306:	4a0c      	ldr	r2, [pc, #48]	; (800a338 <inc_lock+0x118>)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	4413      	add	r3, r2
 800a30e:	330c      	adds	r3, #12
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	e001      	b.n	800a31c <inc_lock+0xfc>
 800a318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a31c:	4906      	ldr	r1, [pc, #24]	; (800a338 <inc_lock+0x118>)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	011b      	lsls	r3, r3, #4
 800a322:	440b      	add	r3, r1
 800a324:	330c      	adds	r3, #12
 800a326:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3301      	adds	r3, #1
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	24002454 	.word	0x24002454

0800a33c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3b01      	subs	r3, #1
 800a348:	607b      	str	r3, [r7, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d825      	bhi.n	800a39c <dec_lock+0x60>
		n = Files[i].ctr;
 800a350:	4a17      	ldr	r2, [pc, #92]	; (800a3b0 <dec_lock+0x74>)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	011b      	lsls	r3, r3, #4
 800a356:	4413      	add	r3, r2
 800a358:	330c      	adds	r3, #12
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a35e:	89fb      	ldrh	r3, [r7, #14]
 800a360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a364:	d101      	bne.n	800a36a <dec_lock+0x2e>
 800a366:	2300      	movs	r3, #0
 800a368:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a36a:	89fb      	ldrh	r3, [r7, #14]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <dec_lock+0x3a>
 800a370:	89fb      	ldrh	r3, [r7, #14]
 800a372:	3b01      	subs	r3, #1
 800a374:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a376:	4a0e      	ldr	r2, [pc, #56]	; (800a3b0 <dec_lock+0x74>)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	4413      	add	r3, r2
 800a37e:	330c      	adds	r3, #12
 800a380:	89fa      	ldrh	r2, [r7, #14]
 800a382:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a384:	89fb      	ldrh	r3, [r7, #14]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d105      	bne.n	800a396 <dec_lock+0x5a>
 800a38a:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <dec_lock+0x74>)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	4413      	add	r3, r2
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	737b      	strb	r3, [r7, #13]
 800a39a:	e001      	b.n	800a3a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a39c:	2302      	movs	r3, #2
 800a39e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a3a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	24002454 	.word	0x24002454

0800a3b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a3bc:	2300      	movs	r3, #0
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	e010      	b.n	800a3e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a3c2:	4a0d      	ldr	r2, [pc, #52]	; (800a3f8 <clear_lock+0x44>)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	4413      	add	r3, r2
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d105      	bne.n	800a3de <clear_lock+0x2a>
 800a3d2:	4a09      	ldr	r2, [pc, #36]	; (800a3f8 <clear_lock+0x44>)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	011b      	lsls	r3, r3, #4
 800a3d8:	4413      	add	r3, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d9eb      	bls.n	800a3c2 <clear_lock+0xe>
	}
}
 800a3ea:	bf00      	nop
 800a3ec:	bf00      	nop
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	24002454 	.word	0x24002454

0800a3fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	78db      	ldrb	r3, [r3, #3]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d034      	beq.n	800a47a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a414:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	7858      	ldrb	r0, [r3, #1]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a420:	2301      	movs	r3, #1
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	f7ff fd40 	bl	8009ea8 <disk_write>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a42e:	2301      	movs	r3, #1
 800a430:	73fb      	strb	r3, [r7, #15]
 800a432:	e022      	b.n	800a47a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	1ad2      	subs	r2, r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	429a      	cmp	r2, r3
 800a448:	d217      	bcs.n	800a47a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	789b      	ldrb	r3, [r3, #2]
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	e010      	b.n	800a474 <sync_window+0x78>
					wsect += fs->fsize;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	4413      	add	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7858      	ldrb	r0, [r3, #1]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a466:	2301      	movs	r3, #1
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	f7ff fd1d 	bl	8009ea8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3b01      	subs	r3, #1
 800a472:	613b      	str	r3, [r7, #16]
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d8eb      	bhi.n	800a452 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d01b      	beq.n	800a4d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ffad 	bl	800a3fc <sync_window>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d113      	bne.n	800a4d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	7858      	ldrb	r0, [r3, #1]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	f7ff fcd5 	bl	8009e68 <disk_read>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d004      	beq.n	800a4ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff ff87 	bl	800a3fc <sync_window>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d158      	bne.n	800a5aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d148      	bne.n	800a592 <sync_fs+0xb2>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	791b      	ldrb	r3, [r3, #4]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d144      	bne.n	800a592 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3334      	adds	r3, #52	; 0x34
 800a50c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a510:	2100      	movs	r1, #0
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fda9 	bl	800a06a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3334      	adds	r3, #52	; 0x34
 800a51c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a520:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fd38 	bl	8009f9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3334      	adds	r3, #52	; 0x34
 800a52e:	4921      	ldr	r1, [pc, #132]	; (800a5b4 <sync_fs+0xd4>)
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff fd4d 	bl	8009fd0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3334      	adds	r3, #52	; 0x34
 800a53a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a53e:	491e      	ldr	r1, [pc, #120]	; (800a5b8 <sync_fs+0xd8>)
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fd45 	bl	8009fd0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3334      	adds	r3, #52	; 0x34
 800a54a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	4619      	mov	r1, r3
 800a554:	4610      	mov	r0, r2
 800a556:	f7ff fd3b 	bl	8009fd0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3334      	adds	r3, #52	; 0x34
 800a55e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	4619      	mov	r1, r3
 800a568:	4610      	mov	r0, r2
 800a56a:	f7ff fd31 	bl	8009fd0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	7858      	ldrb	r0, [r3, #1]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a586:	2301      	movs	r3, #1
 800a588:	f7ff fc8e 	bl	8009ea8 <disk_write>
			fs->fsi_flag = 0;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2200      	movs	r2, #0
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fca4 	bl	8009ee8 <disk_ioctl>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <sync_fs+0xca>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	41615252 	.word	0x41615252
 800a5b8:	61417272 	.word	0x61417272

0800a5bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	3b02      	subs	r3, #2
 800a5ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	3b02      	subs	r3, #2
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d301      	bcc.n	800a5dc <clust2sect+0x20>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e008      	b.n	800a5ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	895b      	ldrh	r3, [r3, #10]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	fb03 f202 	mul.w	r2, r3, r2
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	4413      	add	r3, r2
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b086      	sub	sp, #24
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d904      	bls.n	800a61a <get_fat+0x20>
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	429a      	cmp	r2, r3
 800a618:	d302      	bcc.n	800a620 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a61a:	2301      	movs	r3, #1
 800a61c:	617b      	str	r3, [r7, #20]
 800a61e:	e091      	b.n	800a744 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a620:	f04f 33ff 	mov.w	r3, #4294967295
 800a624:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d063      	beq.n	800a6f6 <get_fat+0xfc>
 800a62e:	2b03      	cmp	r3, #3
 800a630:	dc7e      	bgt.n	800a730 <get_fat+0x136>
 800a632:	2b01      	cmp	r3, #1
 800a634:	d002      	beq.n	800a63c <get_fat+0x42>
 800a636:	2b02      	cmp	r3, #2
 800a638:	d042      	beq.n	800a6c0 <get_fat+0xc6>
 800a63a:	e079      	b.n	800a730 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	0b1b      	lsrs	r3, r3, #12
 800a652:	4413      	add	r3, r2
 800a654:	4619      	mov	r1, r3
 800a656:	6938      	ldr	r0, [r7, #16]
 800a658:	f7ff ff14 	bl	800a484 <move_window>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d169      	bne.n	800a736 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1c5a      	adds	r2, r3, #1
 800a666:	60fa      	str	r2, [r7, #12]
 800a668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4413      	add	r3, r2
 800a670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a674:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	0b1b      	lsrs	r3, r3, #12
 800a67e:	4413      	add	r3, r2
 800a680:	4619      	mov	r1, r3
 800a682:	6938      	ldr	r0, [r7, #16]
 800a684:	f7ff fefe 	bl	800a484 <move_window>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d155      	bne.n	800a73a <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	4413      	add	r3, r2
 800a698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a69c:	021b      	lsls	r3, r3, #8
 800a69e:	461a      	mov	r2, r3
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <get_fat+0xbc>
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	091b      	lsrs	r3, r3, #4
 800a6b4:	e002      	b.n	800a6bc <get_fat+0xc2>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6bc:	617b      	str	r3, [r7, #20]
			break;
 800a6be:	e041      	b.n	800a744 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	0adb      	lsrs	r3, r3, #11
 800a6c8:	4413      	add	r3, r2
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6938      	ldr	r0, [r7, #16]
 800a6ce:	f7ff fed9 	bl	800a484 <move_window>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d132      	bne.n	800a73e <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	0059      	lsls	r1, r3, #1
 800a6e2:	f640 73fe 	movw	r3, #4094	; 0xffe
 800a6e6:	400b      	ands	r3, r1
 800a6e8:	4413      	add	r3, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7ff fc1a 	bl	8009f24 <ld_word>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	617b      	str	r3, [r7, #20]
			break;
 800a6f4:	e026      	b.n	800a744 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	0a9b      	lsrs	r3, r3, #10
 800a6fe:	4413      	add	r3, r2
 800a700:	4619      	mov	r1, r3
 800a702:	6938      	ldr	r0, [r7, #16]
 800a704:	f7ff febe 	bl	800a484 <move_window>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d119      	bne.n	800a742 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	0099      	lsls	r1, r3, #2
 800a718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a71c:	400b      	ands	r3, r1
 800a71e:	4413      	add	r3, r2
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fc17 	bl	8009f54 <ld_dword>
 800a726:	4603      	mov	r3, r0
 800a728:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a72c:	617b      	str	r3, [r7, #20]
			break;
 800a72e:	e009      	b.n	800a744 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a730:	2301      	movs	r3, #1
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e006      	b.n	800a744 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a736:	bf00      	nop
 800a738:	e004      	b.n	800a744 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a73a:	bf00      	nop
 800a73c:	e002      	b.n	800a744 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a73e:	bf00      	nop
 800a740:	e000      	b.n	800a744 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a742:	bf00      	nop
		}
	}

	return val;
 800a744:	697b      	ldr	r3, [r7, #20]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a74e:	b590      	push	{r4, r7, lr}
 800a750:	b089      	sub	sp, #36	; 0x24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a75a:	2302      	movs	r3, #2
 800a75c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b01      	cmp	r3, #1
 800a762:	f240 80dc 	bls.w	800a91e <put_fat+0x1d0>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	f080 80d6 	bcs.w	800a91e <put_fat+0x1d0>
		switch (fs->fs_type) {
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b03      	cmp	r3, #3
 800a778:	f000 8097 	beq.w	800a8aa <put_fat+0x15c>
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	f300 80ce 	bgt.w	800a91e <put_fat+0x1d0>
 800a782:	2b01      	cmp	r3, #1
 800a784:	d002      	beq.n	800a78c <put_fat+0x3e>
 800a786:	2b02      	cmp	r3, #2
 800a788:	d06e      	beq.n	800a868 <put_fat+0x11a>
 800a78a:	e0c8      	b.n	800a91e <put_fat+0x1d0>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	61bb      	str	r3, [r7, #24]
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	4413      	add	r3, r2
 800a798:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	0b1b      	lsrs	r3, r3, #12
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fe6c 	bl	800a484 <move_window>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7b0:	7ffb      	ldrb	r3, [r7, #31]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 80ac 	bne.w	800a910 <put_fat+0x1c2>
			p = fs->win + bc++ % SS(fs);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	1c59      	adds	r1, r3, #1
 800a7c2:	61b9      	str	r1, [r7, #24]
 800a7c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7c8:	4413      	add	r3, r2
 800a7ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00d      	beq.n	800a7f2 <put_fat+0xa4>
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	f003 030f 	and.w	r3, r3, #15
 800a7e0:	b25a      	sxtb	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	b25b      	sxtb	r3, r3
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	b25b      	sxtb	r3, r3
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	e001      	b.n	800a7f6 <put_fat+0xa8>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	0b1b      	lsrs	r3, r3, #12
 800a808:	4413      	add	r3, r2
 800a80a:	4619      	mov	r1, r3
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7ff fe39 	bl	800a484 <move_window>
 800a812:	4603      	mov	r3, r0
 800a814:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a816:	7ffb      	ldrb	r3, [r7, #31]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d17b      	bne.n	800a914 <put_fat+0x1c6>
			p = fs->win + bc % SS(fs);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a828:	4413      	add	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <put_fat+0xf0>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	091b      	lsrs	r3, r3, #4
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	e00e      	b.n	800a85c <put_fat+0x10e>
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	b25b      	sxtb	r3, r3
 800a844:	f023 030f 	bic.w	r3, r3, #15
 800a848:	b25a      	sxtb	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	0a1b      	lsrs	r3, r3, #8
 800a84e:	b25b      	sxtb	r3, r3
 800a850:	f003 030f 	and.w	r3, r3, #15
 800a854:	b25b      	sxtb	r3, r3
 800a856:	4313      	orrs	r3, r2
 800a858:	b25b      	sxtb	r3, r3
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2201      	movs	r2, #1
 800a864:	70da      	strb	r2, [r3, #3]
			break;
 800a866:	e05a      	b.n	800a91e <put_fat+0x1d0>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	0adb      	lsrs	r3, r3, #11
 800a870:	4413      	add	r3, r2
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff fe05 	bl	800a484 <move_window>
 800a87a:	4603      	mov	r3, r0
 800a87c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a87e:	7ffb      	ldrb	r3, [r7, #31]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d149      	bne.n	800a918 <put_fat+0x1ca>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	0059      	lsls	r1, r3, #1
 800a88e:	f640 73fe 	movw	r3, #4094	; 0xffe
 800a892:	400b      	ands	r3, r1
 800a894:	4413      	add	r3, r2
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	b292      	uxth	r2, r2
 800a89a:	4611      	mov	r1, r2
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff fb7c 	bl	8009f9a <st_word>
			fs->wflag = 1;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	70da      	strb	r2, [r3, #3]
			break;
 800a8a8:	e039      	b.n	800a91e <put_fat+0x1d0>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	0a9b      	lsrs	r3, r3, #10
 800a8b2:	4413      	add	r3, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fde4 	bl	800a484 <move_window>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8c0:	7ffb      	ldrb	r3, [r7, #31]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d12a      	bne.n	800a91c <put_fat+0x1ce>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	0099      	lsls	r1, r3, #2
 800a8d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a8da:	400b      	ands	r3, r1
 800a8dc:	4413      	add	r3, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff fb38 	bl	8009f54 <ld_dword>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8ea:	4323      	orrs	r3, r4
 800a8ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	0099      	lsls	r1, r3, #2
 800a8f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a8fc:	400b      	ands	r3, r1
 800a8fe:	4413      	add	r3, r2
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fb64 	bl	8009fd0 <st_dword>
			fs->wflag = 1;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2201      	movs	r2, #1
 800a90c:	70da      	strb	r2, [r3, #3]
			break;
 800a90e:	e006      	b.n	800a91e <put_fat+0x1d0>
			if (res != FR_OK) break;
 800a910:	bf00      	nop
 800a912:	e004      	b.n	800a91e <put_fat+0x1d0>
			if (res != FR_OK) break;
 800a914:	bf00      	nop
 800a916:	e002      	b.n	800a91e <put_fat+0x1d0>
			if (res != FR_OK) break;
 800a918:	bf00      	nop
 800a91a:	e000      	b.n	800a91e <put_fat+0x1d0>
			if (res != FR_OK) break;
 800a91c:	bf00      	nop
		}
	}
	return res;
 800a91e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3724      	adds	r7, #36	; 0x24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd90      	pop	{r4, r7, pc}

0800a928 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d904      	bls.n	800a94e <remove_chain+0x26>
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d301      	bcc.n	800a952 <remove_chain+0x2a>
 800a94e:	2302      	movs	r3, #2
 800a950:	e04b      	b.n	800a9ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00c      	beq.n	800a972 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a958:	f04f 32ff 	mov.w	r2, #4294967295
 800a95c:	6879      	ldr	r1, [r7, #4]
 800a95e:	69b8      	ldr	r0, [r7, #24]
 800a960:	f7ff fef5 	bl	800a74e <put_fat>
 800a964:	4603      	mov	r3, r0
 800a966:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a968:	7ffb      	ldrb	r3, [r7, #31]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <remove_chain+0x4a>
 800a96e:	7ffb      	ldrb	r3, [r7, #31]
 800a970:	e03b      	b.n	800a9ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a972:	68b9      	ldr	r1, [r7, #8]
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f7ff fe40 	bl	800a5fa <get_fat>
 800a97a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d031      	beq.n	800a9e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <remove_chain+0x64>
 800a988:	2302      	movs	r3, #2
 800a98a:	e02e      	b.n	800a9ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a992:	d101      	bne.n	800a998 <remove_chain+0x70>
 800a994:	2301      	movs	r3, #1
 800a996:	e028      	b.n	800a9ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a998:	2200      	movs	r2, #0
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	69b8      	ldr	r0, [r7, #24]
 800a99e:	f7ff fed6 	bl	800a74e <put_fat>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a9a6:	7ffb      	ldrb	r3, [r7, #31]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <remove_chain+0x88>
 800a9ac:	7ffb      	ldrb	r3, [r7, #31]
 800a9ae:	e01c      	b.n	800a9ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	695a      	ldr	r2, [r3, #20]
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	3b02      	subs	r3, #2
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d20b      	bcs.n	800a9d6 <remove_chain+0xae>
			fs->free_clst++;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	791b      	ldrb	r3, [r3, #4]
 800a9cc:	f043 0301 	orr.w	r3, r3, #1
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d3c6      	bcc.n	800a972 <remove_chain+0x4a>
 800a9e4:	e000      	b.n	800a9e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a9e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b088      	sub	sp, #32
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10d      	bne.n	800aa24 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <create_chain+0x2c>
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d31b      	bcc.n	800aa56 <create_chain+0x64>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	61bb      	str	r3, [r7, #24]
 800aa22:	e018      	b.n	800aa56 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff fde7 	bl	800a5fa <get_fat>
 800aa2c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d801      	bhi.n	800aa38 <create_chain+0x46>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e070      	b.n	800ab1a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3e:	d101      	bne.n	800aa44 <create_chain+0x52>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	e06a      	b.n	800ab1a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d201      	bcs.n	800aa52 <create_chain+0x60>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	e063      	b.n	800ab1a <create_chain+0x128>
		scl = clst;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	69fa      	ldr	r2, [r7, #28]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d307      	bcc.n	800aa7a <create_chain+0x88>
				ncl = 2;
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa6e:	69fa      	ldr	r2, [r7, #28]
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d901      	bls.n	800aa7a <create_chain+0x88>
 800aa76:	2300      	movs	r3, #0
 800aa78:	e04f      	b.n	800ab1a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa7a:	69f9      	ldr	r1, [r7, #28]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff fdbc 	bl	800a5fa <get_fat>
 800aa82:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00e      	beq.n	800aaa8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d003      	beq.n	800aa98 <create_chain+0xa6>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	d101      	bne.n	800aa9c <create_chain+0xaa>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	e03e      	b.n	800ab1a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa9c:	69fa      	ldr	r2, [r7, #28]
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d1da      	bne.n	800aa5a <create_chain+0x68>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e038      	b.n	800ab1a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aaa8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aaaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aaae:	69f9      	ldr	r1, [r7, #28]
 800aab0:	6938      	ldr	r0, [r7, #16]
 800aab2:	f7ff fe4c 	bl	800a74e <put_fat>
 800aab6:	4603      	mov	r3, r0
 800aab8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d109      	bne.n	800aad4 <create_chain+0xe2>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d006      	beq.n	800aad4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6938      	ldr	r0, [r7, #16]
 800aacc:	f7ff fe3f 	bl	800a74e <put_fat>
 800aad0:	4603      	mov	r3, r0
 800aad2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d116      	bne.n	800ab08 <create_chain+0x116>
		fs->last_clst = ncl;
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	69fa      	ldr	r2, [r7, #28]
 800aade:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	695a      	ldr	r2, [r3, #20]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	3b02      	subs	r3, #2
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d804      	bhi.n	800aaf8 <create_chain+0x106>
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	1e5a      	subs	r2, r3, #1
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	791b      	ldrb	r3, [r3, #4]
 800aafc:	f043 0301 	orr.w	r3, r3, #1
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	711a      	strb	r2, [r3, #4]
 800ab06:	e007      	b.n	800ab18 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d102      	bne.n	800ab14 <create_chain+0x122>
 800ab0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab12:	e000      	b.n	800ab16 <create_chain+0x124>
 800ab14:	2301      	movs	r3, #1
 800ab16:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab18:	69fb      	ldr	r3, [r7, #28]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3720      	adds	r7, #32
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b087      	sub	sp, #28
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab36:	3304      	adds	r3, #4
 800ab38:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	0b1b      	lsrs	r3, r3, #12
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	8952      	ldrh	r2, [r2, #10]
 800ab42:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab46:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	1d1a      	adds	r2, r3, #4
 800ab4c:	613a      	str	r2, [r7, #16]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <clmt_clust+0x3a>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e010      	b.n	800ab7e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d307      	bcc.n	800ab74 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab72:	e7e9      	b.n	800ab48 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ab74:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	4413      	add	r3, r2
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aba0:	d204      	bcs.n	800abac <dir_sdi+0x22>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800abac:	2302      	movs	r3, #2
 800abae:	e063      	b.n	800ac78 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d106      	bne.n	800abd0 <dir_sdi+0x46>
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d902      	bls.n	800abd0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10c      	bne.n	800abf0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	095b      	lsrs	r3, r3, #5
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	8912      	ldrh	r2, [r2, #8]
 800abde:	4293      	cmp	r3, r2
 800abe0:	d301      	bcc.n	800abe6 <dir_sdi+0x5c>
 800abe2:	2302      	movs	r3, #2
 800abe4:	e048      	b.n	800ac78 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	61da      	str	r2, [r3, #28]
 800abee:	e029      	b.n	800ac44 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	895b      	ldrh	r3, [r3, #10]
 800abf4:	031b      	lsls	r3, r3, #12
 800abf6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abf8:	e019      	b.n	800ac2e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6979      	ldr	r1, [r7, #20]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff fcfb 	bl	800a5fa <get_fat>
 800ac04:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0c:	d101      	bne.n	800ac12 <dir_sdi+0x88>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e032      	b.n	800ac78 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d904      	bls.n	800ac22 <dir_sdi+0x98>
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d301      	bcc.n	800ac26 <dir_sdi+0x9c>
 800ac22:	2302      	movs	r3, #2
 800ac24:	e028      	b.n	800ac78 <dir_sdi+0xee>
			ofs -= csz;
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d2e1      	bcs.n	800abfa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ac36:	6979      	ldr	r1, [r7, #20]
 800ac38:	6938      	ldr	r0, [r7, #16]
 800ac3a:	f7ff fcbf 	bl	800a5bc <clust2sect>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <dir_sdi+0xcc>
 800ac52:	2302      	movs	r3, #2
 800ac54:	e010      	b.n	800ac78 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69da      	ldr	r2, [r3, #28]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	0b1b      	lsrs	r3, r3, #12
 800ac5e:	441a      	add	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac70:	441a      	add	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	3320      	adds	r3, #32
 800ac96:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <dir_next+0x28>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aca6:	d301      	bcc.n	800acac <dir_next+0x2c>
 800aca8:	2304      	movs	r3, #4
 800acaa:	e0aa      	b.n	800ae02 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f040 8098 	bne.w	800ade8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	095b      	lsrs	r3, r3, #5
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	8912      	ldrh	r2, [r2, #8]
 800acd2:	4293      	cmp	r3, r2
 800acd4:	f0c0 8088 	bcc.w	800ade8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	61da      	str	r2, [r3, #28]
 800acde:	2304      	movs	r3, #4
 800ace0:	e08f      	b.n	800ae02 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	0b1b      	lsrs	r3, r3, #12
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	8952      	ldrh	r2, [r2, #10]
 800acea:	3a01      	subs	r2, #1
 800acec:	4013      	ands	r3, r2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d17a      	bne.n	800ade8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f7ff fc7d 	bl	800a5fa <get_fat>
 800ad00:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d801      	bhi.n	800ad0c <dir_next+0x8c>
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e07a      	b.n	800ae02 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad12:	d101      	bne.n	800ad18 <dir_next+0x98>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e074      	b.n	800ae02 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d358      	bcc.n	800add4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d104      	bne.n	800ad32 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	61da      	str	r2, [r3, #28]
 800ad2e:	2304      	movs	r3, #4
 800ad30:	e067      	b.n	800ae02 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f7ff fe59 	bl	800a9f2 <create_chain>
 800ad40:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <dir_next+0xcc>
 800ad48:	2307      	movs	r3, #7
 800ad4a:	e05a      	b.n	800ae02 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d101      	bne.n	800ad56 <dir_next+0xd6>
 800ad52:	2302      	movs	r3, #2
 800ad54:	e055      	b.n	800ae02 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d101      	bne.n	800ad62 <dir_next+0xe2>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e04f      	b.n	800ae02 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7ff fb4a 	bl	800a3fc <sync_window>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <dir_next+0xf2>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e047      	b.n	800ae02 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3334      	adds	r3, #52	; 0x34
 800ad76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff f974 	bl	800a06a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad82:	2300      	movs	r3, #0
 800ad84:	613b      	str	r3, [r7, #16]
 800ad86:	6979      	ldr	r1, [r7, #20]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7ff fc17 	bl	800a5bc <clust2sect>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	631a      	str	r2, [r3, #48]	; 0x30
 800ad94:	e012      	b.n	800adbc <dir_next+0x13c>
						fs->wflag = 1;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7ff fb2d 	bl	800a3fc <sync_window>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <dir_next+0x12c>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e02a      	b.n	800ae02 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	3301      	adds	r3, #1
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	631a      	str	r2, [r3, #48]	; 0x30
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	895b      	ldrh	r3, [r3, #10]
 800adc0:	461a      	mov	r2, r3
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d3e6      	bcc.n	800ad96 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800adda:	6979      	ldr	r1, [r7, #20]
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff fbed 	bl	800a5bc <clust2sect>
 800ade2:	4602      	mov	r2, r0
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adfa:	441a      	add	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3718      	adds	r7, #24
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b086      	sub	sp, #24
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff feb4 	bl	800ab8a <dir_sdi>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d12b      	bne.n	800ae84 <dir_alloc+0x7a>
		n = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	4619      	mov	r1, r3
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff fb24 	bl	800a484 <move_window>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d11d      	bne.n	800ae82 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2be5      	cmp	r3, #229	; 0xe5
 800ae4e:	d004      	beq.n	800ae5a <dir_alloc+0x50>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d107      	bne.n	800ae6a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	613b      	str	r3, [r7, #16]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d102      	bne.n	800ae6e <dir_alloc+0x64>
 800ae68:	e00c      	b.n	800ae84 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae6e:	2101      	movs	r1, #1
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff ff05 	bl	800ac80 <dir_next>
 800ae76:	4603      	mov	r3, r0
 800ae78:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0d7      	beq.n	800ae30 <dir_alloc+0x26>
 800ae80:	e000      	b.n	800ae84 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae82:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d101      	bne.n	800ae8e <dir_alloc+0x84>
 800ae8a:	2307      	movs	r3, #7
 800ae8c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	331a      	adds	r3, #26
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff f83c 	bl	8009f24 <ld_word>
 800aeac:	4603      	mov	r3, r0
 800aeae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d109      	bne.n	800aecc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	3314      	adds	r3, #20
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7ff f831 	bl	8009f24 <ld_word>
 800aec2:	4603      	mov	r3, r0
 800aec4:	041b      	lsls	r3, r3, #16
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aecc:	68fb      	ldr	r3, [r7, #12]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	331a      	adds	r3, #26
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	b292      	uxth	r2, r2
 800aeea:	4611      	mov	r1, r2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff f854 	bl	8009f9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d109      	bne.n	800af0e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	f103 0214 	add.w	r2, r3, #20
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	0c1b      	lsrs	r3, r3, #16
 800af04:	b29b      	uxth	r3, r3
 800af06:	4619      	mov	r1, r3
 800af08:	4610      	mov	r0, r2
 800af0a:	f7ff f846 	bl	8009f9a <st_word>
	}
}
 800af0e:	bf00      	nop
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	331a      	adds	r3, #26
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fffc 	bl	8009f24 <ld_word>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <cmp_lfn+0x1e>
 800af32:	2300      	movs	r3, #0
 800af34:	e059      	b.n	800afea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af3e:	1e5a      	subs	r2, r3, #1
 800af40:	4613      	mov	r3, r2
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800af4c:	2301      	movs	r3, #1
 800af4e:	81fb      	strh	r3, [r7, #14]
 800af50:	2300      	movs	r3, #0
 800af52:	613b      	str	r3, [r7, #16]
 800af54:	e033      	b.n	800afbe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800af56:	4a27      	ldr	r2, [pc, #156]	; (800aff4 <cmp_lfn+0xdc>)
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	4413      	add	r3, r2
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	4413      	add	r3, r2
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe ffdd 	bl	8009f24 <ld_word>
 800af6a:	4603      	mov	r3, r0
 800af6c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800af6e:	89fb      	ldrh	r3, [r7, #14]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01a      	beq.n	800afaa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2bfe      	cmp	r3, #254	; 0xfe
 800af78:	d812      	bhi.n	800afa0 <cmp_lfn+0x88>
 800af7a:	89bb      	ldrh	r3, [r7, #12]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f001 ffd3 	bl	800cf28 <ff_wtoupper>
 800af82:	4603      	mov	r3, r0
 800af84:	461c      	mov	r4, r3
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	617a      	str	r2, [r7, #20]
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	4413      	add	r3, r2
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f001 ffc7 	bl	800cf28 <ff_wtoupper>
 800af9a:	4603      	mov	r3, r0
 800af9c:	429c      	cmp	r4, r3
 800af9e:	d001      	beq.n	800afa4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800afa0:	2300      	movs	r3, #0
 800afa2:	e022      	b.n	800afea <cmp_lfn+0xd2>
			}
			wc = uc;
 800afa4:	89bb      	ldrh	r3, [r7, #12]
 800afa6:	81fb      	strh	r3, [r7, #14]
 800afa8:	e006      	b.n	800afb8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800afaa:	89bb      	ldrh	r3, [r7, #12]
 800afac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d001      	beq.n	800afb8 <cmp_lfn+0xa0>
 800afb4:	2300      	movs	r3, #0
 800afb6:	e018      	b.n	800afea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	3301      	adds	r3, #1
 800afbc:	613b      	str	r3, [r7, #16]
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b0c      	cmp	r3, #12
 800afc2:	d9c8      	bls.n	800af56 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <cmp_lfn+0xd0>
 800afd0:	89fb      	ldrh	r3, [r7, #14]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d008      	beq.n	800afe8 <cmp_lfn+0xd0>
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	005b      	lsls	r3, r3, #1
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	4413      	add	r3, r2
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <cmp_lfn+0xd0>
 800afe4:	2300      	movs	r3, #0
 800afe6:	e000      	b.n	800afea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800afe8:	2301      	movs	r3, #1
}
 800afea:	4618      	mov	r0, r3
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd90      	pop	{r4, r7, pc}
 800aff2:	bf00      	nop
 800aff4:	0800f15c 	.word	0x0800f15c

0800aff8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	331a      	adds	r3, #26
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe ff8c 	bl	8009f24 <ld_word>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <pick_lfn+0x1e>
 800b012:	2300      	movs	r3, #0
 800b014:	e04d      	b.n	800b0b2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b01e:	1e5a      	subs	r2, r3, #1
 800b020:	4613      	mov	r3, r2
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b02c:	2301      	movs	r3, #1
 800b02e:	81fb      	strh	r3, [r7, #14]
 800b030:	2300      	movs	r3, #0
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	e028      	b.n	800b088 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b036:	4a21      	ldr	r2, [pc, #132]	; (800b0bc <pick_lfn+0xc4>)
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	4413      	add	r3, r2
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	4413      	add	r3, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f7fe ff6d 	bl	8009f24 <ld_word>
 800b04a:	4603      	mov	r3, r0
 800b04c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b04e:	89fb      	ldrh	r3, [r7, #14]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00f      	beq.n	800b074 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2bfe      	cmp	r3, #254	; 0xfe
 800b058:	d901      	bls.n	800b05e <pick_lfn+0x66>
 800b05a:	2300      	movs	r3, #0
 800b05c:	e029      	b.n	800b0b2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b05e:	89bb      	ldrh	r3, [r7, #12]
 800b060:	81fb      	strh	r3, [r7, #14]
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	617a      	str	r2, [r7, #20]
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4413      	add	r3, r2
 800b06e:	89fa      	ldrh	r2, [r7, #14]
 800b070:	801a      	strh	r2, [r3, #0]
 800b072:	e006      	b.n	800b082 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b074:	89bb      	ldrh	r3, [r7, #12]
 800b076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d001      	beq.n	800b082 <pick_lfn+0x8a>
 800b07e:	2300      	movs	r3, #0
 800b080:	e017      	b.n	800b0b2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	3301      	adds	r3, #1
 800b086:	613b      	str	r3, [r7, #16]
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2b0c      	cmp	r3, #12
 800b08c:	d9d3      	bls.n	800b036 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2bfe      	cmp	r3, #254	; 0xfe
 800b09e:	d901      	bls.n	800b0a4 <pick_lfn+0xac>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e006      	b.n	800b0b2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b0b0:	2301      	movs	r3, #1
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0800f15c 	.word	0x0800f15c

0800b0c0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	71fb      	strb	r3, [r7, #7]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	330d      	adds	r3, #13
 800b0da:	79ba      	ldrb	r2, [r7, #6]
 800b0dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	330b      	adds	r3, #11
 800b0e2:	220f      	movs	r2, #15
 800b0e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	330c      	adds	r3, #12
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	331a      	adds	r3, #26
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fe ff50 	bl	8009f9a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	1e5a      	subs	r2, r3, #1
 800b0fe:	4613      	mov	r3, r2
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	82fb      	strh	r3, [r7, #22]
 800b10e:	2300      	movs	r3, #0
 800b110:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b112:	8afb      	ldrh	r3, [r7, #22]
 800b114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b118:	4293      	cmp	r3, r2
 800b11a:	d007      	beq.n	800b12c <put_lfn+0x6c>
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	61fa      	str	r2, [r7, #28]
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b12c:	4a17      	ldr	r2, [pc, #92]	; (800b18c <put_lfn+0xcc>)
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	4413      	add	r3, r2
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	461a      	mov	r2, r3
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	4413      	add	r3, r2
 800b13a:	8afa      	ldrh	r2, [r7, #22]
 800b13c:	4611      	mov	r1, r2
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe ff2b 	bl	8009f9a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b144:	8afb      	ldrh	r3, [r7, #22]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d102      	bne.n	800b150 <put_lfn+0x90>
 800b14a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b14e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	3301      	adds	r3, #1
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	2b0c      	cmp	r3, #12
 800b15a:	d9da      	bls.n	800b112 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b15c:	8afb      	ldrh	r3, [r7, #22]
 800b15e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b162:	4293      	cmp	r3, r2
 800b164:	d006      	beq.n	800b174 <put_lfn+0xb4>
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	4413      	add	r3, r2
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d103      	bne.n	800b17c <put_lfn+0xbc>
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b17a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	79fa      	ldrb	r2, [r7, #7]
 800b180:	701a      	strb	r2, [r3, #0]
}
 800b182:	bf00      	nop
 800b184:	3720      	adds	r7, #32
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	0800f15c 	.word	0x0800f15c

0800b190 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08c      	sub	sp, #48	; 0x30
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b19e:	220b      	movs	r2, #11
 800b1a0:	68b9      	ldr	r1, [r7, #8]
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f7fe ff40 	bl	800a028 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b05      	cmp	r3, #5
 800b1ac:	d929      	bls.n	800b202 <gen_numname+0x72>
		sr = seq;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b1b2:	e020      	b.n	800b1f6 <gen_numname+0x66>
			wc = *lfn++;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	1c9a      	adds	r2, r3, #2
 800b1b8:	607a      	str	r2, [r7, #4]
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b1be:	2300      	movs	r3, #0
 800b1c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1c2:	e015      	b.n	800b1f0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	005a      	lsls	r2, r3, #1
 800b1c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	4413      	add	r3, r2
 800b1d0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b1d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1d4:	085b      	lsrs	r3, r3, #1
 800b1d6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <gen_numname+0x5a>
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	4b30      	ldr	r3, [pc, #192]	; (800b2a8 <gen_numname+0x118>)
 800b1e6:	4053      	eors	r3, r2
 800b1e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	2b0f      	cmp	r3, #15
 800b1f4:	d9e6      	bls.n	800b1c4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1da      	bne.n	800b1b4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b202:	2307      	movs	r3, #7
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	3330      	adds	r3, #48	; 0x30
 800b212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b21a:	2b39      	cmp	r3, #57	; 0x39
 800b21c:	d904      	bls.n	800b228 <gen_numname+0x98>
 800b21e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b222:	3307      	adds	r3, #7
 800b224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	1e5a      	subs	r2, r3, #1
 800b22c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b22e:	3330      	adds	r3, #48	; 0x30
 800b230:	443b      	add	r3, r7
 800b232:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b236:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	091b      	lsrs	r3, r3, #4
 800b23e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1df      	bne.n	800b206 <gen_numname+0x76>
	ns[i] = '~';
 800b246:	f107 0214 	add.w	r2, r7, #20
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	4413      	add	r3, r2
 800b24e:	227e      	movs	r2, #126	; 0x7e
 800b250:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b252:	2300      	movs	r3, #0
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
 800b256:	e002      	b.n	800b25e <gen_numname+0xce>
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	3301      	adds	r3, #1
 800b25c:	627b      	str	r3, [r7, #36]	; 0x24
 800b25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	429a      	cmp	r2, r3
 800b264:	d205      	bcs.n	800b272 <gen_numname+0xe2>
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	4413      	add	r3, r2
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	2b20      	cmp	r3, #32
 800b270:	d1f2      	bne.n	800b258 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	2b07      	cmp	r3, #7
 800b276:	d807      	bhi.n	800b288 <gen_numname+0xf8>
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	1c5a      	adds	r2, r3, #1
 800b27c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b27e:	3330      	adds	r3, #48	; 0x30
 800b280:	443b      	add	r3, r7
 800b282:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b286:	e000      	b.n	800b28a <gen_numname+0xfa>
 800b288:	2120      	movs	r1, #32
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	627a      	str	r2, [r7, #36]	; 0x24
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4413      	add	r3, r2
 800b294:	460a      	mov	r2, r1
 800b296:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	2b07      	cmp	r3, #7
 800b29c:	d9e9      	bls.n	800b272 <gen_numname+0xe2>
}
 800b29e:	bf00      	nop
 800b2a0:	bf00      	nop
 800b2a2:	3730      	adds	r7, #48	; 0x30
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	00011021 	.word	0x00011021

0800b2ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b2b8:	230b      	movs	r3, #11
 800b2ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	0852      	lsrs	r2, r2, #1
 800b2c2:	01db      	lsls	r3, r3, #7
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	1c59      	adds	r1, r3, #1
 800b2cc:	6079      	str	r1, [r7, #4]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	60bb      	str	r3, [r7, #8]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1ed      	bne.n	800b2bc <sum_sfn+0x10>
	return sum;
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b086      	sub	sp, #24
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b302:	23ff      	movs	r3, #255	; 0xff
 800b304:	757b      	strb	r3, [r7, #21]
 800b306:	23ff      	movs	r3, #255	; 0xff
 800b308:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b30a:	e081      	b.n	800b410 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	4619      	mov	r1, r3
 800b312:	6938      	ldr	r0, [r7, #16]
 800b314:	f7ff f8b6 	bl	800a484 <move_window>
 800b318:	4603      	mov	r3, r0
 800b31a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d17c      	bne.n	800b41c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b32a:	7dbb      	ldrb	r3, [r7, #22]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b330:	2304      	movs	r3, #4
 800b332:	75fb      	strb	r3, [r7, #23]
 800b334:	e077      	b.n	800b426 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	330b      	adds	r3, #11
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b342:	73fb      	strb	r3, [r7, #15]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7bfa      	ldrb	r2, [r7, #15]
 800b348:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b34a:	7dbb      	ldrb	r3, [r7, #22]
 800b34c:	2be5      	cmp	r3, #229	; 0xe5
 800b34e:	d00e      	beq.n	800b36e <dir_read+0x80>
 800b350:	7dbb      	ldrb	r3, [r7, #22]
 800b352:	2b2e      	cmp	r3, #46	; 0x2e
 800b354:	d00b      	beq.n	800b36e <dir_read+0x80>
 800b356:	7bfb      	ldrb	r3, [r7, #15]
 800b358:	f023 0320 	bic.w	r3, r3, #32
 800b35c:	2b08      	cmp	r3, #8
 800b35e:	bf0c      	ite	eq
 800b360:	2301      	moveq	r3, #1
 800b362:	2300      	movne	r3, #0
 800b364:	b2db      	uxtb	r3, r3
 800b366:	461a      	mov	r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d002      	beq.n	800b374 <dir_read+0x86>
				ord = 0xFF;
 800b36e:	23ff      	movs	r3, #255	; 0xff
 800b370:	757b      	strb	r3, [r7, #21]
 800b372:	e044      	b.n	800b3fe <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	2b0f      	cmp	r3, #15
 800b378:	d12f      	bne.n	800b3da <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b37a:	7dbb      	ldrb	r3, [r7, #22]
 800b37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00d      	beq.n	800b3a0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	7b5b      	ldrb	r3, [r3, #13]
 800b38a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b38c:	7dbb      	ldrb	r3, [r7, #22]
 800b38e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b392:	75bb      	strb	r3, [r7, #22]
 800b394:	7dbb      	ldrb	r3, [r7, #22]
 800b396:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	695a      	ldr	r2, [r3, #20]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b3a0:	7dba      	ldrb	r2, [r7, #22]
 800b3a2:	7d7b      	ldrb	r3, [r7, #21]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d115      	bne.n	800b3d4 <dir_read+0xe6>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	330d      	adds	r3, #13
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	7d3a      	ldrb	r2, [r7, #20]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d10e      	bne.n	800b3d4 <dir_read+0xe6>
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7ff fe19 	bl	800aff8 <pick_lfn>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <dir_read+0xe6>
 800b3cc:	7d7b      	ldrb	r3, [r7, #21]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	e000      	b.n	800b3d6 <dir_read+0xe8>
 800b3d4:	23ff      	movs	r3, #255	; 0xff
 800b3d6:	757b      	strb	r3, [r7, #21]
 800b3d8:	e011      	b.n	800b3fe <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b3da:	7d7b      	ldrb	r3, [r7, #21]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d109      	bne.n	800b3f4 <dir_read+0x106>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a1b      	ldr	r3, [r3, #32]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff ff61 	bl	800b2ac <sum_sfn>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	7d3b      	ldrb	r3, [r7, #20]
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d015      	beq.n	800b420 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800b3fc:	e010      	b.n	800b420 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b3fe:	2100      	movs	r1, #0
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff fc3d 	bl	800ac80 <dir_next>
 800b406:	4603      	mov	r3, r0
 800b408:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d109      	bne.n	800b424 <dir_read+0x136>
	while (dp->sect) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	2b00      	cmp	r3, #0
 800b416:	f47f af79 	bne.w	800b30c <dir_read+0x1e>
 800b41a:	e004      	b.n	800b426 <dir_read+0x138>
		if (res != FR_OK) break;
 800b41c:	bf00      	nop
 800b41e:	e002      	b.n	800b426 <dir_read+0x138>
					break;
 800b420:	bf00      	nop
 800b422:	e000      	b.n	800b426 <dir_read+0x138>
		if (res != FR_OK) break;
 800b424:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <dir_read+0x144>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	61da      	str	r2, [r3, #28]
	return res;
 800b432:	7dfb      	ldrb	r3, [r7, #23]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3718      	adds	r7, #24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b44a:	2100      	movs	r1, #0
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff fb9c 	bl	800ab8a <dir_sdi>
 800b452:	4603      	mov	r3, r0
 800b454:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b456:	7dfb      	ldrb	r3, [r7, #23]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <dir_find+0x24>
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
 800b45e:	e0a9      	b.n	800b5b4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b460:	23ff      	movs	r3, #255	; 0xff
 800b462:	753b      	strb	r3, [r7, #20]
 800b464:	7d3b      	ldrb	r3, [r7, #20]
 800b466:	757b      	strb	r3, [r7, #21]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295
 800b46e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	4619      	mov	r1, r3
 800b476:	6938      	ldr	r0, [r7, #16]
 800b478:	f7ff f804 	bl	800a484 <move_window>
 800b47c:	4603      	mov	r3, r0
 800b47e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f040 8090 	bne.w	800b5a8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b490:	7dbb      	ldrb	r3, [r7, #22]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d102      	bne.n	800b49c <dir_find+0x60>
 800b496:	2304      	movs	r3, #4
 800b498:	75fb      	strb	r3, [r7, #23]
 800b49a:	e08a      	b.n	800b5b2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a1b      	ldr	r3, [r3, #32]
 800b4a0:	330b      	adds	r3, #11
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4a8:	73fb      	strb	r3, [r7, #15]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	7bfa      	ldrb	r2, [r7, #15]
 800b4ae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b4b0:	7dbb      	ldrb	r3, [r7, #22]
 800b4b2:	2be5      	cmp	r3, #229	; 0xe5
 800b4b4:	d007      	beq.n	800b4c6 <dir_find+0x8a>
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	f003 0308 	and.w	r3, r3, #8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d009      	beq.n	800b4d4 <dir_find+0x98>
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b0f      	cmp	r3, #15
 800b4c4:	d006      	beq.n	800b4d4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b4c6:	23ff      	movs	r3, #255	; 0xff
 800b4c8:	757b      	strb	r3, [r7, #21]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d0:	631a      	str	r2, [r3, #48]	; 0x30
 800b4d2:	e05e      	b.n	800b592 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	2b0f      	cmp	r3, #15
 800b4d8:	d136      	bne.n	800b548 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d154      	bne.n	800b592 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b4e8:	7dbb      	ldrb	r3, [r7, #22]
 800b4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00d      	beq.n	800b50e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	7b5b      	ldrb	r3, [r3, #13]
 800b4f8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b4fa:	7dbb      	ldrb	r3, [r7, #22]
 800b4fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b500:	75bb      	strb	r3, [r7, #22]
 800b502:	7dbb      	ldrb	r3, [r7, #22]
 800b504:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	695a      	ldr	r2, [r3, #20]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b50e:	7dba      	ldrb	r2, [r7, #22]
 800b510:	7d7b      	ldrb	r3, [r7, #21]
 800b512:	429a      	cmp	r2, r3
 800b514:	d115      	bne.n	800b542 <dir_find+0x106>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	330d      	adds	r3, #13
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	7d3a      	ldrb	r2, [r7, #20]
 800b520:	429a      	cmp	r2, r3
 800b522:	d10e      	bne.n	800b542 <dir_find+0x106>
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	68da      	ldr	r2, [r3, #12]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	4619      	mov	r1, r3
 800b52e:	4610      	mov	r0, r2
 800b530:	f7ff fcf2 	bl	800af18 <cmp_lfn>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <dir_find+0x106>
 800b53a:	7d7b      	ldrb	r3, [r7, #21]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	e000      	b.n	800b544 <dir_find+0x108>
 800b542:	23ff      	movs	r3, #255	; 0xff
 800b544:	757b      	strb	r3, [r7, #21]
 800b546:	e024      	b.n	800b592 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b548:	7d7b      	ldrb	r3, [r7, #21]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <dir_find+0x126>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff feaa 	bl	800b2ac <sum_sfn>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	7d3b      	ldrb	r3, [r7, #20]
 800b55e:	4293      	cmp	r3, r2
 800b560:	d024      	beq.n	800b5ac <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <dir_find+0x14a>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a18      	ldr	r0, [r3, #32]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3324      	adds	r3, #36	; 0x24
 800b578:	220b      	movs	r2, #11
 800b57a:	4619      	mov	r1, r3
 800b57c:	f7fe fd90 	bl	800a0a0 <mem_cmp>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d014      	beq.n	800b5b0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b586:	23ff      	movs	r3, #255	; 0xff
 800b588:	757b      	strb	r3, [r7, #21]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f04f 32ff 	mov.w	r2, #4294967295
 800b590:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b592:	2100      	movs	r1, #0
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff fb73 	bl	800ac80 <dir_next>
 800b59a:	4603      	mov	r3, r0
 800b59c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f43f af65 	beq.w	800b470 <dir_find+0x34>
 800b5a6:	e004      	b.n	800b5b2 <dir_find+0x176>
		if (res != FR_OK) break;
 800b5a8:	bf00      	nop
 800b5aa:	e002      	b.n	800b5b2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b5ac:	bf00      	nop
 800b5ae:	e000      	b.n	800b5b2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b5b0:	bf00      	nop

	return res;
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08c      	sub	sp, #48	; 0x30
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <dir_register+0x20>
 800b5d8:	2306      	movs	r3, #6
 800b5da:	e0e0      	b.n	800b79e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b5dc:	2300      	movs	r3, #0
 800b5de:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e0:	e002      	b.n	800b5e8 <dir_register+0x2c>
 800b5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	68da      	ldr	r2, [r3, #12]
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	4413      	add	r3, r2
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1f4      	bne.n	800b5e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b5fe:	f107 030c 	add.w	r3, r7, #12
 800b602:	220c      	movs	r2, #12
 800b604:	4618      	mov	r0, r3
 800b606:	f7fe fd0f 	bl	800a028 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d032      	beq.n	800b67a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2240      	movs	r2, #64	; 0x40
 800b618:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b61c:	2301      	movs	r3, #1
 800b61e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b620:	e016      	b.n	800b650 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	f107 010c 	add.w	r1, r7, #12
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	f7ff fdad 	bl	800b190 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff ff00 	bl	800b43c <dir_find>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b646:	2b00      	cmp	r3, #0
 800b648:	d106      	bne.n	800b658 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	3301      	adds	r3, #1
 800b64e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	2b63      	cmp	r3, #99	; 0x63
 800b654:	d9e5      	bls.n	800b622 <dir_register+0x66>
 800b656:	e000      	b.n	800b65a <dir_register+0x9e>
			if (res != FR_OK) break;
 800b658:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	2b64      	cmp	r3, #100	; 0x64
 800b65e:	d101      	bne.n	800b664 <dir_register+0xa8>
 800b660:	2307      	movs	r3, #7
 800b662:	e09c      	b.n	800b79e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d002      	beq.n	800b672 <dir_register+0xb6>
 800b66c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b670:	e095      	b.n	800b79e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b672:	7dfa      	ldrb	r2, [r7, #23]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	f003 0302 	and.w	r3, r3, #2
 800b680:	2b00      	cmp	r3, #0
 800b682:	d007      	beq.n	800b694 <dir_register+0xd8>
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	330c      	adds	r3, #12
 800b688:	4a47      	ldr	r2, [pc, #284]	; (800b7a8 <dir_register+0x1ec>)
 800b68a:	fba2 2303 	umull	r2, r3, r2, r3
 800b68e:	089b      	lsrs	r3, r3, #2
 800b690:	3301      	adds	r3, #1
 800b692:	e000      	b.n	800b696 <dir_register+0xda>
 800b694:	2301      	movs	r3, #1
 800b696:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b698:	6a39      	ldr	r1, [r7, #32]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff fbb5 	bl	800ae0a <dir_alloc>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b6a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d148      	bne.n	800b740 <dir_register+0x184>
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	623b      	str	r3, [r7, #32]
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d042      	beq.n	800b740 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	695a      	ldr	r2, [r3, #20]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	015b      	lsls	r3, r3, #5
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff fa5f 	bl	800ab8a <dir_sdi>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b6d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d132      	bne.n	800b740 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3324      	adds	r3, #36	; 0x24
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fde4 	bl	800b2ac <sum_sfn>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	69db      	ldr	r3, [r3, #28]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	69f8      	ldr	r0, [r7, #28]
 800b6f0:	f7fe fec8 	bl	800a484 <move_window>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d11d      	bne.n	800b73e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	68d8      	ldr	r0, [r3, #12]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a19      	ldr	r1, [r3, #32]
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	7efb      	ldrb	r3, [r7, #27]
 800b710:	f7ff fcd6 	bl	800b0c0 <put_lfn>
				fs->wflag = 1;
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	2201      	movs	r2, #1
 800b718:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b71a:	2100      	movs	r1, #0
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff faaf 	bl	800ac80 <dir_next>
 800b722:	4603      	mov	r3, r0
 800b724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d107      	bne.n	800b740 <dir_register+0x184>
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	3b01      	subs	r3, #1
 800b734:	623b      	str	r3, [r7, #32]
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1d5      	bne.n	800b6e8 <dir_register+0x12c>
 800b73c:	e000      	b.n	800b740 <dir_register+0x184>
				if (res != FR_OK) break;
 800b73e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b744:	2b00      	cmp	r3, #0
 800b746:	d128      	bne.n	800b79a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	69db      	ldr	r3, [r3, #28]
 800b74c:	4619      	mov	r1, r3
 800b74e:	69f8      	ldr	r0, [r7, #28]
 800b750:	f7fe fe98 	bl	800a484 <move_window>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b75a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d11b      	bne.n	800b79a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	2220      	movs	r2, #32
 800b768:	2100      	movs	r1, #0
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fc7d 	bl	800a06a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a18      	ldr	r0, [r3, #32]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3324      	adds	r3, #36	; 0x24
 800b778:	220b      	movs	r2, #11
 800b77a:	4619      	mov	r1, r3
 800b77c:	f7fe fc54 	bl	800a028 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	330c      	adds	r3, #12
 800b78c:	f002 0218 	and.w	r2, r2, #24
 800b790:	b2d2      	uxtb	r2, r2
 800b792:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	2201      	movs	r2, #1
 800b798:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b79a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3730      	adds	r7, #48	; 0x30
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	4ec4ec4f 	.word	0x4ec4ec4f

0800b7ac <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 80c9 	beq.w	800b95e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d4:	d032      	beq.n	800b83c <get_fileinfo+0x90>
			i = j = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61bb      	str	r3, [r7, #24]
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b7de:	e01b      	b.n	800b818 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b7e0:	89fb      	ldrh	r3, [r7, #14]
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fb63 	bl	800ceb0 <ff_convert>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b7ee:	89fb      	ldrh	r3, [r7, #14]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <get_fileinfo+0x4e>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	61fb      	str	r3, [r7, #28]
 800b7f8:	e01a      	b.n	800b830 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	2bfe      	cmp	r3, #254	; 0xfe
 800b7fe:	d902      	bls.n	800b806 <get_fileinfo+0x5a>
 800b800:	2300      	movs	r3, #0
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	e014      	b.n	800b830 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	61fa      	str	r2, [r7, #28]
 800b80c:	89fa      	ldrh	r2, [r7, #14]
 800b80e:	b2d1      	uxtb	r1, r2
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	4413      	add	r3, r2
 800b814:	460a      	mov	r2, r1
 800b816:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	1c59      	adds	r1, r3, #1
 800b820:	61b9      	str	r1, [r7, #24]
 800b822:	005b      	lsls	r3, r3, #1
 800b824:	4413      	add	r3, r2
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	81fb      	strh	r3, [r7, #14]
 800b82a:	89fb      	ldrh	r3, [r7, #14]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1d7      	bne.n	800b7e0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	4413      	add	r3, r2
 800b836:	3316      	adds	r3, #22
 800b838:	2200      	movs	r2, #0
 800b83a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	61bb      	str	r3, [r7, #24]
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	4413      	add	r3, r2
 800b84a:	3316      	adds	r3, #22
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b850:	e04c      	b.n	800b8ec <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1a      	ldr	r2, [r3, #32]
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	1c59      	adds	r1, r3, #1
 800b85a:	61f9      	str	r1, [r7, #28]
 800b85c:	4413      	add	r3, r2
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	2b20      	cmp	r3, #32
 800b866:	d100      	bne.n	800b86a <get_fileinfo+0xbe>
 800b868:	e040      	b.n	800b8ec <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	2b05      	cmp	r3, #5
 800b86e:	d101      	bne.n	800b874 <get_fileinfo+0xc8>
 800b870:	23e5      	movs	r3, #229	; 0xe5
 800b872:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	2b09      	cmp	r3, #9
 800b878:	d10f      	bne.n	800b89a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b87a:	89bb      	ldrh	r3, [r7, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d105      	bne.n	800b88c <get_fileinfo+0xe0>
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	4413      	add	r3, r2
 800b886:	3316      	adds	r3, #22
 800b888:	222e      	movs	r2, #46	; 0x2e
 800b88a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	1c5a      	adds	r2, r3, #1
 800b890:	61ba      	str	r2, [r7, #24]
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	4413      	add	r3, r2
 800b896:	222e      	movs	r2, #46	; 0x2e
 800b898:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	4413      	add	r3, r2
 800b8a0:	3309      	adds	r3, #9
 800b8a2:	7dfa      	ldrb	r2, [r7, #23]
 800b8a4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b8a6:	89bb      	ldrh	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d11c      	bne.n	800b8e6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	2b40      	cmp	r3, #64	; 0x40
 800b8b0:	d913      	bls.n	800b8da <get_fileinfo+0x12e>
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	2b5a      	cmp	r3, #90	; 0x5a
 800b8b6:	d810      	bhi.n	800b8da <get_fileinfo+0x12e>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a1b      	ldr	r3, [r3, #32]
 800b8bc:	330c      	adds	r3, #12
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	2b08      	cmp	r3, #8
 800b8c6:	d901      	bls.n	800b8cc <get_fileinfo+0x120>
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	e000      	b.n	800b8ce <get_fileinfo+0x122>
 800b8cc:	2308      	movs	r3, #8
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b8d4:	7dfb      	ldrb	r3, [r7, #23]
 800b8d6:	3320      	adds	r3, #32
 800b8d8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	4413      	add	r3, r2
 800b8e0:	3316      	adds	r3, #22
 800b8e2:	7dfa      	ldrb	r2, [r7, #23]
 800b8e4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	2b0a      	cmp	r3, #10
 800b8f0:	d9af      	bls.n	800b852 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b8f2:	89bb      	ldrh	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10d      	bne.n	800b914 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3316      	adds	r3, #22
 800b900:	2200      	movs	r2, #0
 800b902:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a1b      	ldr	r3, [r3, #32]
 800b908:	330c      	adds	r3, #12
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <get_fileinfo+0x168>
 800b910:	2300      	movs	r3, #0
 800b912:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	4413      	add	r3, r2
 800b91a:	3309      	adds	r3, #9
 800b91c:	2200      	movs	r2, #0
 800b91e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	7ada      	ldrb	r2, [r3, #11]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	331c      	adds	r3, #28
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fb0f 	bl	8009f54 <ld_dword>
 800b936:	4602      	mov	r2, r0
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6a1b      	ldr	r3, [r3, #32]
 800b940:	3316      	adds	r3, #22
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe fb06 	bl	8009f54 <ld_dword>
 800b948:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	80da      	strh	r2, [r3, #6]
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	b29a      	uxth	r2, r3
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	809a      	strh	r2, [r3, #4]
 800b95c:	e000      	b.n	800b960 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b95e:	bf00      	nop
}
 800b960:	3720      	adds	r7, #32
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08a      	sub	sp, #40	; 0x28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	613b      	str	r3, [r7, #16]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	60fb      	str	r3, [r7, #12]
 800b980:	2300      	movs	r3, #0
 800b982:	617b      	str	r3, [r7, #20]
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	61ba      	str	r2, [r7, #24]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	4413      	add	r3, r2
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b998:	2b1f      	cmp	r3, #31
 800b99a:	d940      	bls.n	800ba1e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b99e:	2b2f      	cmp	r3, #47	; 0x2f
 800b9a0:	d006      	beq.n	800b9b0 <create_name+0x48>
 800b9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a4:	2b5c      	cmp	r3, #92	; 0x5c
 800b9a6:	d110      	bne.n	800b9ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b9a8:	e002      	b.n	800b9b0 <create_name+0x48>
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	61bb      	str	r3, [r7, #24]
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	2b2f      	cmp	r3, #47	; 0x2f
 800b9ba:	d0f6      	beq.n	800b9aa <create_name+0x42>
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	2b5c      	cmp	r3, #92	; 0x5c
 800b9c6:	d0f0      	beq.n	800b9aa <create_name+0x42>
			break;
 800b9c8:	e02a      	b.n	800ba20 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2bfe      	cmp	r3, #254	; 0xfe
 800b9ce:	d901      	bls.n	800b9d4 <create_name+0x6c>
 800b9d0:	2306      	movs	r3, #6
 800b9d2:	e17d      	b.n	800bcd0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9dc:	2101      	movs	r1, #1
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f001 fa66 	bl	800ceb0 <ff_convert>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b9e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <create_name+0x8a>
 800b9ee:	2306      	movs	r3, #6
 800b9f0:	e16e      	b.n	800bcd0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9f4:	2b7f      	cmp	r3, #127	; 0x7f
 800b9f6:	d809      	bhi.n	800ba0c <create_name+0xa4>
 800b9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	488d      	ldr	r0, [pc, #564]	; (800bc34 <create_name+0x2cc>)
 800b9fe:	f7fe fb76 	bl	800a0ee <chk_chr>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <create_name+0xa4>
 800ba08:	2306      	movs	r3, #6
 800ba0a:	e161      	b.n	800bcd0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	617a      	str	r2, [r7, #20]
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	4413      	add	r3, r2
 800ba18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba1a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ba1c:	e7b4      	b.n	800b988 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ba1e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	441a      	add	r2, r3
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ba2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba2c:	2b1f      	cmp	r3, #31
 800ba2e:	d801      	bhi.n	800ba34 <create_name+0xcc>
 800ba30:	2304      	movs	r3, #4
 800ba32:	e000      	b.n	800ba36 <create_name+0xce>
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba3a:	e011      	b.n	800ba60 <create_name+0xf8>
		w = lfn[di - 1];
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ba42:	4413      	add	r3, r2
 800ba44:	005b      	lsls	r3, r3, #1
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	4413      	add	r3, r2
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ba4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba50:	2b20      	cmp	r3, #32
 800ba52:	d002      	beq.n	800ba5a <create_name+0xf2>
 800ba54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba56:	2b2e      	cmp	r3, #46	; 0x2e
 800ba58:	d106      	bne.n	800ba68 <create_name+0x100>
		di--;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1ea      	bne.n	800ba3c <create_name+0xd4>
 800ba66:	e000      	b.n	800ba6a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ba68:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	4413      	add	r3, r2
 800ba72:	2200      	movs	r2, #0
 800ba74:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <create_name+0x118>
 800ba7c:	2306      	movs	r3, #6
 800ba7e:	e127      	b.n	800bcd0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3324      	adds	r3, #36	; 0x24
 800ba84:	220b      	movs	r2, #11
 800ba86:	2120      	movs	r1, #32
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe faee 	bl	800a06a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ba8e:	2300      	movs	r3, #0
 800ba90:	61bb      	str	r3, [r7, #24]
 800ba92:	e002      	b.n	800ba9a <create_name+0x132>
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	3301      	adds	r3, #1
 800ba98:	61bb      	str	r3, [r7, #24]
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	4413      	add	r3, r2
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	d0f5      	beq.n	800ba94 <create_name+0x12c>
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	005b      	lsls	r3, r3, #1
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	2b2e      	cmp	r3, #46	; 0x2e
 800bab4:	d0ee      	beq.n	800ba94 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d009      	beq.n	800bad0 <create_name+0x168>
 800babc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac0:	f043 0303 	orr.w	r3, r3, #3
 800bac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bac8:	e002      	b.n	800bad0 <create_name+0x168>
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	3b01      	subs	r3, #1
 800bace:	617b      	str	r3, [r7, #20]
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d009      	beq.n	800baea <create_name+0x182>
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800badc:	4413      	add	r3, r2
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	4413      	add	r3, r2
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	2b2e      	cmp	r3, #46	; 0x2e
 800bae8:	d1ef      	bne.n	800baca <create_name+0x162>

	i = b = 0; ni = 8;
 800baea:	2300      	movs	r3, #0
 800baec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800baf0:	2300      	movs	r3, #0
 800baf2:	623b      	str	r3, [r7, #32]
 800baf4:	2308      	movs	r3, #8
 800baf6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	61ba      	str	r2, [r7, #24]
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4413      	add	r3, r2
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 8090 	beq.w	800bc30 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bb10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb12:	2b20      	cmp	r3, #32
 800bb14:	d006      	beq.n	800bb24 <create_name+0x1bc>
 800bb16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb18:	2b2e      	cmp	r3, #46	; 0x2e
 800bb1a:	d10a      	bne.n	800bb32 <create_name+0x1ca>
 800bb1c:	69ba      	ldr	r2, [r7, #24]
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d006      	beq.n	800bb32 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb28:	f043 0303 	orr.w	r3, r3, #3
 800bb2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb30:	e07d      	b.n	800bc2e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bb32:	6a3a      	ldr	r2, [r7, #32]
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d203      	bcs.n	800bb42 <create_name+0x1da>
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d123      	bne.n	800bb8a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	2b0b      	cmp	r3, #11
 800bb46:	d106      	bne.n	800bb56 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb4c:	f043 0303 	orr.w	r3, r3, #3
 800bb50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb54:	e075      	b.n	800bc42 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bb56:	69ba      	ldr	r2, [r7, #24]
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d005      	beq.n	800bb6a <create_name+0x202>
 800bb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb62:	f043 0303 	orr.w	r3, r3, #3
 800bb66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d866      	bhi.n	800bc40 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	61bb      	str	r3, [r7, #24]
 800bb76:	2308      	movs	r3, #8
 800bb78:	623b      	str	r3, [r7, #32]
 800bb7a:	230b      	movs	r3, #11
 800bb7c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bb7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb88:	e051      	b.n	800bc2e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bb8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb8c:	2b7f      	cmp	r3, #127	; 0x7f
 800bb8e:	d914      	bls.n	800bbba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bb90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb92:	2100      	movs	r1, #0
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 f98b 	bl	800ceb0 <ff_convert>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bb9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <create_name+0x246>
 800bba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bba6:	3b80      	subs	r3, #128	; 0x80
 800bba8:	4a23      	ldr	r2, [pc, #140]	; (800bc38 <create_name+0x2d0>)
 800bbaa:	5cd3      	ldrb	r3, [r2, r3]
 800bbac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bbae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbb2:	f043 0302 	orr.w	r3, r3, #2
 800bbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bbba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <create_name+0x268>
 800bbc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	481d      	ldr	r0, [pc, #116]	; (800bc3c <create_name+0x2d4>)
 800bbc6:	f7fe fa92 	bl	800a0ee <chk_chr>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d008      	beq.n	800bbe2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bbd0:	235f      	movs	r3, #95	; 0x5f
 800bbd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbd8:	f043 0303 	orr.w	r3, r3, #3
 800bbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbe0:	e01b      	b.n	800bc1a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bbe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbe4:	2b40      	cmp	r3, #64	; 0x40
 800bbe6:	d909      	bls.n	800bbfc <create_name+0x294>
 800bbe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbea:	2b5a      	cmp	r3, #90	; 0x5a
 800bbec:	d806      	bhi.n	800bbfc <create_name+0x294>
					b |= 2;
 800bbee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbf2:	f043 0302 	orr.w	r3, r3, #2
 800bbf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bbfa:	e00e      	b.n	800bc1a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bbfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbfe:	2b60      	cmp	r3, #96	; 0x60
 800bc00:	d90b      	bls.n	800bc1a <create_name+0x2b2>
 800bc02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc04:	2b7a      	cmp	r3, #122	; 0x7a
 800bc06:	d808      	bhi.n	800bc1a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bc08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc0c:	f043 0301 	orr.w	r3, r3, #1
 800bc10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc16:	3b20      	subs	r3, #32
 800bc18:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bc1a:	6a3b      	ldr	r3, [r7, #32]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	623a      	str	r2, [r7, #32]
 800bc20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc22:	b2d1      	uxtb	r1, r2
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	4413      	add	r3, r2
 800bc28:	460a      	mov	r2, r1
 800bc2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bc2e:	e763      	b.n	800baf8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bc30:	bf00      	nop
 800bc32:	e006      	b.n	800bc42 <create_name+0x2da>
 800bc34:	0800e694 	.word	0x0800e694
 800bc38:	0800f0dc 	.word	0x0800f0dc
 800bc3c:	0800e6a0 	.word	0x0800e6a0
			if (si > di) break;			/* No extension */
 800bc40:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc48:	2be5      	cmp	r3, #229	; 0xe5
 800bc4a:	d103      	bne.n	800bc54 <create_name+0x2ec>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2205      	movs	r2, #5
 800bc50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	2b08      	cmp	r3, #8
 800bc58:	d104      	bne.n	800bc64 <create_name+0x2fc>
 800bc5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bc64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc68:	f003 030c 	and.w	r3, r3, #12
 800bc6c:	2b0c      	cmp	r3, #12
 800bc6e:	d005      	beq.n	800bc7c <create_name+0x314>
 800bc70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc74:	f003 0303 	and.w	r3, r3, #3
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d105      	bne.n	800bc88 <create_name+0x320>
 800bc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc80:	f043 0302 	orr.w	r3, r3, #2
 800bc84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bc88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc8c:	f003 0302 	and.w	r3, r3, #2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d117      	bne.n	800bcc4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bc94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc98:	f003 0303 	and.w	r3, r3, #3
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d105      	bne.n	800bcac <create_name+0x344>
 800bca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca4:	f043 0310 	orr.w	r3, r3, #16
 800bca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bcac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bcb0:	f003 030c 	and.w	r3, r3, #12
 800bcb4:	2b04      	cmp	r3, #4
 800bcb6:	d105      	bne.n	800bcc4 <create_name+0x35c>
 800bcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcbc:	f043 0308 	orr.w	r3, r3, #8
 800bcc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bcca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bcce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3728      	adds	r7, #40	; 0x28
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bcec:	e002      	b.n	800bcf4 <follow_path+0x1c>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b2f      	cmp	r3, #47	; 0x2f
 800bcfa:	d0f8      	beq.n	800bcee <follow_path+0x16>
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b5c      	cmp	r3, #92	; 0x5c
 800bd02:	d0f4      	beq.n	800bcee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	2200      	movs	r2, #0
 800bd08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b1f      	cmp	r3, #31
 800bd10:	d80a      	bhi.n	800bd28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2280      	movs	r2, #128	; 0x80
 800bd16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7fe ff34 	bl	800ab8a <dir_sdi>
 800bd22:	4603      	mov	r3, r0
 800bd24:	75fb      	strb	r3, [r7, #23]
 800bd26:	e043      	b.n	800bdb0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd28:	463b      	mov	r3, r7
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7ff fe1b 	bl	800b968 <create_name>
 800bd32:	4603      	mov	r3, r0
 800bd34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d134      	bne.n	800bda6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff fb7d 	bl	800b43c <dir_find>
 800bd42:	4603      	mov	r3, r0
 800bd44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	d127      	bne.n	800bdaa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd5a:	7afb      	ldrb	r3, [r7, #11]
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d122      	bne.n	800bdaa <follow_path+0xd2>
 800bd64:	2305      	movs	r3, #5
 800bd66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd68:	e01f      	b.n	800bdaa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd6a:	7afb      	ldrb	r3, [r7, #11]
 800bd6c:	f003 0304 	and.w	r3, r3, #4
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d11c      	bne.n	800bdae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	799b      	ldrb	r3, [r3, #6]
 800bd78:	f003 0310 	and.w	r3, r3, #16
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bd80:	2305      	movs	r3, #5
 800bd82:	75fb      	strb	r3, [r7, #23]
 800bd84:	e014      	b.n	800bdb0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd94:	4413      	add	r3, r2
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff f87d 	bl	800ae98 <ld_clust>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bda4:	e7c0      	b.n	800bd28 <follow_path+0x50>
			if (res != FR_OK) break;
 800bda6:	bf00      	nop
 800bda8:	e002      	b.n	800bdb0 <follow_path+0xd8>
				break;
 800bdaa:	bf00      	nop
 800bdac:	e000      	b.n	800bdb0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bdae:	bf00      	nop
			}
		}
	}

	return res;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b087      	sub	sp, #28
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d031      	beq.n	800be34 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	e002      	b.n	800bdde <get_ldnumber+0x24>
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	3301      	adds	r3, #1
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b1f      	cmp	r3, #31
 800bde4:	d903      	bls.n	800bdee <get_ldnumber+0x34>
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b3a      	cmp	r3, #58	; 0x3a
 800bdec:	d1f4      	bne.n	800bdd8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	2b3a      	cmp	r3, #58	; 0x3a
 800bdf4:	d11c      	bne.n	800be30 <get_ldnumber+0x76>
			tp = *path;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	60fa      	str	r2, [r7, #12]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	3b30      	subs	r3, #48	; 0x30
 800be06:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b09      	cmp	r3, #9
 800be0c:	d80e      	bhi.n	800be2c <get_ldnumber+0x72>
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	429a      	cmp	r2, r3
 800be14:	d10a      	bne.n	800be2c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d107      	bne.n	800be2c <get_ldnumber+0x72>
					vol = (int)i;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	3301      	adds	r3, #1
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	e002      	b.n	800be36 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800be30:	2300      	movs	r3, #0
 800be32:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800be34:	693b      	ldr	r3, [r7, #16]
}
 800be36:	4618      	mov	r0, r3
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
	...

0800be44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	70da      	strb	r2, [r3, #3]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f04f 32ff 	mov.w	r2, #4294967295
 800be5a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7fe fb10 	bl	800a484 <move_window>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <check_fs+0x2a>
 800be6a:	2304      	movs	r3, #4
 800be6c:	e038      	b.n	800bee0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3334      	adds	r3, #52	; 0x34
 800be72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe f854 	bl	8009f24 <ld_word>
 800be7c:	4603      	mov	r3, r0
 800be7e:	461a      	mov	r2, r3
 800be80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be84:	429a      	cmp	r2, r3
 800be86:	d001      	beq.n	800be8c <check_fs+0x48>
 800be88:	2303      	movs	r3, #3
 800be8a:	e029      	b.n	800bee0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be92:	2be9      	cmp	r3, #233	; 0xe9
 800be94:	d009      	beq.n	800beaa <check_fs+0x66>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be9c:	2beb      	cmp	r3, #235	; 0xeb
 800be9e:	d11e      	bne.n	800bede <check_fs+0x9a>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bea6:	2b90      	cmp	r3, #144	; 0x90
 800bea8:	d119      	bne.n	800bede <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3334      	adds	r3, #52	; 0x34
 800beae:	3336      	adds	r3, #54	; 0x36
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe f84f 	bl	8009f54 <ld_dword>
 800beb6:	4603      	mov	r3, r0
 800beb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bebc:	4a0a      	ldr	r2, [pc, #40]	; (800bee8 <check_fs+0xa4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d101      	bne.n	800bec6 <check_fs+0x82>
 800bec2:	2300      	movs	r3, #0
 800bec4:	e00c      	b.n	800bee0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	3334      	adds	r3, #52	; 0x34
 800beca:	3352      	adds	r3, #82	; 0x52
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe f841 	bl	8009f54 <ld_dword>
 800bed2:	4603      	mov	r3, r0
 800bed4:	4a05      	ldr	r2, [pc, #20]	; (800beec <check_fs+0xa8>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d101      	bne.n	800bede <check_fs+0x9a>
 800beda:	2300      	movs	r3, #0
 800bedc:	e000      	b.n	800bee0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bede:	2302      	movs	r3, #2
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	00544146 	.word	0x00544146
 800beec:	33544146 	.word	0x33544146

0800bef0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b096      	sub	sp, #88	; 0x58
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	4613      	mov	r3, r2
 800befc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f7ff ff58 	bl	800bdba <get_ldnumber>
 800bf0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	da01      	bge.n	800bf16 <find_volume+0x26>
 800bf12:	230b      	movs	r3, #11
 800bf14:	e230      	b.n	800c378 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bf16:	4aa1      	ldr	r2, [pc, #644]	; (800c19c <find_volume+0x2ac>)
 800bf18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <find_volume+0x3a>
 800bf26:	230c      	movs	r3, #12
 800bf28:	e226      	b.n	800c378 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf30:	79fb      	ldrb	r3, [r7, #7]
 800bf32:	f023 0301 	bic.w	r3, r3, #1
 800bf36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01a      	beq.n	800bf76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fd ff4d 	bl	8009de4 <disk_status>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf54:	f003 0301 	and.w	r3, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10c      	bne.n	800bf76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d007      	beq.n	800bf72 <find_volume+0x82>
 800bf62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf66:	f003 0304 	and.w	r3, r3, #4
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bf6e:	230a      	movs	r3, #10
 800bf70:	e202      	b.n	800c378 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800bf72:	2300      	movs	r3, #0
 800bf74:	e200      	b.n	800c378 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fd ff45 	bl	8009e18 <disk_initialize>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e1e9      	b.n	800c378 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d007      	beq.n	800bfba <find_volume+0xca>
 800bfaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bfae:	f003 0304 	and.w	r3, r3, #4
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bfb6:	230a      	movs	r3, #10
 800bfb8:	e1de      	b.n	800c378 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bfbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfc2:	f7ff ff3f 	bl	800be44 <check_fs>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bfcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d149      	bne.n	800c068 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	643b      	str	r3, [r7, #64]	; 0x40
 800bfd8:	e01e      	b.n	800c018 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe2:	011b      	lsls	r3, r3, #4
 800bfe4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bfe8:	4413      	add	r3, r2
 800bfea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	3304      	adds	r3, #4
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d006      	beq.n	800c004 <find_volume+0x114>
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	3308      	adds	r3, #8
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fd ffaa 	bl	8009f54 <ld_dword>
 800c000:	4602      	mov	r2, r0
 800c002:	e000      	b.n	800c006 <find_volume+0x116>
 800c004:	2200      	movs	r2, #0
 800c006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	3358      	adds	r3, #88	; 0x58
 800c00c:	443b      	add	r3, r7
 800c00e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c014:	3301      	adds	r3, #1
 800c016:	643b      	str	r3, [r7, #64]	; 0x40
 800c018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d9dd      	bls.n	800bfda <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c01e:	2300      	movs	r3, #0
 800c020:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <find_volume+0x13e>
 800c028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c02a:	3b01      	subs	r3, #1
 800c02c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	3358      	adds	r3, #88	; 0x58
 800c034:	443b      	add	r3, r7
 800c036:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c03a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d005      	beq.n	800c04e <find_volume+0x15e>
 800c042:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c046:	f7ff fefd 	bl	800be44 <check_fs>
 800c04a:	4603      	mov	r3, r0
 800c04c:	e000      	b.n	800c050 <find_volume+0x160>
 800c04e:	2303      	movs	r3, #3
 800c050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d905      	bls.n	800c068 <find_volume+0x178>
 800c05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c05e:	3301      	adds	r3, #1
 800c060:	643b      	str	r3, [r7, #64]	; 0x40
 800c062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c064:	2b03      	cmp	r3, #3
 800c066:	d9e2      	bls.n	800c02e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c068:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c06c:	2b04      	cmp	r3, #4
 800c06e:	d101      	bne.n	800c074 <find_volume+0x184>
 800c070:	2301      	movs	r3, #1
 800c072:	e181      	b.n	800c378 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d901      	bls.n	800c080 <find_volume+0x190>
 800c07c:	230d      	movs	r3, #13
 800c07e:	e17b      	b.n	800c378 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	3334      	adds	r3, #52	; 0x34
 800c084:	330b      	adds	r3, #11
 800c086:	4618      	mov	r0, r3
 800c088:	f7fd ff4c 	bl	8009f24 <ld_word>
 800c08c:	4603      	mov	r3, r0
 800c08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c092:	d001      	beq.n	800c098 <find_volume+0x1a8>
 800c094:	230d      	movs	r3, #13
 800c096:	e16f      	b.n	800c378 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	3334      	adds	r3, #52	; 0x34
 800c09c:	3316      	adds	r3, #22
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fd ff40 	bl	8009f24 <ld_word>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c0a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d106      	bne.n	800c0bc <find_volume+0x1cc>
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	3334      	adds	r3, #52	; 0x34
 800c0b2:	3324      	adds	r3, #36	; 0x24
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fd ff4d 	bl	8009f54 <ld_dword>
 800c0ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0c0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	789b      	ldrb	r3, [r3, #2]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d005      	beq.n	800c0e0 <find_volume+0x1f0>
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	789b      	ldrb	r3, [r3, #2]
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d001      	beq.n	800c0e0 <find_volume+0x1f0>
 800c0dc:	230d      	movs	r3, #13
 800c0de:	e14b      	b.n	800c378 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	789b      	ldrb	r3, [r3, #2]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e8:	fb02 f303 	mul.w	r3, r2, r3
 800c0ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	895b      	ldrh	r3, [r3, #10]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d008      	beq.n	800c114 <find_volume+0x224>
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	895b      	ldrh	r3, [r3, #10]
 800c106:	461a      	mov	r2, r3
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	895b      	ldrh	r3, [r3, #10]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	4013      	ands	r3, r2
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <find_volume+0x228>
 800c114:	230d      	movs	r3, #13
 800c116:	e12f      	b.n	800c378 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	3334      	adds	r3, #52	; 0x34
 800c11c:	3311      	adds	r3, #17
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fd ff00 	bl	8009f24 <ld_word>
 800c124:	4603      	mov	r3, r0
 800c126:	461a      	mov	r2, r3
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	891b      	ldrh	r3, [r3, #8]
 800c130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c134:	b29b      	uxth	r3, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <find_volume+0x24e>
 800c13a:	230d      	movs	r3, #13
 800c13c:	e11c      	b.n	800c378 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	3334      	adds	r3, #52	; 0x34
 800c142:	3313      	adds	r3, #19
 800c144:	4618      	mov	r0, r3
 800c146:	f7fd feed 	bl	8009f24 <ld_word>
 800c14a:	4603      	mov	r3, r0
 800c14c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c14e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c150:	2b00      	cmp	r3, #0
 800c152:	d106      	bne.n	800c162 <find_volume+0x272>
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	3334      	adds	r3, #52	; 0x34
 800c158:	3320      	adds	r3, #32
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fd fefa 	bl	8009f54 <ld_dword>
 800c160:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c164:	3334      	adds	r3, #52	; 0x34
 800c166:	330e      	adds	r3, #14
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fd fedb 	bl	8009f24 <ld_word>
 800c16e:	4603      	mov	r3, r0
 800c170:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <find_volume+0x28c>
 800c178:	230d      	movs	r3, #13
 800c17a:	e0fd      	b.n	800c378 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c17c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c180:	4413      	add	r3, r2
 800c182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c184:	8912      	ldrh	r2, [r2, #8]
 800c186:	09d2      	lsrs	r2, r2, #7
 800c188:	b292      	uxth	r2, r2
 800c18a:	4413      	add	r3, r2
 800c18c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c18e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	429a      	cmp	r2, r3
 800c194:	d204      	bcs.n	800c1a0 <find_volume+0x2b0>
 800c196:	230d      	movs	r3, #13
 800c198:	e0ee      	b.n	800c378 <find_volume+0x488>
 800c19a:	bf00      	nop
 800c19c:	2400244c 	.word	0x2400244c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c1a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a8:	8952      	ldrh	r2, [r2, #10]
 800c1aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <find_volume+0x2ca>
 800c1b6:	230d      	movs	r3, #13
 800c1b8:	e0de      	b.n	800c378 <find_volume+0x488>
		fmt = FS_FAT32;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d802      	bhi.n	800c1d0 <find_volume+0x2e0>
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d802      	bhi.n	800c1e0 <find_volume+0x2f0>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	1c9a      	adds	r2, r3, #2
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1ec:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f2:	441a      	add	r2, r3
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c1f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	441a      	add	r2, r3
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c206:	2b03      	cmp	r3, #3
 800c208:	d11e      	bne.n	800c248 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20c:	3334      	adds	r3, #52	; 0x34
 800c20e:	332a      	adds	r3, #42	; 0x2a
 800c210:	4618      	mov	r0, r3
 800c212:	f7fd fe87 	bl	8009f24 <ld_word>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <find_volume+0x330>
 800c21c:	230d      	movs	r3, #13
 800c21e:	e0ab      	b.n	800c378 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c222:	891b      	ldrh	r3, [r3, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <find_volume+0x33c>
 800c228:	230d      	movs	r3, #13
 800c22a:	e0a5      	b.n	800c378 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	3334      	adds	r3, #52	; 0x34
 800c230:	332c      	adds	r3, #44	; 0x2c
 800c232:	4618      	mov	r0, r3
 800c234:	f7fd fe8e 	bl	8009f54 <ld_dword>
 800c238:	4602      	mov	r2, r0
 800c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	647b      	str	r3, [r7, #68]	; 0x44
 800c246:	e01f      	b.n	800c288 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24a:	891b      	ldrh	r3, [r3, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <find_volume+0x364>
 800c250:	230d      	movs	r3, #13
 800c252:	e091      	b.n	800c378 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c25a:	441a      	add	r2, r3
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c264:	2b02      	cmp	r3, #2
 800c266:	d103      	bne.n	800c270 <find_volume+0x380>
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	e00a      	b.n	800c286 <find_volume+0x396>
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	699a      	ldr	r2, [r3, #24]
 800c274:	4613      	mov	r3, r2
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	4413      	add	r3, r2
 800c27a:	085a      	lsrs	r2, r3, #1
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c286:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	69da      	ldr	r2, [r3, #28]
 800c28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c28e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800c292:	0b1b      	lsrs	r3, r3, #12
 800c294:	429a      	cmp	r2, r3
 800c296:	d201      	bcs.n	800c29c <find_volume+0x3ac>
 800c298:	230d      	movs	r3, #13
 800c29a:	e06d      	b.n	800c378 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a2:	615a      	str	r2, [r3, #20]
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	695a      	ldr	r2, [r3, #20]
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	2280      	movs	r2, #128	; 0x80
 800c2b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c2b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d149      	bne.n	800c34e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2bc:	3334      	adds	r3, #52	; 0x34
 800c2be:	3330      	adds	r3, #48	; 0x30
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fd fe2f 	bl	8009f24 <ld_word>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d140      	bne.n	800c34e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c2cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2d4:	f7fe f8d6 	bl	800a484 <move_window>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d137      	bne.n	800c34e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	3334      	adds	r3, #52	; 0x34
 800c2e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fd fe19 	bl	8009f24 <ld_word>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d127      	bne.n	800c34e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	3334      	adds	r3, #52	; 0x34
 800c302:	4618      	mov	r0, r3
 800c304:	f7fd fe26 	bl	8009f54 <ld_dword>
 800c308:	4603      	mov	r3, r0
 800c30a:	4a1d      	ldr	r2, [pc, #116]	; (800c380 <find_volume+0x490>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d11e      	bne.n	800c34e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	3334      	adds	r3, #52	; 0x34
 800c314:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fd fe1b 	bl	8009f54 <ld_dword>
 800c31e:	4603      	mov	r3, r0
 800c320:	4a18      	ldr	r2, [pc, #96]	; (800c384 <find_volume+0x494>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d113      	bne.n	800c34e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	3334      	adds	r3, #52	; 0x34
 800c32a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fd fe10 	bl	8009f54 <ld_dword>
 800c334:	4602      	mov	r2, r0
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33c:	3334      	adds	r3, #52	; 0x34
 800c33e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c342:	4618      	mov	r0, r3
 800c344:	f7fd fe06 	bl	8009f54 <ld_dword>
 800c348:	4602      	mov	r2, r0
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c354:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <find_volume+0x498>)
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	3301      	adds	r3, #1
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	4b0a      	ldr	r3, [pc, #40]	; (800c388 <find_volume+0x498>)
 800c360:	801a      	strh	r2, [r3, #0]
 800c362:	4b09      	ldr	r3, [pc, #36]	; (800c388 <find_volume+0x498>)
 800c364:	881a      	ldrh	r2, [r3, #0]
 800c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c368:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	4a07      	ldr	r2, [pc, #28]	; (800c38c <find_volume+0x49c>)
 800c36e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c370:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c372:	f7fe f81f 	bl	800a3b4 <clear_lock>
#endif
	return FR_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3758      	adds	r7, #88	; 0x58
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	41615252 	.word	0x41615252
 800c384:	61417272 	.word	0x61417272
 800c388:	24002450 	.word	0x24002450
 800c38c:	24002474 	.word	0x24002474

0800c390 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c39a:	2309      	movs	r3, #9
 800c39c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d01c      	beq.n	800c3de <validate+0x4e>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d018      	beq.n	800c3de <validate+0x4e>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d013      	beq.n	800c3de <validate+0x4e>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	889a      	ldrh	r2, [r3, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	88db      	ldrh	r3, [r3, #6]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d10c      	bne.n	800c3de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	785b      	ldrb	r3, [r3, #1]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fd fd0a 	bl	8009de4 <disk_status>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <validate+0x4e>
			res = FR_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <validate+0x5a>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	e000      	b.n	800c3ec <validate+0x5c>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	6013      	str	r3, [r2, #0]
	return res;
 800c3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	4613      	mov	r3, r2
 800c408:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c40e:	f107 0310 	add.w	r3, r7, #16
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fcd1 	bl	800bdba <get_ldnumber>
 800c418:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	da01      	bge.n	800c424 <f_mount+0x28>
 800c420:	230b      	movs	r3, #11
 800c422:	e02b      	b.n	800c47c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c424:	4a17      	ldr	r2, [pc, #92]	; (800c484 <f_mount+0x88>)
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c42c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d005      	beq.n	800c440 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c434:	69b8      	ldr	r0, [r7, #24]
 800c436:	f7fd ffbd 	bl	800a3b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2200      	movs	r2, #0
 800c43e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	490d      	ldr	r1, [pc, #52]	; (800c484 <f_mount+0x88>)
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <f_mount+0x66>
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d001      	beq.n	800c466 <f_mount+0x6a>
 800c462:	2300      	movs	r3, #0
 800c464:	e00a      	b.n	800c47c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c466:	f107 010c 	add.w	r1, r7, #12
 800c46a:	f107 0308 	add.w	r3, r7, #8
 800c46e:	2200      	movs	r2, #0
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff fd3d 	bl	800bef0 <find_volume>
 800c476:	4603      	mov	r3, r0
 800c478:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3720      	adds	r7, #32
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	2400244c 	.word	0x2400244c

0800c488 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b09a      	sub	sp, #104	; 0x68
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	4613      	mov	r3, r2
 800c494:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d101      	bne.n	800c4a0 <f_open+0x18>
 800c49c:	2309      	movs	r3, #9
 800c49e:	e1ad      	b.n	800c7fc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c4a8:	79fa      	ldrb	r2, [r7, #7]
 800c4aa:	f107 0114 	add.w	r1, r7, #20
 800c4ae:	f107 0308 	add.w	r3, r7, #8
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff fd1c 	bl	800bef0 <find_volume>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c4be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f040 8191 	bne.w	800c7ea <f_open+0x362>
		dj.obj.fs = fs;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	f107 0318 	add.w	r3, r7, #24
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff fbff 	bl	800bcd8 <follow_path>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d11a      	bne.n	800c51e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c4e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c4ec:	b25b      	sxtb	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	da03      	bge.n	800c4fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800c4f2:	2306      	movs	r3, #6
 800c4f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4f8:	e011      	b.n	800c51e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	f023 0301 	bic.w	r3, r3, #1
 800c500:	2b00      	cmp	r3, #0
 800c502:	bf14      	ite	ne
 800c504:	2301      	movne	r3, #1
 800c506:	2300      	moveq	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	461a      	mov	r2, r3
 800c50c:	f107 0318 	add.w	r3, r7, #24
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7fd fe06 	bl	800a124 <chk_lock>
 800c518:	4603      	mov	r3, r0
 800c51a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	f003 031c 	and.w	r3, r3, #28
 800c524:	2b00      	cmp	r3, #0
 800c526:	d07f      	beq.n	800c628 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d017      	beq.n	800c560 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c530:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c534:	2b04      	cmp	r3, #4
 800c536:	d10e      	bne.n	800c556 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c538:	f7fd fe50 	bl	800a1dc <enq_lock>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d006      	beq.n	800c550 <f_open+0xc8>
 800c542:	f107 0318 	add.w	r3, r7, #24
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff f838 	bl	800b5bc <dir_register>
 800c54c:	4603      	mov	r3, r0
 800c54e:	e000      	b.n	800c552 <f_open+0xca>
 800c550:	2312      	movs	r3, #18
 800c552:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	f043 0308 	orr.w	r3, r3, #8
 800c55c:	71fb      	strb	r3, [r7, #7]
 800c55e:	e010      	b.n	800c582 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c560:	7fbb      	ldrb	r3, [r7, #30]
 800c562:	f003 0311 	and.w	r3, r3, #17
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <f_open+0xea>
					res = FR_DENIED;
 800c56a:	2307      	movs	r3, #7
 800c56c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c570:	e007      	b.n	800c582 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <f_open+0xfa>
 800c57c:	2308      	movs	r3, #8
 800c57e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c586:	2b00      	cmp	r3, #0
 800c588:	d168      	bne.n	800c65c <f_open+0x1d4>
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	f003 0308 	and.w	r3, r3, #8
 800c590:	2b00      	cmp	r3, #0
 800c592:	d063      	beq.n	800c65c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c594:	f7fd fbc4 	bl	8009d20 <get_fattime>
 800c598:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	330e      	adds	r3, #14
 800c59e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fd fd15 	bl	8009fd0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a8:	3316      	adds	r3, #22
 800c5aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd fd0f 	bl	8009fd0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b4:	330b      	adds	r3, #11
 800c5b6:	2220      	movs	r2, #32
 800c5b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fe fc69 	bl	800ae98 <ld_clust>
 800c5c6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fe fc81 	bl	800aed6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	331c      	adds	r3, #28
 800c5d8:	2100      	movs	r1, #0
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fd fcf8 	bl	8009fd0 <st_dword>
					fs->wflag = 1;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c5e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d037      	beq.n	800c65c <f_open+0x1d4>
						dw = fs->winsect;
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c5f2:	f107 0318 	add.w	r3, r7, #24
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe f994 	bl	800a928 <remove_chain>
 800c600:	4603      	mov	r3, r0
 800c602:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c606:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d126      	bne.n	800c65c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c612:	4618      	mov	r0, r3
 800c614:	f7fd ff36 	bl	800a484 <move_window>
 800c618:	4603      	mov	r3, r0
 800c61a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c622:	3a01      	subs	r2, #1
 800c624:	611a      	str	r2, [r3, #16]
 800c626:	e019      	b.n	800c65c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d115      	bne.n	800c65c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c630:	7fbb      	ldrb	r3, [r7, #30]
 800c632:	f003 0310 	and.w	r3, r3, #16
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c63a:	2304      	movs	r3, #4
 800c63c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c640:	e00c      	b.n	800c65c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	f003 0302 	and.w	r3, r3, #2
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d007      	beq.n	800c65c <f_open+0x1d4>
 800c64c:	7fbb      	ldrb	r3, [r7, #30]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <f_open+0x1d4>
						res = FR_DENIED;
 800c656:	2307      	movs	r3, #7
 800c658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c65c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c660:	2b00      	cmp	r3, #0
 800c662:	d128      	bne.n	800c6b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	f003 0308 	and.w	r3, r3, #8
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c66e:	79fb      	ldrb	r3, [r7, #7]
 800c670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c674:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c67e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c684:	79fb      	ldrb	r3, [r7, #7]
 800c686:	f023 0301 	bic.w	r3, r3, #1
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bf14      	ite	ne
 800c68e:	2301      	movne	r3, #1
 800c690:	2300      	moveq	r3, #0
 800c692:	b2db      	uxtb	r3, r3
 800c694:	461a      	mov	r2, r3
 800c696:	f107 0318 	add.w	r3, r7, #24
 800c69a:	4611      	mov	r1, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fd fdbf 	bl	800a220 <inc_lock>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d102      	bne.n	800c6b6 <f_open+0x22e>
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c6b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f040 8095 	bne.w	800c7ea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fe fbe6 	bl	800ae98 <ld_clust>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d4:	331c      	adds	r3, #28
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fd fc3c 	bl	8009f54 <ld_dword>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	88da      	ldrh	r2, [r3, #6]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	79fa      	ldrb	r2, [r7, #7]
 800c6fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3330      	adds	r3, #48	; 0x30
 800c712:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c716:	2100      	movs	r1, #0
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fd fca6 	bl	800a06a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c71e:	79fb      	ldrb	r3, [r7, #7]
 800c720:	f003 0320 	and.w	r3, r3, #32
 800c724:	2b00      	cmp	r3, #0
 800c726:	d060      	beq.n	800c7ea <f_open+0x362>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d05c      	beq.n	800c7ea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	68da      	ldr	r2, [r3, #12]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	895b      	ldrh	r3, [r3, #10]
 800c73c:	031b      	lsls	r3, r3, #12
 800c73e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c74c:	e016      	b.n	800c77c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c752:	4618      	mov	r0, r3
 800c754:	f7fd ff51 	bl	800a5fa <get_fat>
 800c758:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c75a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d802      	bhi.n	800c766 <f_open+0x2de>
 800c760:	2302      	movs	r3, #2
 800c762:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76c:	d102      	bne.n	800c774 <f_open+0x2ec>
 800c76e:	2301      	movs	r3, #1
 800c770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c77c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c780:	2b00      	cmp	r3, #0
 800c782:	d103      	bne.n	800c78c <f_open+0x304>
 800c784:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c788:	429a      	cmp	r2, r3
 800c78a:	d8e0      	bhi.n	800c74e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c790:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c792:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c796:	2b00      	cmp	r3, #0
 800c798:	d127      	bne.n	800c7ea <f_open+0x362>
 800c79a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c79c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d022      	beq.n	800c7ea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fd ff07 	bl	800a5bc <clust2sect>
 800c7ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d103      	bne.n	800c7be <f_open+0x336>
						res = FR_INT_ERR;
 800c7b6:	2302      	movs	r3, #2
 800c7b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c7bc:	e015      	b.n	800c7ea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7c0:	0b1a      	lsrs	r2, r3, #12
 800c7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c4:	441a      	add	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	7858      	ldrb	r0, [r3, #1]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6a1a      	ldr	r2, [r3, #32]
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f7fd fb45 	bl	8009e68 <disk_read>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d002      	beq.n	800c7ea <f_open+0x362>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c7ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <f_open+0x370>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c7f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3768      	adds	r7, #104	; 0x68
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08e      	sub	sp, #56	; 0x38
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f107 0214 	add.w	r2, r7, #20
 800c822:	4611      	mov	r1, r2
 800c824:	4618      	mov	r0, r3
 800c826:	f7ff fdb3 	bl	800c390 <validate>
 800c82a:	4603      	mov	r3, r0
 800c82c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c834:	2b00      	cmp	r3, #0
 800c836:	d107      	bne.n	800c848 <f_read+0x44>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	7d5b      	ldrb	r3, [r3, #21]
 800c83c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c840:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <f_read+0x4a>
 800c848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c84c:	e115      	b.n	800ca7a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	7d1b      	ldrb	r3, [r3, #20]
 800c852:	f003 0301 	and.w	r3, r3, #1
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <f_read+0x5a>
 800c85a:	2307      	movs	r3, #7
 800c85c:	e10d      	b.n	800ca7a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	68da      	ldr	r2, [r3, #12]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	429a      	cmp	r2, r3
 800c870:	f240 80fe 	bls.w	800ca70 <f_read+0x26c>
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c878:	e0fa      	b.n	800ca70 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 80c6 	bne.w	800ca14 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	0b1b      	lsrs	r3, r3, #12
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	8952      	ldrh	r2, [r2, #10]
 800c892:	3a01      	subs	r2, #1
 800c894:	4013      	ands	r3, r2
 800c896:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d12f      	bne.n	800c8fe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	699b      	ldr	r3, [r3, #24]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d103      	bne.n	800c8ae <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	633b      	str	r3, [r7, #48]	; 0x30
 800c8ac:	e013      	b.n	800c8d6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d007      	beq.n	800c8c6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7fe f930 	bl	800ab22 <clmt_clust>
 800c8c2:	6338      	str	r0, [r7, #48]	; 0x30
 800c8c4:	e007      	b.n	800c8d6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	69db      	ldr	r3, [r3, #28]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	f7fd fe93 	bl	800a5fa <get_fat>
 800c8d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d804      	bhi.n	800c8e6 <f_read+0xe2>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	755a      	strb	r2, [r3, #21]
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	e0c9      	b.n	800ca7a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ec:	d104      	bne.n	800c8f8 <f_read+0xf4>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	755a      	strb	r2, [r3, #21]
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e0c0      	b.n	800ca7a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	69db      	ldr	r3, [r3, #28]
 800c904:	4619      	mov	r1, r3
 800c906:	4610      	mov	r0, r2
 800c908:	f7fd fe58 	bl	800a5bc <clust2sect>
 800c90c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d104      	bne.n	800c91e <f_read+0x11a>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2202      	movs	r2, #2
 800c918:	755a      	strb	r2, [r3, #21]
 800c91a:	2302      	movs	r3, #2
 800c91c:	e0ad      	b.n	800ca7a <f_read+0x276>
			sect += csect;
 800c91e:	69ba      	ldr	r2, [r7, #24]
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	4413      	add	r3, r2
 800c924:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	0b1b      	lsrs	r3, r3, #12
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d039      	beq.n	800c9a6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c932:	69fa      	ldr	r2, [r7, #28]
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	4413      	add	r3, r2
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	8952      	ldrh	r2, [r2, #10]
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d905      	bls.n	800c94c <f_read+0x148>
					cc = fs->csize - csect;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	895b      	ldrh	r3, [r3, #10]
 800c944:	461a      	mov	r2, r3
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	7858      	ldrb	r0, [r3, #1]
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c956:	f7fd fa87 	bl	8009e68 <disk_read>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d004      	beq.n	800c96a <f_read+0x166>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2201      	movs	r2, #1
 800c964:	755a      	strb	r2, [r3, #21]
 800c966:	2301      	movs	r3, #1
 800c968:	e087      	b.n	800ca7a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	7d1b      	ldrb	r3, [r3, #20]
 800c96e:	b25b      	sxtb	r3, r3
 800c970:	2b00      	cmp	r3, #0
 800c972:	da14      	bge.n	800c99e <f_read+0x19a>
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6a1a      	ldr	r2, [r3, #32]
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c97e:	429a      	cmp	r2, r3
 800c980:	d90d      	bls.n	800c99e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6a1a      	ldr	r2, [r3, #32]
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	031b      	lsls	r3, r3, #12
 800c98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c98e:	18d0      	adds	r0, r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	3330      	adds	r3, #48	; 0x30
 800c994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c998:	4619      	mov	r1, r3
 800c99a:	f7fd fb45 	bl	800a028 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a0:	031b      	lsls	r3, r3, #12
 800c9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c9a4:	e050      	b.n	800ca48 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6a1b      	ldr	r3, [r3, #32]
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d02e      	beq.n	800ca0e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	7d1b      	ldrb	r3, [r3, #20]
 800c9b4:	b25b      	sxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	da18      	bge.n	800c9ec <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	7858      	ldrb	r0, [r3, #1]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6a1a      	ldr	r2, [r3, #32]
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f7fd fa6d 	bl	8009ea8 <disk_write>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d004      	beq.n	800c9de <f_read+0x1da>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	755a      	strb	r2, [r3, #21]
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e04d      	b.n	800ca7a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	7d1b      	ldrb	r3, [r3, #20]
 800c9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	7858      	ldrb	r0, [r3, #1]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	69ba      	ldr	r2, [r7, #24]
 800c9fa:	f7fd fa35 	bl	8009e68 <disk_read>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d004      	beq.n	800ca0e <f_read+0x20a>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2201      	movs	r2, #1
 800ca08:	755a      	strb	r2, [r3, #21]
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e035      	b.n	800ca7a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	69ba      	ldr	r2, [r7, #24]
 800ca12:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca1c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ca20:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d901      	bls.n	800ca2e <f_read+0x22a>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca3c:	4413      	add	r3, r2
 800ca3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca40:	4619      	mov	r1, r3
 800ca42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca44:	f7fd faf0 	bl	800a028 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ca48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4c:	4413      	add	r3, r2
 800ca4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	699a      	ldr	r2, [r3, #24]
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	441a      	add	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	619a      	str	r2, [r3, #24]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	441a      	add	r2, r3
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	601a      	str	r2, [r3, #0]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f47f af01 	bne.w	800c87a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3738      	adds	r7, #56	; 0x38
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b086      	sub	sp, #24
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f107 0208 	add.w	r2, r7, #8
 800ca90:	4611      	mov	r1, r2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fc7c 	bl	800c390 <validate>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d168      	bne.n	800cb74 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	7d1b      	ldrb	r3, [r3, #20]
 800caa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d062      	beq.n	800cb74 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	7d1b      	ldrb	r3, [r3, #20]
 800cab2:	b25b      	sxtb	r3, r3
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	da15      	bge.n	800cae4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	7858      	ldrb	r0, [r3, #1]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a1a      	ldr	r2, [r3, #32]
 800cac6:	2301      	movs	r3, #1
 800cac8:	f7fd f9ee 	bl	8009ea8 <disk_write>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <f_sync+0x54>
 800cad2:	2301      	movs	r3, #1
 800cad4:	e04f      	b.n	800cb76 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7d1b      	ldrb	r3, [r3, #20]
 800cada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cae4:	f7fd f91c 	bl	8009d20 <get_fattime>
 800cae8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf0:	4619      	mov	r1, r3
 800caf2:	4610      	mov	r0, r2
 800caf4:	f7fd fcc6 	bl	800a484 <move_window>
 800caf8:	4603      	mov	r3, r0
 800cafa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d138      	bne.n	800cb74 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb06:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	330b      	adds	r3, #11
 800cb0c:	781a      	ldrb	r2, [r3, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	330b      	adds	r3, #11
 800cb12:	f042 0220 	orr.w	r2, r2, #32
 800cb16:	b2d2      	uxtb	r2, r2
 800cb18:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6818      	ldr	r0, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	461a      	mov	r2, r3
 800cb24:	68f9      	ldr	r1, [r7, #12]
 800cb26:	f7fe f9d6 	bl	800aed6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f103 021c 	add.w	r2, r3, #28
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	4619      	mov	r1, r3
 800cb36:	4610      	mov	r0, r2
 800cb38:	f7fd fa4a 	bl	8009fd0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3316      	adds	r3, #22
 800cb40:	6939      	ldr	r1, [r7, #16]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fd fa44 	bl	8009fd0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	3312      	adds	r3, #18
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fd fa23 	bl	8009f9a <st_word>
					fs->wflag = 1;
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2201      	movs	r2, #1
 800cb58:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fd fcbf 	bl	800a4e0 <sync_fs>
 800cb62:	4603      	mov	r3, r0
 800cb64:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	7d1b      	ldrb	r3, [r3, #20]
 800cb6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff ff7b 	bl	800ca82 <f_sync>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d118      	bne.n	800cbc8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f107 0208 	add.w	r2, r7, #8
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7ff fbf6 	bl	800c390 <validate>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cba8:	7bfb      	ldrb	r3, [r7, #15]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10c      	bne.n	800cbc8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fd fbc2 	bl	800a33c <dec_lock>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cbbc:	7bfb      	ldrb	r3, [r7, #15]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d102      	bne.n	800cbc8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b086      	sub	sp, #24
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <f_opendir+0x14>
 800cbe2:	2309      	movs	r3, #9
 800cbe4:	e064      	b.n	800ccb0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800cbea:	f107 010c 	add.w	r1, r7, #12
 800cbee:	463b      	mov	r3, r7
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff f97c 	bl	800bef0 <find_volume>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d14f      	bne.n	800cca2 <f_opendir+0xd0>
		obj->fs = fs;
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff f863 	bl	800bcd8 <follow_path>
 800cc12:	4603      	mov	r3, r0
 800cc14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d13d      	bne.n	800cc98 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc22:	b25b      	sxtb	r3, r3
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	db12      	blt.n	800cc4e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	799b      	ldrb	r3, [r3, #6]
 800cc2c:	f003 0310 	and.w	r3, r3, #16
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00a      	beq.n	800cc4a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	f7fe f92b 	bl	800ae98 <ld_clust>
 800cc42:	4602      	mov	r2, r0
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	609a      	str	r2, [r3, #8]
 800cc48:	e001      	b.n	800cc4e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800cc4a:	2305      	movs	r3, #5
 800cc4c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800cc4e:	7dfb      	ldrb	r3, [r7, #23]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d121      	bne.n	800cc98 <f_opendir+0xc6>
				obj->id = fs->id;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	88da      	ldrh	r2, [r3, #6]
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7fd ff93 	bl	800ab8a <dir_sdi>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d114      	bne.n	800cc98 <f_opendir+0xc6>
					if (obj->sclust) {
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00d      	beq.n	800cc92 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cc76:	2100      	movs	r1, #0
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7fd fad1 	bl	800a220 <inc_lock>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d105      	bne.n	800cc98 <f_opendir+0xc6>
 800cc8c:	2312      	movs	r3, #18
 800cc8e:	75fb      	strb	r3, [r7, #23]
 800cc90:	e002      	b.n	800cc98 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	2200      	movs	r2, #0
 800cc96:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	2b04      	cmp	r3, #4
 800cc9c:	d101      	bne.n	800cca2 <f_opendir+0xd0>
 800cc9e:	2305      	movs	r3, #5
 800cca0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d002      	beq.n	800ccae <f_opendir+0xdc>
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f107 0208 	add.w	r2, r7, #8
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff fb61 	bl	800c390 <validate>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d110      	bne.n	800ccfa <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d006      	beq.n	800ccee <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fd fb29 	bl	800a33c <dec_lock>
 800ccea:	4603      	mov	r3, r0
 800ccec:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f107 0208 	add.w	r2, r7, #8
 800cd14:	4611      	mov	r1, r2
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff fb3a 	bl	800c390 <validate>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d126      	bne.n	800cd74 <f_readdir+0x70>
		if (!fno) {
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d106      	bne.n	800cd3a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7fd ff2b 	bl	800ab8a <dir_sdi>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]
 800cd38:	e01c      	b.n	800cd74 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7fe fad6 	bl	800b2ee <dir_read>
 800cd42:	4603      	mov	r3, r0
 800cd44:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	2b04      	cmp	r3, #4
 800cd4a:	d101      	bne.n	800cd50 <f_readdir+0x4c>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10e      	bne.n	800cd74 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7fe fd27 	bl	800b7ac <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cd5e:	2100      	movs	r1, #0
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7fd ff8d 	bl	800ac80 <dir_next>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	d101      	bne.n	800cd74 <f_readdir+0x70>
 800cd70:	2300      	movs	r3, #0
 800cd72:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b088      	sub	sp, #32
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	60f8      	str	r0, [r7, #12]
 800cd86:	60b9      	str	r1, [r7, #8]
 800cd88:	607a      	str	r2, [r7, #4]
	int n = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cd92:	e01b      	b.n	800cdcc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800cd94:	f107 0310 	add.w	r3, r7, #16
 800cd98:	f107 0114 	add.w	r1, r7, #20
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff fd30 	bl	800c804 <f_read>
		if (rc != 1) break;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d116      	bne.n	800cdd8 <f_gets+0x5a>
		c = s[0];
 800cdaa:	7d3b      	ldrb	r3, [r7, #20]
 800cdac:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	2b0d      	cmp	r3, #13
 800cdb2:	d100      	bne.n	800cdb6 <f_gets+0x38>
 800cdb4:	e00a      	b.n	800cdcc <f_gets+0x4e>
		*p++ = c;
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	61ba      	str	r2, [r7, #24]
 800cdbc:	7dfa      	ldrb	r2, [r7, #23]
 800cdbe:	701a      	strb	r2, [r3, #0]
		n++;
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
 800cdc8:	2b0a      	cmp	r3, #10
 800cdca:	d007      	beq.n	800cddc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	69fa      	ldr	r2, [r7, #28]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	dbde      	blt.n	800cd94 <f_gets+0x16>
 800cdd6:	e002      	b.n	800cdde <f_gets+0x60>
		if (rc != 1) break;
 800cdd8:	bf00      	nop
 800cdda:	e000      	b.n	800cdde <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800cddc:	bf00      	nop
	}
	*p = 0;
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	2200      	movs	r2, #0
 800cde2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <f_gets+0x70>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	e000      	b.n	800cdf0 <f_gets+0x72>
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3720      	adds	r7, #32
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b087      	sub	sp, #28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	4613      	mov	r3, r2
 800ce04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce06:	2301      	movs	r3, #1
 800ce08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce0e:	4b1f      	ldr	r3, [pc, #124]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce10:	7a5b      	ldrb	r3, [r3, #9]
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d131      	bne.n	800ce7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce18:	4b1c      	ldr	r3, [pc, #112]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce1a:	7a5b      	ldrb	r3, [r3, #9]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	461a      	mov	r2, r3
 800ce20:	4b1a      	ldr	r3, [pc, #104]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce22:	2100      	movs	r1, #0
 800ce24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce26:	4b19      	ldr	r3, [pc, #100]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce28:	7a5b      	ldrb	r3, [r3, #9]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	4a17      	ldr	r2, [pc, #92]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4413      	add	r3, r2
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce36:	4b15      	ldr	r3, [pc, #84]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce38:	7a5b      	ldrb	r3, [r3, #9]
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4b13      	ldr	r3, [pc, #76]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce40:	4413      	add	r3, r2
 800ce42:	79fa      	ldrb	r2, [r7, #7]
 800ce44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ce46:	4b11      	ldr	r3, [pc, #68]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce48:	7a5b      	ldrb	r3, [r3, #9]
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	b2d1      	uxtb	r1, r2
 800ce50:	4a0e      	ldr	r2, [pc, #56]	; (800ce8c <FATFS_LinkDriverEx+0x94>)
 800ce52:	7251      	strb	r1, [r2, #9]
 800ce54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce56:	7dbb      	ldrb	r3, [r7, #22]
 800ce58:	3330      	adds	r3, #48	; 0x30
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	3301      	adds	r3, #1
 800ce64:	223a      	movs	r2, #58	; 0x3a
 800ce66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	222f      	movs	r2, #47	; 0x2f
 800ce6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	3303      	adds	r3, #3
 800ce74:	2200      	movs	r2, #0
 800ce76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	24002674 	.word	0x24002674

0800ce90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff ffaa 	bl	800cdf8 <FATFS_LinkDriverEx>
 800cea4:	4603      	mov	r3, r0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
	...

0800ceb0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	6039      	str	r1, [r7, #0]
 800ceba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cebc:	88fb      	ldrh	r3, [r7, #6]
 800cebe:	2b7f      	cmp	r3, #127	; 0x7f
 800cec0:	d802      	bhi.n	800cec8 <ff_convert+0x18>
		c = chr;
 800cec2:	88fb      	ldrh	r3, [r7, #6]
 800cec4:	81fb      	strh	r3, [r7, #14]
 800cec6:	e025      	b.n	800cf14 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00b      	beq.n	800cee6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cece:	88fb      	ldrh	r3, [r7, #6]
 800ced0:	2bff      	cmp	r3, #255	; 0xff
 800ced2:	d805      	bhi.n	800cee0 <ff_convert+0x30>
 800ced4:	88fb      	ldrh	r3, [r7, #6]
 800ced6:	3b80      	subs	r3, #128	; 0x80
 800ced8:	4a12      	ldr	r2, [pc, #72]	; (800cf24 <ff_convert+0x74>)
 800ceda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cede:	e000      	b.n	800cee2 <ff_convert+0x32>
 800cee0:	2300      	movs	r3, #0
 800cee2:	81fb      	strh	r3, [r7, #14]
 800cee4:	e016      	b.n	800cf14 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cee6:	2300      	movs	r3, #0
 800cee8:	81fb      	strh	r3, [r7, #14]
 800ceea:	e009      	b.n	800cf00 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ceec:	89fb      	ldrh	r3, [r7, #14]
 800ceee:	4a0d      	ldr	r2, [pc, #52]	; (800cf24 <ff_convert+0x74>)
 800cef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cef4:	88fa      	ldrh	r2, [r7, #6]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d006      	beq.n	800cf08 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cefa:	89fb      	ldrh	r3, [r7, #14]
 800cefc:	3301      	adds	r3, #1
 800cefe:	81fb      	strh	r3, [r7, #14]
 800cf00:	89fb      	ldrh	r3, [r7, #14]
 800cf02:	2b7f      	cmp	r3, #127	; 0x7f
 800cf04:	d9f2      	bls.n	800ceec <ff_convert+0x3c>
 800cf06:	e000      	b.n	800cf0a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cf08:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cf0a:	89fb      	ldrh	r3, [r7, #14]
 800cf0c:	3380      	adds	r3, #128	; 0x80
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cf14:	89fb      	ldrh	r3, [r7, #14]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	0800f16c 	.word	0x0800f16c

0800cf28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b087      	sub	sp, #28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cf32:	88fb      	ldrh	r3, [r7, #6]
 800cf34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf38:	d201      	bcs.n	800cf3e <ff_wtoupper+0x16>
 800cf3a:	4b3e      	ldr	r3, [pc, #248]	; (800d034 <ff_wtoupper+0x10c>)
 800cf3c:	e000      	b.n	800cf40 <ff_wtoupper+0x18>
 800cf3e:	4b3e      	ldr	r3, [pc, #248]	; (800d038 <ff_wtoupper+0x110>)
 800cf40:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	1c9a      	adds	r2, r3, #2
 800cf46:	617a      	str	r2, [r7, #20]
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cf4c:	8a7b      	ldrh	r3, [r7, #18]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d068      	beq.n	800d024 <ff_wtoupper+0xfc>
 800cf52:	88fa      	ldrh	r2, [r7, #6]
 800cf54:	8a7b      	ldrh	r3, [r7, #18]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d364      	bcc.n	800d024 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	1c9a      	adds	r2, r3, #2
 800cf5e:	617a      	str	r2, [r7, #20]
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	823b      	strh	r3, [r7, #16]
 800cf64:	8a3b      	ldrh	r3, [r7, #16]
 800cf66:	0a1b      	lsrs	r3, r3, #8
 800cf68:	81fb      	strh	r3, [r7, #14]
 800cf6a:	8a3b      	ldrh	r3, [r7, #16]
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cf70:	88fa      	ldrh	r2, [r7, #6]
 800cf72:	8a79      	ldrh	r1, [r7, #18]
 800cf74:	8a3b      	ldrh	r3, [r7, #16]
 800cf76:	440b      	add	r3, r1
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	da49      	bge.n	800d010 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cf7c:	89fb      	ldrh	r3, [r7, #14]
 800cf7e:	2b08      	cmp	r3, #8
 800cf80:	d84f      	bhi.n	800d022 <ff_wtoupper+0xfa>
 800cf82:	a201      	add	r2, pc, #4	; (adr r2, 800cf88 <ff_wtoupper+0x60>)
 800cf84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf88:	0800cfad 	.word	0x0800cfad
 800cf8c:	0800cfbf 	.word	0x0800cfbf
 800cf90:	0800cfd5 	.word	0x0800cfd5
 800cf94:	0800cfdd 	.word	0x0800cfdd
 800cf98:	0800cfe5 	.word	0x0800cfe5
 800cf9c:	0800cfed 	.word	0x0800cfed
 800cfa0:	0800cff5 	.word	0x0800cff5
 800cfa4:	0800cffd 	.word	0x0800cffd
 800cfa8:	0800d005 	.word	0x0800d005
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cfac:	88fa      	ldrh	r2, [r7, #6]
 800cfae:	8a7b      	ldrh	r3, [r7, #18]
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	005b      	lsls	r3, r3, #1
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	80fb      	strh	r3, [r7, #6]
 800cfbc:	e027      	b.n	800d00e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cfbe:	88fa      	ldrh	r2, [r7, #6]
 800cfc0:	8a7b      	ldrh	r3, [r7, #18]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	f003 0301 	and.w	r3, r3, #1
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	88fa      	ldrh	r2, [r7, #6]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	80fb      	strh	r3, [r7, #6]
 800cfd2:	e01c      	b.n	800d00e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cfd4:	88fb      	ldrh	r3, [r7, #6]
 800cfd6:	3b10      	subs	r3, #16
 800cfd8:	80fb      	strh	r3, [r7, #6]
 800cfda:	e018      	b.n	800d00e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cfdc:	88fb      	ldrh	r3, [r7, #6]
 800cfde:	3b20      	subs	r3, #32
 800cfe0:	80fb      	strh	r3, [r7, #6]
 800cfe2:	e014      	b.n	800d00e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	3b30      	subs	r3, #48	; 0x30
 800cfe8:	80fb      	strh	r3, [r7, #6]
 800cfea:	e010      	b.n	800d00e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cfec:	88fb      	ldrh	r3, [r7, #6]
 800cfee:	3b1a      	subs	r3, #26
 800cff0:	80fb      	strh	r3, [r7, #6]
 800cff2:	e00c      	b.n	800d00e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cff4:	88fb      	ldrh	r3, [r7, #6]
 800cff6:	3308      	adds	r3, #8
 800cff8:	80fb      	strh	r3, [r7, #6]
 800cffa:	e008      	b.n	800d00e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cffc:	88fb      	ldrh	r3, [r7, #6]
 800cffe:	3b50      	subs	r3, #80	; 0x50
 800d000:	80fb      	strh	r3, [r7, #6]
 800d002:	e004      	b.n	800d00e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d004:	88fb      	ldrh	r3, [r7, #6]
 800d006:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d00a:	80fb      	strh	r3, [r7, #6]
 800d00c:	bf00      	nop
			}
			break;
 800d00e:	e008      	b.n	800d022 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d010:	89fb      	ldrh	r3, [r7, #14]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d195      	bne.n	800cf42 <ff_wtoupper+0x1a>
 800d016:	8a3b      	ldrh	r3, [r7, #16]
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	4413      	add	r3, r2
 800d01e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d020:	e78f      	b.n	800cf42 <ff_wtoupper+0x1a>
			break;
 800d022:	bf00      	nop
	}

	return chr;
 800d024:	88fb      	ldrh	r3, [r7, #6]
}
 800d026:	4618      	mov	r0, r3
 800d028:	371c      	adds	r7, #28
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	0800f26c 	.word	0x0800f26c
 800d038:	0800f460 	.word	0x0800f460

0800d03c <malloc>:
 800d03c:	4b02      	ldr	r3, [pc, #8]	; (800d048 <malloc+0xc>)
 800d03e:	4601      	mov	r1, r0
 800d040:	6818      	ldr	r0, [r3, #0]
 800d042:	f000 b823 	b.w	800d08c <_malloc_r>
 800d046:	bf00      	nop
 800d048:	24000088 	.word	0x24000088

0800d04c <sbrk_aligned>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	4e0e      	ldr	r6, [pc, #56]	; (800d088 <sbrk_aligned+0x3c>)
 800d050:	460c      	mov	r4, r1
 800d052:	6831      	ldr	r1, [r6, #0]
 800d054:	4605      	mov	r5, r0
 800d056:	b911      	cbnz	r1, 800d05e <sbrk_aligned+0x12>
 800d058:	f000 faac 	bl	800d5b4 <_sbrk_r>
 800d05c:	6030      	str	r0, [r6, #0]
 800d05e:	4621      	mov	r1, r4
 800d060:	4628      	mov	r0, r5
 800d062:	f000 faa7 	bl	800d5b4 <_sbrk_r>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	d00a      	beq.n	800d080 <sbrk_aligned+0x34>
 800d06a:	1cc4      	adds	r4, r0, #3
 800d06c:	f024 0403 	bic.w	r4, r4, #3
 800d070:	42a0      	cmp	r0, r4
 800d072:	d007      	beq.n	800d084 <sbrk_aligned+0x38>
 800d074:	1a21      	subs	r1, r4, r0
 800d076:	4628      	mov	r0, r5
 800d078:	f000 fa9c 	bl	800d5b4 <_sbrk_r>
 800d07c:	3001      	adds	r0, #1
 800d07e:	d101      	bne.n	800d084 <sbrk_aligned+0x38>
 800d080:	f04f 34ff 	mov.w	r4, #4294967295
 800d084:	4620      	mov	r0, r4
 800d086:	bd70      	pop	{r4, r5, r6, pc}
 800d088:	24002684 	.word	0x24002684

0800d08c <_malloc_r>:
 800d08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d090:	1ccd      	adds	r5, r1, #3
 800d092:	f025 0503 	bic.w	r5, r5, #3
 800d096:	3508      	adds	r5, #8
 800d098:	2d0c      	cmp	r5, #12
 800d09a:	bf38      	it	cc
 800d09c:	250c      	movcc	r5, #12
 800d09e:	2d00      	cmp	r5, #0
 800d0a0:	4607      	mov	r7, r0
 800d0a2:	db01      	blt.n	800d0a8 <_malloc_r+0x1c>
 800d0a4:	42a9      	cmp	r1, r5
 800d0a6:	d905      	bls.n	800d0b4 <_malloc_r+0x28>
 800d0a8:	230c      	movs	r3, #12
 800d0aa:	603b      	str	r3, [r7, #0]
 800d0ac:	2600      	movs	r6, #0
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d188 <_malloc_r+0xfc>
 800d0b8:	f000 f868 	bl	800d18c <__malloc_lock>
 800d0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d0c0:	461c      	mov	r4, r3
 800d0c2:	bb5c      	cbnz	r4, 800d11c <_malloc_r+0x90>
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	f7ff ffc0 	bl	800d04c <sbrk_aligned>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	d155      	bne.n	800d17e <_malloc_r+0xf2>
 800d0d2:	f8d8 4000 	ldr.w	r4, [r8]
 800d0d6:	4626      	mov	r6, r4
 800d0d8:	2e00      	cmp	r6, #0
 800d0da:	d145      	bne.n	800d168 <_malloc_r+0xdc>
 800d0dc:	2c00      	cmp	r4, #0
 800d0de:	d048      	beq.n	800d172 <_malloc_r+0xe6>
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	eb04 0903 	add.w	r9, r4, r3
 800d0ea:	f000 fa63 	bl	800d5b4 <_sbrk_r>
 800d0ee:	4581      	cmp	r9, r0
 800d0f0:	d13f      	bne.n	800d172 <_malloc_r+0xe6>
 800d0f2:	6821      	ldr	r1, [r4, #0]
 800d0f4:	1a6d      	subs	r5, r5, r1
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7ff ffa7 	bl	800d04c <sbrk_aligned>
 800d0fe:	3001      	adds	r0, #1
 800d100:	d037      	beq.n	800d172 <_malloc_r+0xe6>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	442b      	add	r3, r5
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	f8d8 3000 	ldr.w	r3, [r8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d038      	beq.n	800d182 <_malloc_r+0xf6>
 800d110:	685a      	ldr	r2, [r3, #4]
 800d112:	42a2      	cmp	r2, r4
 800d114:	d12b      	bne.n	800d16e <_malloc_r+0xe2>
 800d116:	2200      	movs	r2, #0
 800d118:	605a      	str	r2, [r3, #4]
 800d11a:	e00f      	b.n	800d13c <_malloc_r+0xb0>
 800d11c:	6822      	ldr	r2, [r4, #0]
 800d11e:	1b52      	subs	r2, r2, r5
 800d120:	d41f      	bmi.n	800d162 <_malloc_r+0xd6>
 800d122:	2a0b      	cmp	r2, #11
 800d124:	d917      	bls.n	800d156 <_malloc_r+0xca>
 800d126:	1961      	adds	r1, r4, r5
 800d128:	42a3      	cmp	r3, r4
 800d12a:	6025      	str	r5, [r4, #0]
 800d12c:	bf18      	it	ne
 800d12e:	6059      	strne	r1, [r3, #4]
 800d130:	6863      	ldr	r3, [r4, #4]
 800d132:	bf08      	it	eq
 800d134:	f8c8 1000 	streq.w	r1, [r8]
 800d138:	5162      	str	r2, [r4, r5]
 800d13a:	604b      	str	r3, [r1, #4]
 800d13c:	4638      	mov	r0, r7
 800d13e:	f104 060b 	add.w	r6, r4, #11
 800d142:	f000 f829 	bl	800d198 <__malloc_unlock>
 800d146:	f026 0607 	bic.w	r6, r6, #7
 800d14a:	1d23      	adds	r3, r4, #4
 800d14c:	1af2      	subs	r2, r6, r3
 800d14e:	d0ae      	beq.n	800d0ae <_malloc_r+0x22>
 800d150:	1b9b      	subs	r3, r3, r6
 800d152:	50a3      	str	r3, [r4, r2]
 800d154:	e7ab      	b.n	800d0ae <_malloc_r+0x22>
 800d156:	42a3      	cmp	r3, r4
 800d158:	6862      	ldr	r2, [r4, #4]
 800d15a:	d1dd      	bne.n	800d118 <_malloc_r+0x8c>
 800d15c:	f8c8 2000 	str.w	r2, [r8]
 800d160:	e7ec      	b.n	800d13c <_malloc_r+0xb0>
 800d162:	4623      	mov	r3, r4
 800d164:	6864      	ldr	r4, [r4, #4]
 800d166:	e7ac      	b.n	800d0c2 <_malloc_r+0x36>
 800d168:	4634      	mov	r4, r6
 800d16a:	6876      	ldr	r6, [r6, #4]
 800d16c:	e7b4      	b.n	800d0d8 <_malloc_r+0x4c>
 800d16e:	4613      	mov	r3, r2
 800d170:	e7cc      	b.n	800d10c <_malloc_r+0x80>
 800d172:	230c      	movs	r3, #12
 800d174:	603b      	str	r3, [r7, #0]
 800d176:	4638      	mov	r0, r7
 800d178:	f000 f80e 	bl	800d198 <__malloc_unlock>
 800d17c:	e797      	b.n	800d0ae <_malloc_r+0x22>
 800d17e:	6025      	str	r5, [r4, #0]
 800d180:	e7dc      	b.n	800d13c <_malloc_r+0xb0>
 800d182:	605b      	str	r3, [r3, #4]
 800d184:	deff      	udf	#255	; 0xff
 800d186:	bf00      	nop
 800d188:	24002680 	.word	0x24002680

0800d18c <__malloc_lock>:
 800d18c:	4801      	ldr	r0, [pc, #4]	; (800d194 <__malloc_lock+0x8>)
 800d18e:	f000 ba5e 	b.w	800d64e <__retarget_lock_acquire_recursive>
 800d192:	bf00      	nop
 800d194:	240027c8 	.word	0x240027c8

0800d198 <__malloc_unlock>:
 800d198:	4801      	ldr	r0, [pc, #4]	; (800d1a0 <__malloc_unlock+0x8>)
 800d19a:	f000 ba59 	b.w	800d650 <__retarget_lock_release_recursive>
 800d19e:	bf00      	nop
 800d1a0:	240027c8 	.word	0x240027c8

0800d1a4 <std>:
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d1ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1b2:	6083      	str	r3, [r0, #8]
 800d1b4:	8181      	strh	r1, [r0, #12]
 800d1b6:	6643      	str	r3, [r0, #100]	; 0x64
 800d1b8:	81c2      	strh	r2, [r0, #14]
 800d1ba:	6183      	str	r3, [r0, #24]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	2208      	movs	r2, #8
 800d1c0:	305c      	adds	r0, #92	; 0x5c
 800d1c2:	f000 f948 	bl	800d456 <memset>
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	; (800d1fc <std+0x58>)
 800d1c8:	6263      	str	r3, [r4, #36]	; 0x24
 800d1ca:	4b0d      	ldr	r3, [pc, #52]	; (800d200 <std+0x5c>)
 800d1cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1ce:	4b0d      	ldr	r3, [pc, #52]	; (800d204 <std+0x60>)
 800d1d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1d2:	4b0d      	ldr	r3, [pc, #52]	; (800d208 <std+0x64>)
 800d1d4:	6323      	str	r3, [r4, #48]	; 0x30
 800d1d6:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <std+0x68>)
 800d1d8:	6224      	str	r4, [r4, #32]
 800d1da:	429c      	cmp	r4, r3
 800d1dc:	d006      	beq.n	800d1ec <std+0x48>
 800d1de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d1e2:	4294      	cmp	r4, r2
 800d1e4:	d002      	beq.n	800d1ec <std+0x48>
 800d1e6:	33d0      	adds	r3, #208	; 0xd0
 800d1e8:	429c      	cmp	r4, r3
 800d1ea:	d105      	bne.n	800d1f8 <std+0x54>
 800d1ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1f4:	f000 ba2a 	b.w	800d64c <__retarget_lock_init_recursive>
 800d1f8:	bd10      	pop	{r4, pc}
 800d1fa:	bf00      	nop
 800d1fc:	0800d3d1 	.word	0x0800d3d1
 800d200:	0800d3f3 	.word	0x0800d3f3
 800d204:	0800d42b 	.word	0x0800d42b
 800d208:	0800d44f 	.word	0x0800d44f
 800d20c:	24002688 	.word	0x24002688

0800d210 <stdio_exit_handler>:
 800d210:	4a02      	ldr	r2, [pc, #8]	; (800d21c <stdio_exit_handler+0xc>)
 800d212:	4903      	ldr	r1, [pc, #12]	; (800d220 <stdio_exit_handler+0x10>)
 800d214:	4803      	ldr	r0, [pc, #12]	; (800d224 <stdio_exit_handler+0x14>)
 800d216:	f000 b869 	b.w	800d2ec <_fwalk_sglue>
 800d21a:	bf00      	nop
 800d21c:	24000030 	.word	0x24000030
 800d220:	0800de31 	.word	0x0800de31
 800d224:	2400003c 	.word	0x2400003c

0800d228 <cleanup_stdio>:
 800d228:	6841      	ldr	r1, [r0, #4]
 800d22a:	4b0c      	ldr	r3, [pc, #48]	; (800d25c <cleanup_stdio+0x34>)
 800d22c:	4299      	cmp	r1, r3
 800d22e:	b510      	push	{r4, lr}
 800d230:	4604      	mov	r4, r0
 800d232:	d001      	beq.n	800d238 <cleanup_stdio+0x10>
 800d234:	f000 fdfc 	bl	800de30 <_fflush_r>
 800d238:	68a1      	ldr	r1, [r4, #8]
 800d23a:	4b09      	ldr	r3, [pc, #36]	; (800d260 <cleanup_stdio+0x38>)
 800d23c:	4299      	cmp	r1, r3
 800d23e:	d002      	beq.n	800d246 <cleanup_stdio+0x1e>
 800d240:	4620      	mov	r0, r4
 800d242:	f000 fdf5 	bl	800de30 <_fflush_r>
 800d246:	68e1      	ldr	r1, [r4, #12]
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <cleanup_stdio+0x3c>)
 800d24a:	4299      	cmp	r1, r3
 800d24c:	d004      	beq.n	800d258 <cleanup_stdio+0x30>
 800d24e:	4620      	mov	r0, r4
 800d250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d254:	f000 bdec 	b.w	800de30 <_fflush_r>
 800d258:	bd10      	pop	{r4, pc}
 800d25a:	bf00      	nop
 800d25c:	24002688 	.word	0x24002688
 800d260:	240026f0 	.word	0x240026f0
 800d264:	24002758 	.word	0x24002758

0800d268 <global_stdio_init.part.0>:
 800d268:	b510      	push	{r4, lr}
 800d26a:	4b0b      	ldr	r3, [pc, #44]	; (800d298 <global_stdio_init.part.0+0x30>)
 800d26c:	4c0b      	ldr	r4, [pc, #44]	; (800d29c <global_stdio_init.part.0+0x34>)
 800d26e:	4a0c      	ldr	r2, [pc, #48]	; (800d2a0 <global_stdio_init.part.0+0x38>)
 800d270:	601a      	str	r2, [r3, #0]
 800d272:	4620      	mov	r0, r4
 800d274:	2200      	movs	r2, #0
 800d276:	2104      	movs	r1, #4
 800d278:	f7ff ff94 	bl	800d1a4 <std>
 800d27c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d280:	2201      	movs	r2, #1
 800d282:	2109      	movs	r1, #9
 800d284:	f7ff ff8e 	bl	800d1a4 <std>
 800d288:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d28c:	2202      	movs	r2, #2
 800d28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d292:	2112      	movs	r1, #18
 800d294:	f7ff bf86 	b.w	800d1a4 <std>
 800d298:	240027c0 	.word	0x240027c0
 800d29c:	24002688 	.word	0x24002688
 800d2a0:	0800d211 	.word	0x0800d211

0800d2a4 <__sfp_lock_acquire>:
 800d2a4:	4801      	ldr	r0, [pc, #4]	; (800d2ac <__sfp_lock_acquire+0x8>)
 800d2a6:	f000 b9d2 	b.w	800d64e <__retarget_lock_acquire_recursive>
 800d2aa:	bf00      	nop
 800d2ac:	240027c9 	.word	0x240027c9

0800d2b0 <__sfp_lock_release>:
 800d2b0:	4801      	ldr	r0, [pc, #4]	; (800d2b8 <__sfp_lock_release+0x8>)
 800d2b2:	f000 b9cd 	b.w	800d650 <__retarget_lock_release_recursive>
 800d2b6:	bf00      	nop
 800d2b8:	240027c9 	.word	0x240027c9

0800d2bc <__sinit>:
 800d2bc:	b510      	push	{r4, lr}
 800d2be:	4604      	mov	r4, r0
 800d2c0:	f7ff fff0 	bl	800d2a4 <__sfp_lock_acquire>
 800d2c4:	6a23      	ldr	r3, [r4, #32]
 800d2c6:	b11b      	cbz	r3, 800d2d0 <__sinit+0x14>
 800d2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2cc:	f7ff bff0 	b.w	800d2b0 <__sfp_lock_release>
 800d2d0:	4b04      	ldr	r3, [pc, #16]	; (800d2e4 <__sinit+0x28>)
 800d2d2:	6223      	str	r3, [r4, #32]
 800d2d4:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <__sinit+0x2c>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1f5      	bne.n	800d2c8 <__sinit+0xc>
 800d2dc:	f7ff ffc4 	bl	800d268 <global_stdio_init.part.0>
 800d2e0:	e7f2      	b.n	800d2c8 <__sinit+0xc>
 800d2e2:	bf00      	nop
 800d2e4:	0800d229 	.word	0x0800d229
 800d2e8:	240027c0 	.word	0x240027c0

0800d2ec <_fwalk_sglue>:
 800d2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2f0:	4607      	mov	r7, r0
 800d2f2:	4688      	mov	r8, r1
 800d2f4:	4614      	mov	r4, r2
 800d2f6:	2600      	movs	r6, #0
 800d2f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2fc:	f1b9 0901 	subs.w	r9, r9, #1
 800d300:	d505      	bpl.n	800d30e <_fwalk_sglue+0x22>
 800d302:	6824      	ldr	r4, [r4, #0]
 800d304:	2c00      	cmp	r4, #0
 800d306:	d1f7      	bne.n	800d2f8 <_fwalk_sglue+0xc>
 800d308:	4630      	mov	r0, r6
 800d30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d30e:	89ab      	ldrh	r3, [r5, #12]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d907      	bls.n	800d324 <_fwalk_sglue+0x38>
 800d314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d318:	3301      	adds	r3, #1
 800d31a:	d003      	beq.n	800d324 <_fwalk_sglue+0x38>
 800d31c:	4629      	mov	r1, r5
 800d31e:	4638      	mov	r0, r7
 800d320:	47c0      	blx	r8
 800d322:	4306      	orrs	r6, r0
 800d324:	3568      	adds	r5, #104	; 0x68
 800d326:	e7e9      	b.n	800d2fc <_fwalk_sglue+0x10>

0800d328 <sniprintf>:
 800d328:	b40c      	push	{r2, r3}
 800d32a:	b530      	push	{r4, r5, lr}
 800d32c:	4b17      	ldr	r3, [pc, #92]	; (800d38c <sniprintf+0x64>)
 800d32e:	1e0c      	subs	r4, r1, #0
 800d330:	681d      	ldr	r5, [r3, #0]
 800d332:	b09d      	sub	sp, #116	; 0x74
 800d334:	da08      	bge.n	800d348 <sniprintf+0x20>
 800d336:	238b      	movs	r3, #139	; 0x8b
 800d338:	602b      	str	r3, [r5, #0]
 800d33a:	f04f 30ff 	mov.w	r0, #4294967295
 800d33e:	b01d      	add	sp, #116	; 0x74
 800d340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d344:	b002      	add	sp, #8
 800d346:	4770      	bx	lr
 800d348:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d34c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d350:	bf14      	ite	ne
 800d352:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d356:	4623      	moveq	r3, r4
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	9307      	str	r3, [sp, #28]
 800d35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d360:	9002      	str	r0, [sp, #8]
 800d362:	9006      	str	r0, [sp, #24]
 800d364:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d368:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d36a:	ab21      	add	r3, sp, #132	; 0x84
 800d36c:	a902      	add	r1, sp, #8
 800d36e:	4628      	mov	r0, r5
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	f000 fa49 	bl	800d808 <_svfiprintf_r>
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	bfbc      	itt	lt
 800d37a:	238b      	movlt	r3, #139	; 0x8b
 800d37c:	602b      	strlt	r3, [r5, #0]
 800d37e:	2c00      	cmp	r4, #0
 800d380:	d0dd      	beq.n	800d33e <sniprintf+0x16>
 800d382:	9b02      	ldr	r3, [sp, #8]
 800d384:	2200      	movs	r2, #0
 800d386:	701a      	strb	r2, [r3, #0]
 800d388:	e7d9      	b.n	800d33e <sniprintf+0x16>
 800d38a:	bf00      	nop
 800d38c:	24000088 	.word	0x24000088

0800d390 <siprintf>:
 800d390:	b40e      	push	{r1, r2, r3}
 800d392:	b500      	push	{lr}
 800d394:	b09c      	sub	sp, #112	; 0x70
 800d396:	ab1d      	add	r3, sp, #116	; 0x74
 800d398:	9002      	str	r0, [sp, #8]
 800d39a:	9006      	str	r0, [sp, #24]
 800d39c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3a0:	4809      	ldr	r0, [pc, #36]	; (800d3c8 <siprintf+0x38>)
 800d3a2:	9107      	str	r1, [sp, #28]
 800d3a4:	9104      	str	r1, [sp, #16]
 800d3a6:	4909      	ldr	r1, [pc, #36]	; (800d3cc <siprintf+0x3c>)
 800d3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ac:	9105      	str	r1, [sp, #20]
 800d3ae:	6800      	ldr	r0, [r0, #0]
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	a902      	add	r1, sp, #8
 800d3b4:	f000 fa28 	bl	800d808 <_svfiprintf_r>
 800d3b8:	9b02      	ldr	r3, [sp, #8]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	b01c      	add	sp, #112	; 0x70
 800d3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3c4:	b003      	add	sp, #12
 800d3c6:	4770      	bx	lr
 800d3c8:	24000088 	.word	0x24000088
 800d3cc:	ffff0208 	.word	0xffff0208

0800d3d0 <__sread>:
 800d3d0:	b510      	push	{r4, lr}
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d8:	f000 f8da 	bl	800d590 <_read_r>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	bfab      	itete	ge
 800d3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d3e4:	181b      	addge	r3, r3, r0
 800d3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3ea:	bfac      	ite	ge
 800d3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3ee:	81a3      	strhlt	r3, [r4, #12]
 800d3f0:	bd10      	pop	{r4, pc}

0800d3f2 <__swrite>:
 800d3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f6:	461f      	mov	r7, r3
 800d3f8:	898b      	ldrh	r3, [r1, #12]
 800d3fa:	05db      	lsls	r3, r3, #23
 800d3fc:	4605      	mov	r5, r0
 800d3fe:	460c      	mov	r4, r1
 800d400:	4616      	mov	r6, r2
 800d402:	d505      	bpl.n	800d410 <__swrite+0x1e>
 800d404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d408:	2302      	movs	r3, #2
 800d40a:	2200      	movs	r2, #0
 800d40c:	f000 f8ae 	bl	800d56c <_lseek_r>
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	4632      	mov	r2, r6
 800d41e:	463b      	mov	r3, r7
 800d420:	4628      	mov	r0, r5
 800d422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d426:	f000 b8d5 	b.w	800d5d4 <_write_r>

0800d42a <__sseek>:
 800d42a:	b510      	push	{r4, lr}
 800d42c:	460c      	mov	r4, r1
 800d42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d432:	f000 f89b 	bl	800d56c <_lseek_r>
 800d436:	1c43      	adds	r3, r0, #1
 800d438:	89a3      	ldrh	r3, [r4, #12]
 800d43a:	bf15      	itete	ne
 800d43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d446:	81a3      	strheq	r3, [r4, #12]
 800d448:	bf18      	it	ne
 800d44a:	81a3      	strhne	r3, [r4, #12]
 800d44c:	bd10      	pop	{r4, pc}

0800d44e <__sclose>:
 800d44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d452:	f000 b87b 	b.w	800d54c <_close_r>

0800d456 <memset>:
 800d456:	4402      	add	r2, r0
 800d458:	4603      	mov	r3, r0
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d100      	bne.n	800d460 <memset+0xa>
 800d45e:	4770      	bx	lr
 800d460:	f803 1b01 	strb.w	r1, [r3], #1
 800d464:	e7f9      	b.n	800d45a <memset+0x4>
	...

0800d468 <strtok>:
 800d468:	4b16      	ldr	r3, [pc, #88]	; (800d4c4 <strtok+0x5c>)
 800d46a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d46c:	681e      	ldr	r6, [r3, #0]
 800d46e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800d470:	4605      	mov	r5, r0
 800d472:	b9fc      	cbnz	r4, 800d4b4 <strtok+0x4c>
 800d474:	2050      	movs	r0, #80	; 0x50
 800d476:	9101      	str	r1, [sp, #4]
 800d478:	f7ff fde0 	bl	800d03c <malloc>
 800d47c:	9901      	ldr	r1, [sp, #4]
 800d47e:	6470      	str	r0, [r6, #68]	; 0x44
 800d480:	4602      	mov	r2, r0
 800d482:	b920      	cbnz	r0, 800d48e <strtok+0x26>
 800d484:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <strtok+0x60>)
 800d486:	4811      	ldr	r0, [pc, #68]	; (800d4cc <strtok+0x64>)
 800d488:	215b      	movs	r1, #91	; 0x5b
 800d48a:	f000 f8f9 	bl	800d680 <__assert_func>
 800d48e:	e9c0 4400 	strd	r4, r4, [r0]
 800d492:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d496:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d49a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d49e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d4a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d4a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d4aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d4ae:	6184      	str	r4, [r0, #24]
 800d4b0:	7704      	strb	r4, [r0, #28]
 800d4b2:	6244      	str	r4, [r0, #36]	; 0x24
 800d4b4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	b002      	add	sp, #8
 800d4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4c0:	f000 b806 	b.w	800d4d0 <__strtok_r>
 800d4c4:	24000088 	.word	0x24000088
 800d4c8:	08013004 	.word	0x08013004
 800d4cc:	0801301b 	.word	0x0801301b

0800d4d0 <__strtok_r>:
 800d4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4d2:	b908      	cbnz	r0, 800d4d8 <__strtok_r+0x8>
 800d4d4:	6810      	ldr	r0, [r2, #0]
 800d4d6:	b188      	cbz	r0, 800d4fc <__strtok_r+0x2c>
 800d4d8:	4604      	mov	r4, r0
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d4e0:	460f      	mov	r7, r1
 800d4e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d4e6:	b91e      	cbnz	r6, 800d4f0 <__strtok_r+0x20>
 800d4e8:	b965      	cbnz	r5, 800d504 <__strtok_r+0x34>
 800d4ea:	6015      	str	r5, [r2, #0]
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	e005      	b.n	800d4fc <__strtok_r+0x2c>
 800d4f0:	42b5      	cmp	r5, r6
 800d4f2:	d1f6      	bne.n	800d4e2 <__strtok_r+0x12>
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1f0      	bne.n	800d4da <__strtok_r+0xa>
 800d4f8:	6014      	str	r4, [r2, #0]
 800d4fa:	7003      	strb	r3, [r0, #0]
 800d4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fe:	461c      	mov	r4, r3
 800d500:	e00c      	b.n	800d51c <__strtok_r+0x4c>
 800d502:	b915      	cbnz	r5, 800d50a <__strtok_r+0x3a>
 800d504:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d508:	460e      	mov	r6, r1
 800d50a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d50e:	42ab      	cmp	r3, r5
 800d510:	d1f7      	bne.n	800d502 <__strtok_r+0x32>
 800d512:	2b00      	cmp	r3, #0
 800d514:	d0f3      	beq.n	800d4fe <__strtok_r+0x2e>
 800d516:	2300      	movs	r3, #0
 800d518:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d51c:	6014      	str	r4, [r2, #0]
 800d51e:	e7ed      	b.n	800d4fc <__strtok_r+0x2c>

0800d520 <strstr>:
 800d520:	780a      	ldrb	r2, [r1, #0]
 800d522:	b570      	push	{r4, r5, r6, lr}
 800d524:	b96a      	cbnz	r2, 800d542 <strstr+0x22>
 800d526:	bd70      	pop	{r4, r5, r6, pc}
 800d528:	429a      	cmp	r2, r3
 800d52a:	d109      	bne.n	800d540 <strstr+0x20>
 800d52c:	460c      	mov	r4, r1
 800d52e:	4605      	mov	r5, r0
 800d530:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d534:	2b00      	cmp	r3, #0
 800d536:	d0f6      	beq.n	800d526 <strstr+0x6>
 800d538:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d53c:	429e      	cmp	r6, r3
 800d53e:	d0f7      	beq.n	800d530 <strstr+0x10>
 800d540:	3001      	adds	r0, #1
 800d542:	7803      	ldrb	r3, [r0, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1ef      	bne.n	800d528 <strstr+0x8>
 800d548:	4618      	mov	r0, r3
 800d54a:	e7ec      	b.n	800d526 <strstr+0x6>

0800d54c <_close_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4d06      	ldr	r5, [pc, #24]	; (800d568 <_close_r+0x1c>)
 800d550:	2300      	movs	r3, #0
 800d552:	4604      	mov	r4, r0
 800d554:	4608      	mov	r0, r1
 800d556:	602b      	str	r3, [r5, #0]
 800d558:	f7f7 f8c5 	bl	80046e6 <_close>
 800d55c:	1c43      	adds	r3, r0, #1
 800d55e:	d102      	bne.n	800d566 <_close_r+0x1a>
 800d560:	682b      	ldr	r3, [r5, #0]
 800d562:	b103      	cbz	r3, 800d566 <_close_r+0x1a>
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	bd38      	pop	{r3, r4, r5, pc}
 800d568:	240027c4 	.word	0x240027c4

0800d56c <_lseek_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d07      	ldr	r5, [pc, #28]	; (800d58c <_lseek_r+0x20>)
 800d570:	4604      	mov	r4, r0
 800d572:	4608      	mov	r0, r1
 800d574:	4611      	mov	r1, r2
 800d576:	2200      	movs	r2, #0
 800d578:	602a      	str	r2, [r5, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	f7f7 f8da 	bl	8004734 <_lseek>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_lseek_r+0x1e>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_lseek_r+0x1e>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	240027c4 	.word	0x240027c4

0800d590 <_read_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d07      	ldr	r5, [pc, #28]	; (800d5b0 <_read_r+0x20>)
 800d594:	4604      	mov	r4, r0
 800d596:	4608      	mov	r0, r1
 800d598:	4611      	mov	r1, r2
 800d59a:	2200      	movs	r2, #0
 800d59c:	602a      	str	r2, [r5, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f7f7 f868 	bl	8004674 <_read>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d102      	bne.n	800d5ae <_read_r+0x1e>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	b103      	cbz	r3, 800d5ae <_read_r+0x1e>
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	240027c4 	.word	0x240027c4

0800d5b4 <_sbrk_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d06      	ldr	r5, [pc, #24]	; (800d5d0 <_sbrk_r+0x1c>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	602b      	str	r3, [r5, #0]
 800d5c0:	f7f7 f8c6 	bl	8004750 <_sbrk>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_sbrk_r+0x1a>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_sbrk_r+0x1a>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	240027c4 	.word	0x240027c4

0800d5d4 <_write_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	; (800d5f4 <_write_r+0x20>)
 800d5d8:	4604      	mov	r4, r0
 800d5da:	4608      	mov	r0, r1
 800d5dc:	4611      	mov	r1, r2
 800d5de:	2200      	movs	r2, #0
 800d5e0:	602a      	str	r2, [r5, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f7f7 f863 	bl	80046ae <_write>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_write_r+0x1e>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_write_r+0x1e>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	240027c4 	.word	0x240027c4

0800d5f8 <__errno>:
 800d5f8:	4b01      	ldr	r3, [pc, #4]	; (800d600 <__errno+0x8>)
 800d5fa:	6818      	ldr	r0, [r3, #0]
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	24000088 	.word	0x24000088

0800d604 <__libc_init_array>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4d0d      	ldr	r5, [pc, #52]	; (800d63c <__libc_init_array+0x38>)
 800d608:	4c0d      	ldr	r4, [pc, #52]	; (800d640 <__libc_init_array+0x3c>)
 800d60a:	1b64      	subs	r4, r4, r5
 800d60c:	10a4      	asrs	r4, r4, #2
 800d60e:	2600      	movs	r6, #0
 800d610:	42a6      	cmp	r6, r4
 800d612:	d109      	bne.n	800d628 <__libc_init_array+0x24>
 800d614:	4d0b      	ldr	r5, [pc, #44]	; (800d644 <__libc_init_array+0x40>)
 800d616:	4c0c      	ldr	r4, [pc, #48]	; (800d648 <__libc_init_array+0x44>)
 800d618:	f000 ff3e 	bl	800e498 <_init>
 800d61c:	1b64      	subs	r4, r4, r5
 800d61e:	10a4      	asrs	r4, r4, #2
 800d620:	2600      	movs	r6, #0
 800d622:	42a6      	cmp	r6, r4
 800d624:	d105      	bne.n	800d632 <__libc_init_array+0x2e>
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	f855 3b04 	ldr.w	r3, [r5], #4
 800d62c:	4798      	blx	r3
 800d62e:	3601      	adds	r6, #1
 800d630:	e7ee      	b.n	800d610 <__libc_init_array+0xc>
 800d632:	f855 3b04 	ldr.w	r3, [r5], #4
 800d636:	4798      	blx	r3
 800d638:	3601      	adds	r6, #1
 800d63a:	e7f2      	b.n	800d622 <__libc_init_array+0x1e>
 800d63c:	080130e4 	.word	0x080130e4
 800d640:	080130e4 	.word	0x080130e4
 800d644:	080130e4 	.word	0x080130e4
 800d648:	080130e8 	.word	0x080130e8

0800d64c <__retarget_lock_init_recursive>:
 800d64c:	4770      	bx	lr

0800d64e <__retarget_lock_acquire_recursive>:
 800d64e:	4770      	bx	lr

0800d650 <__retarget_lock_release_recursive>:
 800d650:	4770      	bx	lr

0800d652 <strcpy>:
 800d652:	4603      	mov	r3, r0
 800d654:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d658:	f803 2b01 	strb.w	r2, [r3], #1
 800d65c:	2a00      	cmp	r2, #0
 800d65e:	d1f9      	bne.n	800d654 <strcpy+0x2>
 800d660:	4770      	bx	lr

0800d662 <memcpy>:
 800d662:	440a      	add	r2, r1
 800d664:	4291      	cmp	r1, r2
 800d666:	f100 33ff 	add.w	r3, r0, #4294967295
 800d66a:	d100      	bne.n	800d66e <memcpy+0xc>
 800d66c:	4770      	bx	lr
 800d66e:	b510      	push	{r4, lr}
 800d670:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d678:	4291      	cmp	r1, r2
 800d67a:	d1f9      	bne.n	800d670 <memcpy+0xe>
 800d67c:	bd10      	pop	{r4, pc}
	...

0800d680 <__assert_func>:
 800d680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d682:	4614      	mov	r4, r2
 800d684:	461a      	mov	r2, r3
 800d686:	4b09      	ldr	r3, [pc, #36]	; (800d6ac <__assert_func+0x2c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4605      	mov	r5, r0
 800d68c:	68d8      	ldr	r0, [r3, #12]
 800d68e:	b14c      	cbz	r4, 800d6a4 <__assert_func+0x24>
 800d690:	4b07      	ldr	r3, [pc, #28]	; (800d6b0 <__assert_func+0x30>)
 800d692:	9100      	str	r1, [sp, #0]
 800d694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d698:	4906      	ldr	r1, [pc, #24]	; (800d6b4 <__assert_func+0x34>)
 800d69a:	462b      	mov	r3, r5
 800d69c:	f000 fbf0 	bl	800de80 <fiprintf>
 800d6a0:	f000 fc1a 	bl	800ded8 <abort>
 800d6a4:	4b04      	ldr	r3, [pc, #16]	; (800d6b8 <__assert_func+0x38>)
 800d6a6:	461c      	mov	r4, r3
 800d6a8:	e7f3      	b.n	800d692 <__assert_func+0x12>
 800d6aa:	bf00      	nop
 800d6ac:	24000088 	.word	0x24000088
 800d6b0:	08013075 	.word	0x08013075
 800d6b4:	08013082 	.word	0x08013082
 800d6b8:	080130b0 	.word	0x080130b0

0800d6bc <_free_r>:
 800d6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6be:	2900      	cmp	r1, #0
 800d6c0:	d044      	beq.n	800d74c <_free_r+0x90>
 800d6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c6:	9001      	str	r0, [sp, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f1a1 0404 	sub.w	r4, r1, #4
 800d6ce:	bfb8      	it	lt
 800d6d0:	18e4      	addlt	r4, r4, r3
 800d6d2:	f7ff fd5b 	bl	800d18c <__malloc_lock>
 800d6d6:	4a1e      	ldr	r2, [pc, #120]	; (800d750 <_free_r+0x94>)
 800d6d8:	9801      	ldr	r0, [sp, #4]
 800d6da:	6813      	ldr	r3, [r2, #0]
 800d6dc:	b933      	cbnz	r3, 800d6ec <_free_r+0x30>
 800d6de:	6063      	str	r3, [r4, #4]
 800d6e0:	6014      	str	r4, [r2, #0]
 800d6e2:	b003      	add	sp, #12
 800d6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6e8:	f7ff bd56 	b.w	800d198 <__malloc_unlock>
 800d6ec:	42a3      	cmp	r3, r4
 800d6ee:	d908      	bls.n	800d702 <_free_r+0x46>
 800d6f0:	6825      	ldr	r5, [r4, #0]
 800d6f2:	1961      	adds	r1, r4, r5
 800d6f4:	428b      	cmp	r3, r1
 800d6f6:	bf01      	itttt	eq
 800d6f8:	6819      	ldreq	r1, [r3, #0]
 800d6fa:	685b      	ldreq	r3, [r3, #4]
 800d6fc:	1949      	addeq	r1, r1, r5
 800d6fe:	6021      	streq	r1, [r4, #0]
 800d700:	e7ed      	b.n	800d6de <_free_r+0x22>
 800d702:	461a      	mov	r2, r3
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	b10b      	cbz	r3, 800d70c <_free_r+0x50>
 800d708:	42a3      	cmp	r3, r4
 800d70a:	d9fa      	bls.n	800d702 <_free_r+0x46>
 800d70c:	6811      	ldr	r1, [r2, #0]
 800d70e:	1855      	adds	r5, r2, r1
 800d710:	42a5      	cmp	r5, r4
 800d712:	d10b      	bne.n	800d72c <_free_r+0x70>
 800d714:	6824      	ldr	r4, [r4, #0]
 800d716:	4421      	add	r1, r4
 800d718:	1854      	adds	r4, r2, r1
 800d71a:	42a3      	cmp	r3, r4
 800d71c:	6011      	str	r1, [r2, #0]
 800d71e:	d1e0      	bne.n	800d6e2 <_free_r+0x26>
 800d720:	681c      	ldr	r4, [r3, #0]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	6053      	str	r3, [r2, #4]
 800d726:	440c      	add	r4, r1
 800d728:	6014      	str	r4, [r2, #0]
 800d72a:	e7da      	b.n	800d6e2 <_free_r+0x26>
 800d72c:	d902      	bls.n	800d734 <_free_r+0x78>
 800d72e:	230c      	movs	r3, #12
 800d730:	6003      	str	r3, [r0, #0]
 800d732:	e7d6      	b.n	800d6e2 <_free_r+0x26>
 800d734:	6825      	ldr	r5, [r4, #0]
 800d736:	1961      	adds	r1, r4, r5
 800d738:	428b      	cmp	r3, r1
 800d73a:	bf04      	itt	eq
 800d73c:	6819      	ldreq	r1, [r3, #0]
 800d73e:	685b      	ldreq	r3, [r3, #4]
 800d740:	6063      	str	r3, [r4, #4]
 800d742:	bf04      	itt	eq
 800d744:	1949      	addeq	r1, r1, r5
 800d746:	6021      	streq	r1, [r4, #0]
 800d748:	6054      	str	r4, [r2, #4]
 800d74a:	e7ca      	b.n	800d6e2 <_free_r+0x26>
 800d74c:	b003      	add	sp, #12
 800d74e:	bd30      	pop	{r4, r5, pc}
 800d750:	24002680 	.word	0x24002680

0800d754 <__ssputs_r>:
 800d754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d758:	688e      	ldr	r6, [r1, #8]
 800d75a:	461f      	mov	r7, r3
 800d75c:	42be      	cmp	r6, r7
 800d75e:	680b      	ldr	r3, [r1, #0]
 800d760:	4682      	mov	sl, r0
 800d762:	460c      	mov	r4, r1
 800d764:	4690      	mov	r8, r2
 800d766:	d82c      	bhi.n	800d7c2 <__ssputs_r+0x6e>
 800d768:	898a      	ldrh	r2, [r1, #12]
 800d76a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d76e:	d026      	beq.n	800d7be <__ssputs_r+0x6a>
 800d770:	6965      	ldr	r5, [r4, #20]
 800d772:	6909      	ldr	r1, [r1, #16]
 800d774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d778:	eba3 0901 	sub.w	r9, r3, r1
 800d77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d780:	1c7b      	adds	r3, r7, #1
 800d782:	444b      	add	r3, r9
 800d784:	106d      	asrs	r5, r5, #1
 800d786:	429d      	cmp	r5, r3
 800d788:	bf38      	it	cc
 800d78a:	461d      	movcc	r5, r3
 800d78c:	0553      	lsls	r3, r2, #21
 800d78e:	d527      	bpl.n	800d7e0 <__ssputs_r+0x8c>
 800d790:	4629      	mov	r1, r5
 800d792:	f7ff fc7b 	bl	800d08c <_malloc_r>
 800d796:	4606      	mov	r6, r0
 800d798:	b360      	cbz	r0, 800d7f4 <__ssputs_r+0xa0>
 800d79a:	6921      	ldr	r1, [r4, #16]
 800d79c:	464a      	mov	r2, r9
 800d79e:	f7ff ff60 	bl	800d662 <memcpy>
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	6126      	str	r6, [r4, #16]
 800d7b0:	6165      	str	r5, [r4, #20]
 800d7b2:	444e      	add	r6, r9
 800d7b4:	eba5 0509 	sub.w	r5, r5, r9
 800d7b8:	6026      	str	r6, [r4, #0]
 800d7ba:	60a5      	str	r5, [r4, #8]
 800d7bc:	463e      	mov	r6, r7
 800d7be:	42be      	cmp	r6, r7
 800d7c0:	d900      	bls.n	800d7c4 <__ssputs_r+0x70>
 800d7c2:	463e      	mov	r6, r7
 800d7c4:	6820      	ldr	r0, [r4, #0]
 800d7c6:	4632      	mov	r2, r6
 800d7c8:	4641      	mov	r1, r8
 800d7ca:	f000 fb6b 	bl	800dea4 <memmove>
 800d7ce:	68a3      	ldr	r3, [r4, #8]
 800d7d0:	1b9b      	subs	r3, r3, r6
 800d7d2:	60a3      	str	r3, [r4, #8]
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	4433      	add	r3, r6
 800d7d8:	6023      	str	r3, [r4, #0]
 800d7da:	2000      	movs	r0, #0
 800d7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e0:	462a      	mov	r2, r5
 800d7e2:	f000 fb80 	bl	800dee6 <_realloc_r>
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d1e0      	bne.n	800d7ae <__ssputs_r+0x5a>
 800d7ec:	6921      	ldr	r1, [r4, #16]
 800d7ee:	4650      	mov	r0, sl
 800d7f0:	f7ff ff64 	bl	800d6bc <_free_r>
 800d7f4:	230c      	movs	r3, #12
 800d7f6:	f8ca 3000 	str.w	r3, [sl]
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d800:	81a3      	strh	r3, [r4, #12]
 800d802:	f04f 30ff 	mov.w	r0, #4294967295
 800d806:	e7e9      	b.n	800d7dc <__ssputs_r+0x88>

0800d808 <_svfiprintf_r>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	4698      	mov	r8, r3
 800d80e:	898b      	ldrh	r3, [r1, #12]
 800d810:	061b      	lsls	r3, r3, #24
 800d812:	b09d      	sub	sp, #116	; 0x74
 800d814:	4607      	mov	r7, r0
 800d816:	460d      	mov	r5, r1
 800d818:	4614      	mov	r4, r2
 800d81a:	d50e      	bpl.n	800d83a <_svfiprintf_r+0x32>
 800d81c:	690b      	ldr	r3, [r1, #16]
 800d81e:	b963      	cbnz	r3, 800d83a <_svfiprintf_r+0x32>
 800d820:	2140      	movs	r1, #64	; 0x40
 800d822:	f7ff fc33 	bl	800d08c <_malloc_r>
 800d826:	6028      	str	r0, [r5, #0]
 800d828:	6128      	str	r0, [r5, #16]
 800d82a:	b920      	cbnz	r0, 800d836 <_svfiprintf_r+0x2e>
 800d82c:	230c      	movs	r3, #12
 800d82e:	603b      	str	r3, [r7, #0]
 800d830:	f04f 30ff 	mov.w	r0, #4294967295
 800d834:	e0d0      	b.n	800d9d8 <_svfiprintf_r+0x1d0>
 800d836:	2340      	movs	r3, #64	; 0x40
 800d838:	616b      	str	r3, [r5, #20]
 800d83a:	2300      	movs	r3, #0
 800d83c:	9309      	str	r3, [sp, #36]	; 0x24
 800d83e:	2320      	movs	r3, #32
 800d840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d844:	f8cd 800c 	str.w	r8, [sp, #12]
 800d848:	2330      	movs	r3, #48	; 0x30
 800d84a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d9f0 <_svfiprintf_r+0x1e8>
 800d84e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d852:	f04f 0901 	mov.w	r9, #1
 800d856:	4623      	mov	r3, r4
 800d858:	469a      	mov	sl, r3
 800d85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d85e:	b10a      	cbz	r2, 800d864 <_svfiprintf_r+0x5c>
 800d860:	2a25      	cmp	r2, #37	; 0x25
 800d862:	d1f9      	bne.n	800d858 <_svfiprintf_r+0x50>
 800d864:	ebba 0b04 	subs.w	fp, sl, r4
 800d868:	d00b      	beq.n	800d882 <_svfiprintf_r+0x7a>
 800d86a:	465b      	mov	r3, fp
 800d86c:	4622      	mov	r2, r4
 800d86e:	4629      	mov	r1, r5
 800d870:	4638      	mov	r0, r7
 800d872:	f7ff ff6f 	bl	800d754 <__ssputs_r>
 800d876:	3001      	adds	r0, #1
 800d878:	f000 80a9 	beq.w	800d9ce <_svfiprintf_r+0x1c6>
 800d87c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d87e:	445a      	add	r2, fp
 800d880:	9209      	str	r2, [sp, #36]	; 0x24
 800d882:	f89a 3000 	ldrb.w	r3, [sl]
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 80a1 	beq.w	800d9ce <_svfiprintf_r+0x1c6>
 800d88c:	2300      	movs	r3, #0
 800d88e:	f04f 32ff 	mov.w	r2, #4294967295
 800d892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d896:	f10a 0a01 	add.w	sl, sl, #1
 800d89a:	9304      	str	r3, [sp, #16]
 800d89c:	9307      	str	r3, [sp, #28]
 800d89e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8a2:	931a      	str	r3, [sp, #104]	; 0x68
 800d8a4:	4654      	mov	r4, sl
 800d8a6:	2205      	movs	r2, #5
 800d8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ac:	4850      	ldr	r0, [pc, #320]	; (800d9f0 <_svfiprintf_r+0x1e8>)
 800d8ae:	f7f2 fd2f 	bl	8000310 <memchr>
 800d8b2:	9a04      	ldr	r2, [sp, #16]
 800d8b4:	b9d8      	cbnz	r0, 800d8ee <_svfiprintf_r+0xe6>
 800d8b6:	06d0      	lsls	r0, r2, #27
 800d8b8:	bf44      	itt	mi
 800d8ba:	2320      	movmi	r3, #32
 800d8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8c0:	0711      	lsls	r1, r2, #28
 800d8c2:	bf44      	itt	mi
 800d8c4:	232b      	movmi	r3, #43	; 0x2b
 800d8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d8d0:	d015      	beq.n	800d8fe <_svfiprintf_r+0xf6>
 800d8d2:	9a07      	ldr	r2, [sp, #28]
 800d8d4:	4654      	mov	r4, sl
 800d8d6:	2000      	movs	r0, #0
 800d8d8:	f04f 0c0a 	mov.w	ip, #10
 800d8dc:	4621      	mov	r1, r4
 800d8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8e2:	3b30      	subs	r3, #48	; 0x30
 800d8e4:	2b09      	cmp	r3, #9
 800d8e6:	d94d      	bls.n	800d984 <_svfiprintf_r+0x17c>
 800d8e8:	b1b0      	cbz	r0, 800d918 <_svfiprintf_r+0x110>
 800d8ea:	9207      	str	r2, [sp, #28]
 800d8ec:	e014      	b.n	800d918 <_svfiprintf_r+0x110>
 800d8ee:	eba0 0308 	sub.w	r3, r0, r8
 800d8f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	46a2      	mov	sl, r4
 800d8fc:	e7d2      	b.n	800d8a4 <_svfiprintf_r+0x9c>
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	1d19      	adds	r1, r3, #4
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	9103      	str	r1, [sp, #12]
 800d906:	2b00      	cmp	r3, #0
 800d908:	bfbb      	ittet	lt
 800d90a:	425b      	neglt	r3, r3
 800d90c:	f042 0202 	orrlt.w	r2, r2, #2
 800d910:	9307      	strge	r3, [sp, #28]
 800d912:	9307      	strlt	r3, [sp, #28]
 800d914:	bfb8      	it	lt
 800d916:	9204      	strlt	r2, [sp, #16]
 800d918:	7823      	ldrb	r3, [r4, #0]
 800d91a:	2b2e      	cmp	r3, #46	; 0x2e
 800d91c:	d10c      	bne.n	800d938 <_svfiprintf_r+0x130>
 800d91e:	7863      	ldrb	r3, [r4, #1]
 800d920:	2b2a      	cmp	r3, #42	; 0x2a
 800d922:	d134      	bne.n	800d98e <_svfiprintf_r+0x186>
 800d924:	9b03      	ldr	r3, [sp, #12]
 800d926:	1d1a      	adds	r2, r3, #4
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	9203      	str	r2, [sp, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bfb8      	it	lt
 800d930:	f04f 33ff 	movlt.w	r3, #4294967295
 800d934:	3402      	adds	r4, #2
 800d936:	9305      	str	r3, [sp, #20]
 800d938:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800da00 <_svfiprintf_r+0x1f8>
 800d93c:	7821      	ldrb	r1, [r4, #0]
 800d93e:	2203      	movs	r2, #3
 800d940:	4650      	mov	r0, sl
 800d942:	f7f2 fce5 	bl	8000310 <memchr>
 800d946:	b138      	cbz	r0, 800d958 <_svfiprintf_r+0x150>
 800d948:	9b04      	ldr	r3, [sp, #16]
 800d94a:	eba0 000a 	sub.w	r0, r0, sl
 800d94e:	2240      	movs	r2, #64	; 0x40
 800d950:	4082      	lsls	r2, r0
 800d952:	4313      	orrs	r3, r2
 800d954:	3401      	adds	r4, #1
 800d956:	9304      	str	r3, [sp, #16]
 800d958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d95c:	4825      	ldr	r0, [pc, #148]	; (800d9f4 <_svfiprintf_r+0x1ec>)
 800d95e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d962:	2206      	movs	r2, #6
 800d964:	f7f2 fcd4 	bl	8000310 <memchr>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d038      	beq.n	800d9de <_svfiprintf_r+0x1d6>
 800d96c:	4b22      	ldr	r3, [pc, #136]	; (800d9f8 <_svfiprintf_r+0x1f0>)
 800d96e:	bb1b      	cbnz	r3, 800d9b8 <_svfiprintf_r+0x1b0>
 800d970:	9b03      	ldr	r3, [sp, #12]
 800d972:	3307      	adds	r3, #7
 800d974:	f023 0307 	bic.w	r3, r3, #7
 800d978:	3308      	adds	r3, #8
 800d97a:	9303      	str	r3, [sp, #12]
 800d97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d97e:	4433      	add	r3, r6
 800d980:	9309      	str	r3, [sp, #36]	; 0x24
 800d982:	e768      	b.n	800d856 <_svfiprintf_r+0x4e>
 800d984:	fb0c 3202 	mla	r2, ip, r2, r3
 800d988:	460c      	mov	r4, r1
 800d98a:	2001      	movs	r0, #1
 800d98c:	e7a6      	b.n	800d8dc <_svfiprintf_r+0xd4>
 800d98e:	2300      	movs	r3, #0
 800d990:	3401      	adds	r4, #1
 800d992:	9305      	str	r3, [sp, #20]
 800d994:	4619      	mov	r1, r3
 800d996:	f04f 0c0a 	mov.w	ip, #10
 800d99a:	4620      	mov	r0, r4
 800d99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9a0:	3a30      	subs	r2, #48	; 0x30
 800d9a2:	2a09      	cmp	r2, #9
 800d9a4:	d903      	bls.n	800d9ae <_svfiprintf_r+0x1a6>
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d0c6      	beq.n	800d938 <_svfiprintf_r+0x130>
 800d9aa:	9105      	str	r1, [sp, #20]
 800d9ac:	e7c4      	b.n	800d938 <_svfiprintf_r+0x130>
 800d9ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e7f0      	b.n	800d99a <_svfiprintf_r+0x192>
 800d9b8:	ab03      	add	r3, sp, #12
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	462a      	mov	r2, r5
 800d9be:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <_svfiprintf_r+0x1f4>)
 800d9c0:	a904      	add	r1, sp, #16
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	f3af 8000 	nop.w
 800d9c8:	1c42      	adds	r2, r0, #1
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	d1d6      	bne.n	800d97c <_svfiprintf_r+0x174>
 800d9ce:	89ab      	ldrh	r3, [r5, #12]
 800d9d0:	065b      	lsls	r3, r3, #25
 800d9d2:	f53f af2d 	bmi.w	800d830 <_svfiprintf_r+0x28>
 800d9d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9d8:	b01d      	add	sp, #116	; 0x74
 800d9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9de:	ab03      	add	r3, sp, #12
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	462a      	mov	r2, r5
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <_svfiprintf_r+0x1f4>)
 800d9e6:	a904      	add	r1, sp, #16
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f000 f879 	bl	800dae0 <_printf_i>
 800d9ee:	e7eb      	b.n	800d9c8 <_svfiprintf_r+0x1c0>
 800d9f0:	080130b1 	.word	0x080130b1
 800d9f4:	080130bb 	.word	0x080130bb
 800d9f8:	00000000 	.word	0x00000000
 800d9fc:	0800d755 	.word	0x0800d755
 800da00:	080130b7 	.word	0x080130b7

0800da04 <_printf_common>:
 800da04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da08:	4616      	mov	r6, r2
 800da0a:	4699      	mov	r9, r3
 800da0c:	688a      	ldr	r2, [r1, #8]
 800da0e:	690b      	ldr	r3, [r1, #16]
 800da10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da14:	4293      	cmp	r3, r2
 800da16:	bfb8      	it	lt
 800da18:	4613      	movlt	r3, r2
 800da1a:	6033      	str	r3, [r6, #0]
 800da1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da20:	4607      	mov	r7, r0
 800da22:	460c      	mov	r4, r1
 800da24:	b10a      	cbz	r2, 800da2a <_printf_common+0x26>
 800da26:	3301      	adds	r3, #1
 800da28:	6033      	str	r3, [r6, #0]
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	0699      	lsls	r1, r3, #26
 800da2e:	bf42      	ittt	mi
 800da30:	6833      	ldrmi	r3, [r6, #0]
 800da32:	3302      	addmi	r3, #2
 800da34:	6033      	strmi	r3, [r6, #0]
 800da36:	6825      	ldr	r5, [r4, #0]
 800da38:	f015 0506 	ands.w	r5, r5, #6
 800da3c:	d106      	bne.n	800da4c <_printf_common+0x48>
 800da3e:	f104 0a19 	add.w	sl, r4, #25
 800da42:	68e3      	ldr	r3, [r4, #12]
 800da44:	6832      	ldr	r2, [r6, #0]
 800da46:	1a9b      	subs	r3, r3, r2
 800da48:	42ab      	cmp	r3, r5
 800da4a:	dc26      	bgt.n	800da9a <_printf_common+0x96>
 800da4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da50:	1e13      	subs	r3, r2, #0
 800da52:	6822      	ldr	r2, [r4, #0]
 800da54:	bf18      	it	ne
 800da56:	2301      	movne	r3, #1
 800da58:	0692      	lsls	r2, r2, #26
 800da5a:	d42b      	bmi.n	800dab4 <_printf_common+0xb0>
 800da5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da60:	4649      	mov	r1, r9
 800da62:	4638      	mov	r0, r7
 800da64:	47c0      	blx	r8
 800da66:	3001      	adds	r0, #1
 800da68:	d01e      	beq.n	800daa8 <_printf_common+0xa4>
 800da6a:	6823      	ldr	r3, [r4, #0]
 800da6c:	6922      	ldr	r2, [r4, #16]
 800da6e:	f003 0306 	and.w	r3, r3, #6
 800da72:	2b04      	cmp	r3, #4
 800da74:	bf02      	ittt	eq
 800da76:	68e5      	ldreq	r5, [r4, #12]
 800da78:	6833      	ldreq	r3, [r6, #0]
 800da7a:	1aed      	subeq	r5, r5, r3
 800da7c:	68a3      	ldr	r3, [r4, #8]
 800da7e:	bf0c      	ite	eq
 800da80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da84:	2500      	movne	r5, #0
 800da86:	4293      	cmp	r3, r2
 800da88:	bfc4      	itt	gt
 800da8a:	1a9b      	subgt	r3, r3, r2
 800da8c:	18ed      	addgt	r5, r5, r3
 800da8e:	2600      	movs	r6, #0
 800da90:	341a      	adds	r4, #26
 800da92:	42b5      	cmp	r5, r6
 800da94:	d11a      	bne.n	800dacc <_printf_common+0xc8>
 800da96:	2000      	movs	r0, #0
 800da98:	e008      	b.n	800daac <_printf_common+0xa8>
 800da9a:	2301      	movs	r3, #1
 800da9c:	4652      	mov	r2, sl
 800da9e:	4649      	mov	r1, r9
 800daa0:	4638      	mov	r0, r7
 800daa2:	47c0      	blx	r8
 800daa4:	3001      	adds	r0, #1
 800daa6:	d103      	bne.n	800dab0 <_printf_common+0xac>
 800daa8:	f04f 30ff 	mov.w	r0, #4294967295
 800daac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dab0:	3501      	adds	r5, #1
 800dab2:	e7c6      	b.n	800da42 <_printf_common+0x3e>
 800dab4:	18e1      	adds	r1, r4, r3
 800dab6:	1c5a      	adds	r2, r3, #1
 800dab8:	2030      	movs	r0, #48	; 0x30
 800daba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dabe:	4422      	add	r2, r4
 800dac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dac8:	3302      	adds	r3, #2
 800daca:	e7c7      	b.n	800da5c <_printf_common+0x58>
 800dacc:	2301      	movs	r3, #1
 800dace:	4622      	mov	r2, r4
 800dad0:	4649      	mov	r1, r9
 800dad2:	4638      	mov	r0, r7
 800dad4:	47c0      	blx	r8
 800dad6:	3001      	adds	r0, #1
 800dad8:	d0e6      	beq.n	800daa8 <_printf_common+0xa4>
 800dada:	3601      	adds	r6, #1
 800dadc:	e7d9      	b.n	800da92 <_printf_common+0x8e>
	...

0800dae0 <_printf_i>:
 800dae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dae4:	7e0f      	ldrb	r7, [r1, #24]
 800dae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dae8:	2f78      	cmp	r7, #120	; 0x78
 800daea:	4691      	mov	r9, r2
 800daec:	4680      	mov	r8, r0
 800daee:	460c      	mov	r4, r1
 800daf0:	469a      	mov	sl, r3
 800daf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800daf6:	d807      	bhi.n	800db08 <_printf_i+0x28>
 800daf8:	2f62      	cmp	r7, #98	; 0x62
 800dafa:	d80a      	bhi.n	800db12 <_printf_i+0x32>
 800dafc:	2f00      	cmp	r7, #0
 800dafe:	f000 80d4 	beq.w	800dcaa <_printf_i+0x1ca>
 800db02:	2f58      	cmp	r7, #88	; 0x58
 800db04:	f000 80c0 	beq.w	800dc88 <_printf_i+0x1a8>
 800db08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db10:	e03a      	b.n	800db88 <_printf_i+0xa8>
 800db12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db16:	2b15      	cmp	r3, #21
 800db18:	d8f6      	bhi.n	800db08 <_printf_i+0x28>
 800db1a:	a101      	add	r1, pc, #4	; (adr r1, 800db20 <_printf_i+0x40>)
 800db1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db20:	0800db79 	.word	0x0800db79
 800db24:	0800db8d 	.word	0x0800db8d
 800db28:	0800db09 	.word	0x0800db09
 800db2c:	0800db09 	.word	0x0800db09
 800db30:	0800db09 	.word	0x0800db09
 800db34:	0800db09 	.word	0x0800db09
 800db38:	0800db8d 	.word	0x0800db8d
 800db3c:	0800db09 	.word	0x0800db09
 800db40:	0800db09 	.word	0x0800db09
 800db44:	0800db09 	.word	0x0800db09
 800db48:	0800db09 	.word	0x0800db09
 800db4c:	0800dc91 	.word	0x0800dc91
 800db50:	0800dbb9 	.word	0x0800dbb9
 800db54:	0800dc4b 	.word	0x0800dc4b
 800db58:	0800db09 	.word	0x0800db09
 800db5c:	0800db09 	.word	0x0800db09
 800db60:	0800dcb3 	.word	0x0800dcb3
 800db64:	0800db09 	.word	0x0800db09
 800db68:	0800dbb9 	.word	0x0800dbb9
 800db6c:	0800db09 	.word	0x0800db09
 800db70:	0800db09 	.word	0x0800db09
 800db74:	0800dc53 	.word	0x0800dc53
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	1d1a      	adds	r2, r3, #4
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	602a      	str	r2, [r5, #0]
 800db80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db88:	2301      	movs	r3, #1
 800db8a:	e09f      	b.n	800dccc <_printf_i+0x1ec>
 800db8c:	6820      	ldr	r0, [r4, #0]
 800db8e:	682b      	ldr	r3, [r5, #0]
 800db90:	0607      	lsls	r7, r0, #24
 800db92:	f103 0104 	add.w	r1, r3, #4
 800db96:	6029      	str	r1, [r5, #0]
 800db98:	d501      	bpl.n	800db9e <_printf_i+0xbe>
 800db9a:	681e      	ldr	r6, [r3, #0]
 800db9c:	e003      	b.n	800dba6 <_printf_i+0xc6>
 800db9e:	0646      	lsls	r6, r0, #25
 800dba0:	d5fb      	bpl.n	800db9a <_printf_i+0xba>
 800dba2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dba6:	2e00      	cmp	r6, #0
 800dba8:	da03      	bge.n	800dbb2 <_printf_i+0xd2>
 800dbaa:	232d      	movs	r3, #45	; 0x2d
 800dbac:	4276      	negs	r6, r6
 800dbae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbb2:	485a      	ldr	r0, [pc, #360]	; (800dd1c <_printf_i+0x23c>)
 800dbb4:	230a      	movs	r3, #10
 800dbb6:	e012      	b.n	800dbde <_printf_i+0xfe>
 800dbb8:	682b      	ldr	r3, [r5, #0]
 800dbba:	6820      	ldr	r0, [r4, #0]
 800dbbc:	1d19      	adds	r1, r3, #4
 800dbbe:	6029      	str	r1, [r5, #0]
 800dbc0:	0605      	lsls	r5, r0, #24
 800dbc2:	d501      	bpl.n	800dbc8 <_printf_i+0xe8>
 800dbc4:	681e      	ldr	r6, [r3, #0]
 800dbc6:	e002      	b.n	800dbce <_printf_i+0xee>
 800dbc8:	0641      	lsls	r1, r0, #25
 800dbca:	d5fb      	bpl.n	800dbc4 <_printf_i+0xe4>
 800dbcc:	881e      	ldrh	r6, [r3, #0]
 800dbce:	4853      	ldr	r0, [pc, #332]	; (800dd1c <_printf_i+0x23c>)
 800dbd0:	2f6f      	cmp	r7, #111	; 0x6f
 800dbd2:	bf0c      	ite	eq
 800dbd4:	2308      	moveq	r3, #8
 800dbd6:	230a      	movne	r3, #10
 800dbd8:	2100      	movs	r1, #0
 800dbda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbde:	6865      	ldr	r5, [r4, #4]
 800dbe0:	60a5      	str	r5, [r4, #8]
 800dbe2:	2d00      	cmp	r5, #0
 800dbe4:	bfa2      	ittt	ge
 800dbe6:	6821      	ldrge	r1, [r4, #0]
 800dbe8:	f021 0104 	bicge.w	r1, r1, #4
 800dbec:	6021      	strge	r1, [r4, #0]
 800dbee:	b90e      	cbnz	r6, 800dbf4 <_printf_i+0x114>
 800dbf0:	2d00      	cmp	r5, #0
 800dbf2:	d04b      	beq.n	800dc8c <_printf_i+0x1ac>
 800dbf4:	4615      	mov	r5, r2
 800dbf6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbfa:	fb03 6711 	mls	r7, r3, r1, r6
 800dbfe:	5dc7      	ldrb	r7, [r0, r7]
 800dc00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc04:	4637      	mov	r7, r6
 800dc06:	42bb      	cmp	r3, r7
 800dc08:	460e      	mov	r6, r1
 800dc0a:	d9f4      	bls.n	800dbf6 <_printf_i+0x116>
 800dc0c:	2b08      	cmp	r3, #8
 800dc0e:	d10b      	bne.n	800dc28 <_printf_i+0x148>
 800dc10:	6823      	ldr	r3, [r4, #0]
 800dc12:	07de      	lsls	r6, r3, #31
 800dc14:	d508      	bpl.n	800dc28 <_printf_i+0x148>
 800dc16:	6923      	ldr	r3, [r4, #16]
 800dc18:	6861      	ldr	r1, [r4, #4]
 800dc1a:	4299      	cmp	r1, r3
 800dc1c:	bfde      	ittt	le
 800dc1e:	2330      	movle	r3, #48	; 0x30
 800dc20:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc24:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc28:	1b52      	subs	r2, r2, r5
 800dc2a:	6122      	str	r2, [r4, #16]
 800dc2c:	f8cd a000 	str.w	sl, [sp]
 800dc30:	464b      	mov	r3, r9
 800dc32:	aa03      	add	r2, sp, #12
 800dc34:	4621      	mov	r1, r4
 800dc36:	4640      	mov	r0, r8
 800dc38:	f7ff fee4 	bl	800da04 <_printf_common>
 800dc3c:	3001      	adds	r0, #1
 800dc3e:	d14a      	bne.n	800dcd6 <_printf_i+0x1f6>
 800dc40:	f04f 30ff 	mov.w	r0, #4294967295
 800dc44:	b004      	add	sp, #16
 800dc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	f043 0320 	orr.w	r3, r3, #32
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	4833      	ldr	r0, [pc, #204]	; (800dd20 <_printf_i+0x240>)
 800dc54:	2778      	movs	r7, #120	; 0x78
 800dc56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	6829      	ldr	r1, [r5, #0]
 800dc5e:	061f      	lsls	r7, r3, #24
 800dc60:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc64:	d402      	bmi.n	800dc6c <_printf_i+0x18c>
 800dc66:	065f      	lsls	r7, r3, #25
 800dc68:	bf48      	it	mi
 800dc6a:	b2b6      	uxthmi	r6, r6
 800dc6c:	07df      	lsls	r7, r3, #31
 800dc6e:	bf48      	it	mi
 800dc70:	f043 0320 	orrmi.w	r3, r3, #32
 800dc74:	6029      	str	r1, [r5, #0]
 800dc76:	bf48      	it	mi
 800dc78:	6023      	strmi	r3, [r4, #0]
 800dc7a:	b91e      	cbnz	r6, 800dc84 <_printf_i+0x1a4>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	f023 0320 	bic.w	r3, r3, #32
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	2310      	movs	r3, #16
 800dc86:	e7a7      	b.n	800dbd8 <_printf_i+0xf8>
 800dc88:	4824      	ldr	r0, [pc, #144]	; (800dd1c <_printf_i+0x23c>)
 800dc8a:	e7e4      	b.n	800dc56 <_printf_i+0x176>
 800dc8c:	4615      	mov	r5, r2
 800dc8e:	e7bd      	b.n	800dc0c <_printf_i+0x12c>
 800dc90:	682b      	ldr	r3, [r5, #0]
 800dc92:	6826      	ldr	r6, [r4, #0]
 800dc94:	6961      	ldr	r1, [r4, #20]
 800dc96:	1d18      	adds	r0, r3, #4
 800dc98:	6028      	str	r0, [r5, #0]
 800dc9a:	0635      	lsls	r5, r6, #24
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	d501      	bpl.n	800dca4 <_printf_i+0x1c4>
 800dca0:	6019      	str	r1, [r3, #0]
 800dca2:	e002      	b.n	800dcaa <_printf_i+0x1ca>
 800dca4:	0670      	lsls	r0, r6, #25
 800dca6:	d5fb      	bpl.n	800dca0 <_printf_i+0x1c0>
 800dca8:	8019      	strh	r1, [r3, #0]
 800dcaa:	2300      	movs	r3, #0
 800dcac:	6123      	str	r3, [r4, #16]
 800dcae:	4615      	mov	r5, r2
 800dcb0:	e7bc      	b.n	800dc2c <_printf_i+0x14c>
 800dcb2:	682b      	ldr	r3, [r5, #0]
 800dcb4:	1d1a      	adds	r2, r3, #4
 800dcb6:	602a      	str	r2, [r5, #0]
 800dcb8:	681d      	ldr	r5, [r3, #0]
 800dcba:	6862      	ldr	r2, [r4, #4]
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f7f2 fb26 	bl	8000310 <memchr>
 800dcc4:	b108      	cbz	r0, 800dcca <_printf_i+0x1ea>
 800dcc6:	1b40      	subs	r0, r0, r5
 800dcc8:	6060      	str	r0, [r4, #4]
 800dcca:	6863      	ldr	r3, [r4, #4]
 800dccc:	6123      	str	r3, [r4, #16]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd4:	e7aa      	b.n	800dc2c <_printf_i+0x14c>
 800dcd6:	6923      	ldr	r3, [r4, #16]
 800dcd8:	462a      	mov	r2, r5
 800dcda:	4649      	mov	r1, r9
 800dcdc:	4640      	mov	r0, r8
 800dcde:	47d0      	blx	sl
 800dce0:	3001      	adds	r0, #1
 800dce2:	d0ad      	beq.n	800dc40 <_printf_i+0x160>
 800dce4:	6823      	ldr	r3, [r4, #0]
 800dce6:	079b      	lsls	r3, r3, #30
 800dce8:	d413      	bmi.n	800dd12 <_printf_i+0x232>
 800dcea:	68e0      	ldr	r0, [r4, #12]
 800dcec:	9b03      	ldr	r3, [sp, #12]
 800dcee:	4298      	cmp	r0, r3
 800dcf0:	bfb8      	it	lt
 800dcf2:	4618      	movlt	r0, r3
 800dcf4:	e7a6      	b.n	800dc44 <_printf_i+0x164>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	4632      	mov	r2, r6
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	4640      	mov	r0, r8
 800dcfe:	47d0      	blx	sl
 800dd00:	3001      	adds	r0, #1
 800dd02:	d09d      	beq.n	800dc40 <_printf_i+0x160>
 800dd04:	3501      	adds	r5, #1
 800dd06:	68e3      	ldr	r3, [r4, #12]
 800dd08:	9903      	ldr	r1, [sp, #12]
 800dd0a:	1a5b      	subs	r3, r3, r1
 800dd0c:	42ab      	cmp	r3, r5
 800dd0e:	dcf2      	bgt.n	800dcf6 <_printf_i+0x216>
 800dd10:	e7eb      	b.n	800dcea <_printf_i+0x20a>
 800dd12:	2500      	movs	r5, #0
 800dd14:	f104 0619 	add.w	r6, r4, #25
 800dd18:	e7f5      	b.n	800dd06 <_printf_i+0x226>
 800dd1a:	bf00      	nop
 800dd1c:	080130c2 	.word	0x080130c2
 800dd20:	080130d3 	.word	0x080130d3

0800dd24 <__sflush_r>:
 800dd24:	898a      	ldrh	r2, [r1, #12]
 800dd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	0710      	lsls	r0, r2, #28
 800dd2e:	460c      	mov	r4, r1
 800dd30:	d458      	bmi.n	800dde4 <__sflush_r+0xc0>
 800dd32:	684b      	ldr	r3, [r1, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	dc05      	bgt.n	800dd44 <__sflush_r+0x20>
 800dd38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dc02      	bgt.n	800dd44 <__sflush_r+0x20>
 800dd3e:	2000      	movs	r0, #0
 800dd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd46:	2e00      	cmp	r6, #0
 800dd48:	d0f9      	beq.n	800dd3e <__sflush_r+0x1a>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd50:	682f      	ldr	r7, [r5, #0]
 800dd52:	6a21      	ldr	r1, [r4, #32]
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	d032      	beq.n	800ddbe <__sflush_r+0x9a>
 800dd58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	075a      	lsls	r2, r3, #29
 800dd5e:	d505      	bpl.n	800dd6c <__sflush_r+0x48>
 800dd60:	6863      	ldr	r3, [r4, #4]
 800dd62:	1ac0      	subs	r0, r0, r3
 800dd64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd66:	b10b      	cbz	r3, 800dd6c <__sflush_r+0x48>
 800dd68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd6a:	1ac0      	subs	r0, r0, r3
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4602      	mov	r2, r0
 800dd70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd72:	6a21      	ldr	r1, [r4, #32]
 800dd74:	4628      	mov	r0, r5
 800dd76:	47b0      	blx	r6
 800dd78:	1c43      	adds	r3, r0, #1
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	d106      	bne.n	800dd8c <__sflush_r+0x68>
 800dd7e:	6829      	ldr	r1, [r5, #0]
 800dd80:	291d      	cmp	r1, #29
 800dd82:	d82b      	bhi.n	800dddc <__sflush_r+0xb8>
 800dd84:	4a29      	ldr	r2, [pc, #164]	; (800de2c <__sflush_r+0x108>)
 800dd86:	410a      	asrs	r2, r1
 800dd88:	07d6      	lsls	r6, r2, #31
 800dd8a:	d427      	bmi.n	800dddc <__sflush_r+0xb8>
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	6062      	str	r2, [r4, #4]
 800dd90:	04d9      	lsls	r1, r3, #19
 800dd92:	6922      	ldr	r2, [r4, #16]
 800dd94:	6022      	str	r2, [r4, #0]
 800dd96:	d504      	bpl.n	800dda2 <__sflush_r+0x7e>
 800dd98:	1c42      	adds	r2, r0, #1
 800dd9a:	d101      	bne.n	800dda0 <__sflush_r+0x7c>
 800dd9c:	682b      	ldr	r3, [r5, #0]
 800dd9e:	b903      	cbnz	r3, 800dda2 <__sflush_r+0x7e>
 800dda0:	6560      	str	r0, [r4, #84]	; 0x54
 800dda2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dda4:	602f      	str	r7, [r5, #0]
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d0c9      	beq.n	800dd3e <__sflush_r+0x1a>
 800ddaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddae:	4299      	cmp	r1, r3
 800ddb0:	d002      	beq.n	800ddb8 <__sflush_r+0x94>
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	f7ff fc82 	bl	800d6bc <_free_r>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	6360      	str	r0, [r4, #52]	; 0x34
 800ddbc:	e7c0      	b.n	800dd40 <__sflush_r+0x1c>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	47b0      	blx	r6
 800ddc4:	1c41      	adds	r1, r0, #1
 800ddc6:	d1c8      	bne.n	800dd5a <__sflush_r+0x36>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d0c5      	beq.n	800dd5a <__sflush_r+0x36>
 800ddce:	2b1d      	cmp	r3, #29
 800ddd0:	d001      	beq.n	800ddd6 <__sflush_r+0xb2>
 800ddd2:	2b16      	cmp	r3, #22
 800ddd4:	d101      	bne.n	800ddda <__sflush_r+0xb6>
 800ddd6:	602f      	str	r7, [r5, #0]
 800ddd8:	e7b1      	b.n	800dd3e <__sflush_r+0x1a>
 800ddda:	89a3      	ldrh	r3, [r4, #12]
 800dddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	e7ad      	b.n	800dd40 <__sflush_r+0x1c>
 800dde4:	690f      	ldr	r7, [r1, #16]
 800dde6:	2f00      	cmp	r7, #0
 800dde8:	d0a9      	beq.n	800dd3e <__sflush_r+0x1a>
 800ddea:	0793      	lsls	r3, r2, #30
 800ddec:	680e      	ldr	r6, [r1, #0]
 800ddee:	bf08      	it	eq
 800ddf0:	694b      	ldreq	r3, [r1, #20]
 800ddf2:	600f      	str	r7, [r1, #0]
 800ddf4:	bf18      	it	ne
 800ddf6:	2300      	movne	r3, #0
 800ddf8:	eba6 0807 	sub.w	r8, r6, r7
 800ddfc:	608b      	str	r3, [r1, #8]
 800ddfe:	f1b8 0f00 	cmp.w	r8, #0
 800de02:	dd9c      	ble.n	800dd3e <__sflush_r+0x1a>
 800de04:	6a21      	ldr	r1, [r4, #32]
 800de06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de08:	4643      	mov	r3, r8
 800de0a:	463a      	mov	r2, r7
 800de0c:	4628      	mov	r0, r5
 800de0e:	47b0      	blx	r6
 800de10:	2800      	cmp	r0, #0
 800de12:	dc06      	bgt.n	800de22 <__sflush_r+0xfe>
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de1a:	81a3      	strh	r3, [r4, #12]
 800de1c:	f04f 30ff 	mov.w	r0, #4294967295
 800de20:	e78e      	b.n	800dd40 <__sflush_r+0x1c>
 800de22:	4407      	add	r7, r0
 800de24:	eba8 0800 	sub.w	r8, r8, r0
 800de28:	e7e9      	b.n	800ddfe <__sflush_r+0xda>
 800de2a:	bf00      	nop
 800de2c:	dfbffffe 	.word	0xdfbffffe

0800de30 <_fflush_r>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	690b      	ldr	r3, [r1, #16]
 800de34:	4605      	mov	r5, r0
 800de36:	460c      	mov	r4, r1
 800de38:	b913      	cbnz	r3, 800de40 <_fflush_r+0x10>
 800de3a:	2500      	movs	r5, #0
 800de3c:	4628      	mov	r0, r5
 800de3e:	bd38      	pop	{r3, r4, r5, pc}
 800de40:	b118      	cbz	r0, 800de4a <_fflush_r+0x1a>
 800de42:	6a03      	ldr	r3, [r0, #32]
 800de44:	b90b      	cbnz	r3, 800de4a <_fflush_r+0x1a>
 800de46:	f7ff fa39 	bl	800d2bc <__sinit>
 800de4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d0f3      	beq.n	800de3a <_fflush_r+0xa>
 800de52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de54:	07d0      	lsls	r0, r2, #31
 800de56:	d404      	bmi.n	800de62 <_fflush_r+0x32>
 800de58:	0599      	lsls	r1, r3, #22
 800de5a:	d402      	bmi.n	800de62 <_fflush_r+0x32>
 800de5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de5e:	f7ff fbf6 	bl	800d64e <__retarget_lock_acquire_recursive>
 800de62:	4628      	mov	r0, r5
 800de64:	4621      	mov	r1, r4
 800de66:	f7ff ff5d 	bl	800dd24 <__sflush_r>
 800de6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de6c:	07da      	lsls	r2, r3, #31
 800de6e:	4605      	mov	r5, r0
 800de70:	d4e4      	bmi.n	800de3c <_fflush_r+0xc>
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	059b      	lsls	r3, r3, #22
 800de76:	d4e1      	bmi.n	800de3c <_fflush_r+0xc>
 800de78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de7a:	f7ff fbe9 	bl	800d650 <__retarget_lock_release_recursive>
 800de7e:	e7dd      	b.n	800de3c <_fflush_r+0xc>

0800de80 <fiprintf>:
 800de80:	b40e      	push	{r1, r2, r3}
 800de82:	b503      	push	{r0, r1, lr}
 800de84:	4601      	mov	r1, r0
 800de86:	ab03      	add	r3, sp, #12
 800de88:	4805      	ldr	r0, [pc, #20]	; (800dea0 <fiprintf+0x20>)
 800de8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de8e:	6800      	ldr	r0, [r0, #0]
 800de90:	9301      	str	r3, [sp, #4]
 800de92:	f000 f881 	bl	800df98 <_vfiprintf_r>
 800de96:	b002      	add	sp, #8
 800de98:	f85d eb04 	ldr.w	lr, [sp], #4
 800de9c:	b003      	add	sp, #12
 800de9e:	4770      	bx	lr
 800dea0:	24000088 	.word	0x24000088

0800dea4 <memmove>:
 800dea4:	4288      	cmp	r0, r1
 800dea6:	b510      	push	{r4, lr}
 800dea8:	eb01 0402 	add.w	r4, r1, r2
 800deac:	d902      	bls.n	800deb4 <memmove+0x10>
 800deae:	4284      	cmp	r4, r0
 800deb0:	4623      	mov	r3, r4
 800deb2:	d807      	bhi.n	800dec4 <memmove+0x20>
 800deb4:	1e43      	subs	r3, r0, #1
 800deb6:	42a1      	cmp	r1, r4
 800deb8:	d008      	beq.n	800decc <memmove+0x28>
 800deba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800debe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dec2:	e7f8      	b.n	800deb6 <memmove+0x12>
 800dec4:	4402      	add	r2, r0
 800dec6:	4601      	mov	r1, r0
 800dec8:	428a      	cmp	r2, r1
 800deca:	d100      	bne.n	800dece <memmove+0x2a>
 800decc:	bd10      	pop	{r4, pc}
 800dece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ded2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ded6:	e7f7      	b.n	800dec8 <memmove+0x24>

0800ded8 <abort>:
 800ded8:	b508      	push	{r3, lr}
 800deda:	2006      	movs	r0, #6
 800dedc:	f000 fa34 	bl	800e348 <raise>
 800dee0:	2001      	movs	r0, #1
 800dee2:	f7f6 fbbd 	bl	8004660 <_exit>

0800dee6 <_realloc_r>:
 800dee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deea:	4680      	mov	r8, r0
 800deec:	4614      	mov	r4, r2
 800deee:	460e      	mov	r6, r1
 800def0:	b921      	cbnz	r1, 800defc <_realloc_r+0x16>
 800def2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800def6:	4611      	mov	r1, r2
 800def8:	f7ff b8c8 	b.w	800d08c <_malloc_r>
 800defc:	b92a      	cbnz	r2, 800df0a <_realloc_r+0x24>
 800defe:	f7ff fbdd 	bl	800d6bc <_free_r>
 800df02:	4625      	mov	r5, r4
 800df04:	4628      	mov	r0, r5
 800df06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0a:	f000 fa39 	bl	800e380 <_malloc_usable_size_r>
 800df0e:	4284      	cmp	r4, r0
 800df10:	4607      	mov	r7, r0
 800df12:	d802      	bhi.n	800df1a <_realloc_r+0x34>
 800df14:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df18:	d812      	bhi.n	800df40 <_realloc_r+0x5a>
 800df1a:	4621      	mov	r1, r4
 800df1c:	4640      	mov	r0, r8
 800df1e:	f7ff f8b5 	bl	800d08c <_malloc_r>
 800df22:	4605      	mov	r5, r0
 800df24:	2800      	cmp	r0, #0
 800df26:	d0ed      	beq.n	800df04 <_realloc_r+0x1e>
 800df28:	42bc      	cmp	r4, r7
 800df2a:	4622      	mov	r2, r4
 800df2c:	4631      	mov	r1, r6
 800df2e:	bf28      	it	cs
 800df30:	463a      	movcs	r2, r7
 800df32:	f7ff fb96 	bl	800d662 <memcpy>
 800df36:	4631      	mov	r1, r6
 800df38:	4640      	mov	r0, r8
 800df3a:	f7ff fbbf 	bl	800d6bc <_free_r>
 800df3e:	e7e1      	b.n	800df04 <_realloc_r+0x1e>
 800df40:	4635      	mov	r5, r6
 800df42:	e7df      	b.n	800df04 <_realloc_r+0x1e>

0800df44 <__sfputc_r>:
 800df44:	6893      	ldr	r3, [r2, #8]
 800df46:	3b01      	subs	r3, #1
 800df48:	2b00      	cmp	r3, #0
 800df4a:	b410      	push	{r4}
 800df4c:	6093      	str	r3, [r2, #8]
 800df4e:	da08      	bge.n	800df62 <__sfputc_r+0x1e>
 800df50:	6994      	ldr	r4, [r2, #24]
 800df52:	42a3      	cmp	r3, r4
 800df54:	db01      	blt.n	800df5a <__sfputc_r+0x16>
 800df56:	290a      	cmp	r1, #10
 800df58:	d103      	bne.n	800df62 <__sfputc_r+0x1e>
 800df5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df5e:	f000 b935 	b.w	800e1cc <__swbuf_r>
 800df62:	6813      	ldr	r3, [r2, #0]
 800df64:	1c58      	adds	r0, r3, #1
 800df66:	6010      	str	r0, [r2, #0]
 800df68:	7019      	strb	r1, [r3, #0]
 800df6a:	4608      	mov	r0, r1
 800df6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <__sfputs_r>:
 800df72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df74:	4606      	mov	r6, r0
 800df76:	460f      	mov	r7, r1
 800df78:	4614      	mov	r4, r2
 800df7a:	18d5      	adds	r5, r2, r3
 800df7c:	42ac      	cmp	r4, r5
 800df7e:	d101      	bne.n	800df84 <__sfputs_r+0x12>
 800df80:	2000      	movs	r0, #0
 800df82:	e007      	b.n	800df94 <__sfputs_r+0x22>
 800df84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df88:	463a      	mov	r2, r7
 800df8a:	4630      	mov	r0, r6
 800df8c:	f7ff ffda 	bl	800df44 <__sfputc_r>
 800df90:	1c43      	adds	r3, r0, #1
 800df92:	d1f3      	bne.n	800df7c <__sfputs_r+0xa>
 800df94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df98 <_vfiprintf_r>:
 800df98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9c:	460d      	mov	r5, r1
 800df9e:	b09d      	sub	sp, #116	; 0x74
 800dfa0:	4614      	mov	r4, r2
 800dfa2:	4698      	mov	r8, r3
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	b118      	cbz	r0, 800dfb0 <_vfiprintf_r+0x18>
 800dfa8:	6a03      	ldr	r3, [r0, #32]
 800dfaa:	b90b      	cbnz	r3, 800dfb0 <_vfiprintf_r+0x18>
 800dfac:	f7ff f986 	bl	800d2bc <__sinit>
 800dfb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfb2:	07d9      	lsls	r1, r3, #31
 800dfb4:	d405      	bmi.n	800dfc2 <_vfiprintf_r+0x2a>
 800dfb6:	89ab      	ldrh	r3, [r5, #12]
 800dfb8:	059a      	lsls	r2, r3, #22
 800dfba:	d402      	bmi.n	800dfc2 <_vfiprintf_r+0x2a>
 800dfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfbe:	f7ff fb46 	bl	800d64e <__retarget_lock_acquire_recursive>
 800dfc2:	89ab      	ldrh	r3, [r5, #12]
 800dfc4:	071b      	lsls	r3, r3, #28
 800dfc6:	d501      	bpl.n	800dfcc <_vfiprintf_r+0x34>
 800dfc8:	692b      	ldr	r3, [r5, #16]
 800dfca:	b99b      	cbnz	r3, 800dff4 <_vfiprintf_r+0x5c>
 800dfcc:	4629      	mov	r1, r5
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f000 f93a 	bl	800e248 <__swsetup_r>
 800dfd4:	b170      	cbz	r0, 800dff4 <_vfiprintf_r+0x5c>
 800dfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfd8:	07dc      	lsls	r4, r3, #31
 800dfda:	d504      	bpl.n	800dfe6 <_vfiprintf_r+0x4e>
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	b01d      	add	sp, #116	; 0x74
 800dfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe6:	89ab      	ldrh	r3, [r5, #12]
 800dfe8:	0598      	lsls	r0, r3, #22
 800dfea:	d4f7      	bmi.n	800dfdc <_vfiprintf_r+0x44>
 800dfec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfee:	f7ff fb2f 	bl	800d650 <__retarget_lock_release_recursive>
 800dff2:	e7f3      	b.n	800dfdc <_vfiprintf_r+0x44>
 800dff4:	2300      	movs	r3, #0
 800dff6:	9309      	str	r3, [sp, #36]	; 0x24
 800dff8:	2320      	movs	r3, #32
 800dffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dffe:	f8cd 800c 	str.w	r8, [sp, #12]
 800e002:	2330      	movs	r3, #48	; 0x30
 800e004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e1b8 <_vfiprintf_r+0x220>
 800e008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e00c:	f04f 0901 	mov.w	r9, #1
 800e010:	4623      	mov	r3, r4
 800e012:	469a      	mov	sl, r3
 800e014:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e018:	b10a      	cbz	r2, 800e01e <_vfiprintf_r+0x86>
 800e01a:	2a25      	cmp	r2, #37	; 0x25
 800e01c:	d1f9      	bne.n	800e012 <_vfiprintf_r+0x7a>
 800e01e:	ebba 0b04 	subs.w	fp, sl, r4
 800e022:	d00b      	beq.n	800e03c <_vfiprintf_r+0xa4>
 800e024:	465b      	mov	r3, fp
 800e026:	4622      	mov	r2, r4
 800e028:	4629      	mov	r1, r5
 800e02a:	4630      	mov	r0, r6
 800e02c:	f7ff ffa1 	bl	800df72 <__sfputs_r>
 800e030:	3001      	adds	r0, #1
 800e032:	f000 80a9 	beq.w	800e188 <_vfiprintf_r+0x1f0>
 800e036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e038:	445a      	add	r2, fp
 800e03a:	9209      	str	r2, [sp, #36]	; 0x24
 800e03c:	f89a 3000 	ldrb.w	r3, [sl]
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 80a1 	beq.w	800e188 <_vfiprintf_r+0x1f0>
 800e046:	2300      	movs	r3, #0
 800e048:	f04f 32ff 	mov.w	r2, #4294967295
 800e04c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e050:	f10a 0a01 	add.w	sl, sl, #1
 800e054:	9304      	str	r3, [sp, #16]
 800e056:	9307      	str	r3, [sp, #28]
 800e058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e05c:	931a      	str	r3, [sp, #104]	; 0x68
 800e05e:	4654      	mov	r4, sl
 800e060:	2205      	movs	r2, #5
 800e062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e066:	4854      	ldr	r0, [pc, #336]	; (800e1b8 <_vfiprintf_r+0x220>)
 800e068:	f7f2 f952 	bl	8000310 <memchr>
 800e06c:	9a04      	ldr	r2, [sp, #16]
 800e06e:	b9d8      	cbnz	r0, 800e0a8 <_vfiprintf_r+0x110>
 800e070:	06d1      	lsls	r1, r2, #27
 800e072:	bf44      	itt	mi
 800e074:	2320      	movmi	r3, #32
 800e076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e07a:	0713      	lsls	r3, r2, #28
 800e07c:	bf44      	itt	mi
 800e07e:	232b      	movmi	r3, #43	; 0x2b
 800e080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e084:	f89a 3000 	ldrb.w	r3, [sl]
 800e088:	2b2a      	cmp	r3, #42	; 0x2a
 800e08a:	d015      	beq.n	800e0b8 <_vfiprintf_r+0x120>
 800e08c:	9a07      	ldr	r2, [sp, #28]
 800e08e:	4654      	mov	r4, sl
 800e090:	2000      	movs	r0, #0
 800e092:	f04f 0c0a 	mov.w	ip, #10
 800e096:	4621      	mov	r1, r4
 800e098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e09c:	3b30      	subs	r3, #48	; 0x30
 800e09e:	2b09      	cmp	r3, #9
 800e0a0:	d94d      	bls.n	800e13e <_vfiprintf_r+0x1a6>
 800e0a2:	b1b0      	cbz	r0, 800e0d2 <_vfiprintf_r+0x13a>
 800e0a4:	9207      	str	r2, [sp, #28]
 800e0a6:	e014      	b.n	800e0d2 <_vfiprintf_r+0x13a>
 800e0a8:	eba0 0308 	sub.w	r3, r0, r8
 800e0ac:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	9304      	str	r3, [sp, #16]
 800e0b4:	46a2      	mov	sl, r4
 800e0b6:	e7d2      	b.n	800e05e <_vfiprintf_r+0xc6>
 800e0b8:	9b03      	ldr	r3, [sp, #12]
 800e0ba:	1d19      	adds	r1, r3, #4
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	9103      	str	r1, [sp, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	bfbb      	ittet	lt
 800e0c4:	425b      	neglt	r3, r3
 800e0c6:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ca:	9307      	strge	r3, [sp, #28]
 800e0cc:	9307      	strlt	r3, [sp, #28]
 800e0ce:	bfb8      	it	lt
 800e0d0:	9204      	strlt	r2, [sp, #16]
 800e0d2:	7823      	ldrb	r3, [r4, #0]
 800e0d4:	2b2e      	cmp	r3, #46	; 0x2e
 800e0d6:	d10c      	bne.n	800e0f2 <_vfiprintf_r+0x15a>
 800e0d8:	7863      	ldrb	r3, [r4, #1]
 800e0da:	2b2a      	cmp	r3, #42	; 0x2a
 800e0dc:	d134      	bne.n	800e148 <_vfiprintf_r+0x1b0>
 800e0de:	9b03      	ldr	r3, [sp, #12]
 800e0e0:	1d1a      	adds	r2, r3, #4
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	9203      	str	r2, [sp, #12]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	bfb8      	it	lt
 800e0ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0ee:	3402      	adds	r4, #2
 800e0f0:	9305      	str	r3, [sp, #20]
 800e0f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e1c8 <_vfiprintf_r+0x230>
 800e0f6:	7821      	ldrb	r1, [r4, #0]
 800e0f8:	2203      	movs	r2, #3
 800e0fa:	4650      	mov	r0, sl
 800e0fc:	f7f2 f908 	bl	8000310 <memchr>
 800e100:	b138      	cbz	r0, 800e112 <_vfiprintf_r+0x17a>
 800e102:	9b04      	ldr	r3, [sp, #16]
 800e104:	eba0 000a 	sub.w	r0, r0, sl
 800e108:	2240      	movs	r2, #64	; 0x40
 800e10a:	4082      	lsls	r2, r0
 800e10c:	4313      	orrs	r3, r2
 800e10e:	3401      	adds	r4, #1
 800e110:	9304      	str	r3, [sp, #16]
 800e112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e116:	4829      	ldr	r0, [pc, #164]	; (800e1bc <_vfiprintf_r+0x224>)
 800e118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e11c:	2206      	movs	r2, #6
 800e11e:	f7f2 f8f7 	bl	8000310 <memchr>
 800e122:	2800      	cmp	r0, #0
 800e124:	d03f      	beq.n	800e1a6 <_vfiprintf_r+0x20e>
 800e126:	4b26      	ldr	r3, [pc, #152]	; (800e1c0 <_vfiprintf_r+0x228>)
 800e128:	bb1b      	cbnz	r3, 800e172 <_vfiprintf_r+0x1da>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	3307      	adds	r3, #7
 800e12e:	f023 0307 	bic.w	r3, r3, #7
 800e132:	3308      	adds	r3, #8
 800e134:	9303      	str	r3, [sp, #12]
 800e136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e138:	443b      	add	r3, r7
 800e13a:	9309      	str	r3, [sp, #36]	; 0x24
 800e13c:	e768      	b.n	800e010 <_vfiprintf_r+0x78>
 800e13e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e142:	460c      	mov	r4, r1
 800e144:	2001      	movs	r0, #1
 800e146:	e7a6      	b.n	800e096 <_vfiprintf_r+0xfe>
 800e148:	2300      	movs	r3, #0
 800e14a:	3401      	adds	r4, #1
 800e14c:	9305      	str	r3, [sp, #20]
 800e14e:	4619      	mov	r1, r3
 800e150:	f04f 0c0a 	mov.w	ip, #10
 800e154:	4620      	mov	r0, r4
 800e156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e15a:	3a30      	subs	r2, #48	; 0x30
 800e15c:	2a09      	cmp	r2, #9
 800e15e:	d903      	bls.n	800e168 <_vfiprintf_r+0x1d0>
 800e160:	2b00      	cmp	r3, #0
 800e162:	d0c6      	beq.n	800e0f2 <_vfiprintf_r+0x15a>
 800e164:	9105      	str	r1, [sp, #20]
 800e166:	e7c4      	b.n	800e0f2 <_vfiprintf_r+0x15a>
 800e168:	fb0c 2101 	mla	r1, ip, r1, r2
 800e16c:	4604      	mov	r4, r0
 800e16e:	2301      	movs	r3, #1
 800e170:	e7f0      	b.n	800e154 <_vfiprintf_r+0x1bc>
 800e172:	ab03      	add	r3, sp, #12
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	462a      	mov	r2, r5
 800e178:	4b12      	ldr	r3, [pc, #72]	; (800e1c4 <_vfiprintf_r+0x22c>)
 800e17a:	a904      	add	r1, sp, #16
 800e17c:	4630      	mov	r0, r6
 800e17e:	f3af 8000 	nop.w
 800e182:	4607      	mov	r7, r0
 800e184:	1c78      	adds	r0, r7, #1
 800e186:	d1d6      	bne.n	800e136 <_vfiprintf_r+0x19e>
 800e188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e18a:	07d9      	lsls	r1, r3, #31
 800e18c:	d405      	bmi.n	800e19a <_vfiprintf_r+0x202>
 800e18e:	89ab      	ldrh	r3, [r5, #12]
 800e190:	059a      	lsls	r2, r3, #22
 800e192:	d402      	bmi.n	800e19a <_vfiprintf_r+0x202>
 800e194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e196:	f7ff fa5b 	bl	800d650 <__retarget_lock_release_recursive>
 800e19a:	89ab      	ldrh	r3, [r5, #12]
 800e19c:	065b      	lsls	r3, r3, #25
 800e19e:	f53f af1d 	bmi.w	800dfdc <_vfiprintf_r+0x44>
 800e1a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1a4:	e71c      	b.n	800dfe0 <_vfiprintf_r+0x48>
 800e1a6:	ab03      	add	r3, sp, #12
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <_vfiprintf_r+0x22c>)
 800e1ae:	a904      	add	r1, sp, #16
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7ff fc95 	bl	800dae0 <_printf_i>
 800e1b6:	e7e4      	b.n	800e182 <_vfiprintf_r+0x1ea>
 800e1b8:	080130b1 	.word	0x080130b1
 800e1bc:	080130bb 	.word	0x080130bb
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	0800df73 	.word	0x0800df73
 800e1c8:	080130b7 	.word	0x080130b7

0800e1cc <__swbuf_r>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	460e      	mov	r6, r1
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	b118      	cbz	r0, 800e1de <__swbuf_r+0x12>
 800e1d6:	6a03      	ldr	r3, [r0, #32]
 800e1d8:	b90b      	cbnz	r3, 800e1de <__swbuf_r+0x12>
 800e1da:	f7ff f86f 	bl	800d2bc <__sinit>
 800e1de:	69a3      	ldr	r3, [r4, #24]
 800e1e0:	60a3      	str	r3, [r4, #8]
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	071a      	lsls	r2, r3, #28
 800e1e6:	d525      	bpl.n	800e234 <__swbuf_r+0x68>
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	b31b      	cbz	r3, 800e234 <__swbuf_r+0x68>
 800e1ec:	6823      	ldr	r3, [r4, #0]
 800e1ee:	6922      	ldr	r2, [r4, #16]
 800e1f0:	1a98      	subs	r0, r3, r2
 800e1f2:	6963      	ldr	r3, [r4, #20]
 800e1f4:	b2f6      	uxtb	r6, r6
 800e1f6:	4283      	cmp	r3, r0
 800e1f8:	4637      	mov	r7, r6
 800e1fa:	dc04      	bgt.n	800e206 <__swbuf_r+0x3a>
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4628      	mov	r0, r5
 800e200:	f7ff fe16 	bl	800de30 <_fflush_r>
 800e204:	b9e0      	cbnz	r0, 800e240 <__swbuf_r+0x74>
 800e206:	68a3      	ldr	r3, [r4, #8]
 800e208:	3b01      	subs	r3, #1
 800e20a:	60a3      	str	r3, [r4, #8]
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	1c5a      	adds	r2, r3, #1
 800e210:	6022      	str	r2, [r4, #0]
 800e212:	701e      	strb	r6, [r3, #0]
 800e214:	6962      	ldr	r2, [r4, #20]
 800e216:	1c43      	adds	r3, r0, #1
 800e218:	429a      	cmp	r2, r3
 800e21a:	d004      	beq.n	800e226 <__swbuf_r+0x5a>
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	07db      	lsls	r3, r3, #31
 800e220:	d506      	bpl.n	800e230 <__swbuf_r+0x64>
 800e222:	2e0a      	cmp	r6, #10
 800e224:	d104      	bne.n	800e230 <__swbuf_r+0x64>
 800e226:	4621      	mov	r1, r4
 800e228:	4628      	mov	r0, r5
 800e22a:	f7ff fe01 	bl	800de30 <_fflush_r>
 800e22e:	b938      	cbnz	r0, 800e240 <__swbuf_r+0x74>
 800e230:	4638      	mov	r0, r7
 800e232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e234:	4621      	mov	r1, r4
 800e236:	4628      	mov	r0, r5
 800e238:	f000 f806 	bl	800e248 <__swsetup_r>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d0d5      	beq.n	800e1ec <__swbuf_r+0x20>
 800e240:	f04f 37ff 	mov.w	r7, #4294967295
 800e244:	e7f4      	b.n	800e230 <__swbuf_r+0x64>
	...

0800e248 <__swsetup_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4b2a      	ldr	r3, [pc, #168]	; (800e2f4 <__swsetup_r+0xac>)
 800e24c:	4605      	mov	r5, r0
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	460c      	mov	r4, r1
 800e252:	b118      	cbz	r0, 800e25c <__swsetup_r+0x14>
 800e254:	6a03      	ldr	r3, [r0, #32]
 800e256:	b90b      	cbnz	r3, 800e25c <__swsetup_r+0x14>
 800e258:	f7ff f830 	bl	800d2bc <__sinit>
 800e25c:	89a3      	ldrh	r3, [r4, #12]
 800e25e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e262:	0718      	lsls	r0, r3, #28
 800e264:	d422      	bmi.n	800e2ac <__swsetup_r+0x64>
 800e266:	06d9      	lsls	r1, r3, #27
 800e268:	d407      	bmi.n	800e27a <__swsetup_r+0x32>
 800e26a:	2309      	movs	r3, #9
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e272:	81a3      	strh	r3, [r4, #12]
 800e274:	f04f 30ff 	mov.w	r0, #4294967295
 800e278:	e034      	b.n	800e2e4 <__swsetup_r+0x9c>
 800e27a:	0758      	lsls	r0, r3, #29
 800e27c:	d512      	bpl.n	800e2a4 <__swsetup_r+0x5c>
 800e27e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e280:	b141      	cbz	r1, 800e294 <__swsetup_r+0x4c>
 800e282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e286:	4299      	cmp	r1, r3
 800e288:	d002      	beq.n	800e290 <__swsetup_r+0x48>
 800e28a:	4628      	mov	r0, r5
 800e28c:	f7ff fa16 	bl	800d6bc <_free_r>
 800e290:	2300      	movs	r3, #0
 800e292:	6363      	str	r3, [r4, #52]	; 0x34
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	2300      	movs	r3, #0
 800e29e:	6063      	str	r3, [r4, #4]
 800e2a0:	6923      	ldr	r3, [r4, #16]
 800e2a2:	6023      	str	r3, [r4, #0]
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	f043 0308 	orr.w	r3, r3, #8
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	6923      	ldr	r3, [r4, #16]
 800e2ae:	b94b      	cbnz	r3, 800e2c4 <__swsetup_r+0x7c>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ba:	d003      	beq.n	800e2c4 <__swsetup_r+0x7c>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f000 f88c 	bl	800e3dc <__smakebuf_r>
 800e2c4:	89a0      	ldrh	r0, [r4, #12]
 800e2c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2ca:	f010 0301 	ands.w	r3, r0, #1
 800e2ce:	d00a      	beq.n	800e2e6 <__swsetup_r+0x9e>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	60a3      	str	r3, [r4, #8]
 800e2d4:	6963      	ldr	r3, [r4, #20]
 800e2d6:	425b      	negs	r3, r3
 800e2d8:	61a3      	str	r3, [r4, #24]
 800e2da:	6923      	ldr	r3, [r4, #16]
 800e2dc:	b943      	cbnz	r3, 800e2f0 <__swsetup_r+0xa8>
 800e2de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2e2:	d1c4      	bne.n	800e26e <__swsetup_r+0x26>
 800e2e4:	bd38      	pop	{r3, r4, r5, pc}
 800e2e6:	0781      	lsls	r1, r0, #30
 800e2e8:	bf58      	it	pl
 800e2ea:	6963      	ldrpl	r3, [r4, #20]
 800e2ec:	60a3      	str	r3, [r4, #8]
 800e2ee:	e7f4      	b.n	800e2da <__swsetup_r+0x92>
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e7f7      	b.n	800e2e4 <__swsetup_r+0x9c>
 800e2f4:	24000088 	.word	0x24000088

0800e2f8 <_raise_r>:
 800e2f8:	291f      	cmp	r1, #31
 800e2fa:	b538      	push	{r3, r4, r5, lr}
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	460d      	mov	r5, r1
 800e300:	d904      	bls.n	800e30c <_raise_r+0x14>
 800e302:	2316      	movs	r3, #22
 800e304:	6003      	str	r3, [r0, #0]
 800e306:	f04f 30ff 	mov.w	r0, #4294967295
 800e30a:	bd38      	pop	{r3, r4, r5, pc}
 800e30c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e30e:	b112      	cbz	r2, 800e316 <_raise_r+0x1e>
 800e310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e314:	b94b      	cbnz	r3, 800e32a <_raise_r+0x32>
 800e316:	4620      	mov	r0, r4
 800e318:	f000 f830 	bl	800e37c <_getpid_r>
 800e31c:	462a      	mov	r2, r5
 800e31e:	4601      	mov	r1, r0
 800e320:	4620      	mov	r0, r4
 800e322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e326:	f000 b817 	b.w	800e358 <_kill_r>
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d00a      	beq.n	800e344 <_raise_r+0x4c>
 800e32e:	1c59      	adds	r1, r3, #1
 800e330:	d103      	bne.n	800e33a <_raise_r+0x42>
 800e332:	2316      	movs	r3, #22
 800e334:	6003      	str	r3, [r0, #0]
 800e336:	2001      	movs	r0, #1
 800e338:	e7e7      	b.n	800e30a <_raise_r+0x12>
 800e33a:	2400      	movs	r4, #0
 800e33c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e340:	4628      	mov	r0, r5
 800e342:	4798      	blx	r3
 800e344:	2000      	movs	r0, #0
 800e346:	e7e0      	b.n	800e30a <_raise_r+0x12>

0800e348 <raise>:
 800e348:	4b02      	ldr	r3, [pc, #8]	; (800e354 <raise+0xc>)
 800e34a:	4601      	mov	r1, r0
 800e34c:	6818      	ldr	r0, [r3, #0]
 800e34e:	f7ff bfd3 	b.w	800e2f8 <_raise_r>
 800e352:	bf00      	nop
 800e354:	24000088 	.word	0x24000088

0800e358 <_kill_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4d07      	ldr	r5, [pc, #28]	; (800e378 <_kill_r+0x20>)
 800e35c:	2300      	movs	r3, #0
 800e35e:	4604      	mov	r4, r0
 800e360:	4608      	mov	r0, r1
 800e362:	4611      	mov	r1, r2
 800e364:	602b      	str	r3, [r5, #0]
 800e366:	f7f6 f96b 	bl	8004640 <_kill>
 800e36a:	1c43      	adds	r3, r0, #1
 800e36c:	d102      	bne.n	800e374 <_kill_r+0x1c>
 800e36e:	682b      	ldr	r3, [r5, #0]
 800e370:	b103      	cbz	r3, 800e374 <_kill_r+0x1c>
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	bd38      	pop	{r3, r4, r5, pc}
 800e376:	bf00      	nop
 800e378:	240027c4 	.word	0x240027c4

0800e37c <_getpid_r>:
 800e37c:	f7f6 b958 	b.w	8004630 <_getpid>

0800e380 <_malloc_usable_size_r>:
 800e380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e384:	1f18      	subs	r0, r3, #4
 800e386:	2b00      	cmp	r3, #0
 800e388:	bfbc      	itt	lt
 800e38a:	580b      	ldrlt	r3, [r1, r0]
 800e38c:	18c0      	addlt	r0, r0, r3
 800e38e:	4770      	bx	lr

0800e390 <__swhatbuf_r>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	460c      	mov	r4, r1
 800e394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e398:	2900      	cmp	r1, #0
 800e39a:	b096      	sub	sp, #88	; 0x58
 800e39c:	4615      	mov	r5, r2
 800e39e:	461e      	mov	r6, r3
 800e3a0:	da0d      	bge.n	800e3be <__swhatbuf_r+0x2e>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e3a8:	f04f 0100 	mov.w	r1, #0
 800e3ac:	bf0c      	ite	eq
 800e3ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e3b2:	2340      	movne	r3, #64	; 0x40
 800e3b4:	2000      	movs	r0, #0
 800e3b6:	6031      	str	r1, [r6, #0]
 800e3b8:	602b      	str	r3, [r5, #0]
 800e3ba:	b016      	add	sp, #88	; 0x58
 800e3bc:	bd70      	pop	{r4, r5, r6, pc}
 800e3be:	466a      	mov	r2, sp
 800e3c0:	f000 f848 	bl	800e454 <_fstat_r>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	dbec      	blt.n	800e3a2 <__swhatbuf_r+0x12>
 800e3c8:	9901      	ldr	r1, [sp, #4]
 800e3ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e3ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e3d2:	4259      	negs	r1, r3
 800e3d4:	4159      	adcs	r1, r3
 800e3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3da:	e7eb      	b.n	800e3b4 <__swhatbuf_r+0x24>

0800e3dc <__smakebuf_r>:
 800e3dc:	898b      	ldrh	r3, [r1, #12]
 800e3de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3e0:	079d      	lsls	r5, r3, #30
 800e3e2:	4606      	mov	r6, r0
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	d507      	bpl.n	800e3f8 <__smakebuf_r+0x1c>
 800e3e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	6123      	str	r3, [r4, #16]
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	6163      	str	r3, [r4, #20]
 800e3f4:	b002      	add	sp, #8
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	ab01      	add	r3, sp, #4
 800e3fa:	466a      	mov	r2, sp
 800e3fc:	f7ff ffc8 	bl	800e390 <__swhatbuf_r>
 800e400:	9900      	ldr	r1, [sp, #0]
 800e402:	4605      	mov	r5, r0
 800e404:	4630      	mov	r0, r6
 800e406:	f7fe fe41 	bl	800d08c <_malloc_r>
 800e40a:	b948      	cbnz	r0, 800e420 <__smakebuf_r+0x44>
 800e40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e410:	059a      	lsls	r2, r3, #22
 800e412:	d4ef      	bmi.n	800e3f4 <__smakebuf_r+0x18>
 800e414:	f023 0303 	bic.w	r3, r3, #3
 800e418:	f043 0302 	orr.w	r3, r3, #2
 800e41c:	81a3      	strh	r3, [r4, #12]
 800e41e:	e7e3      	b.n	800e3e8 <__smakebuf_r+0xc>
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	6020      	str	r0, [r4, #0]
 800e424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e428:	81a3      	strh	r3, [r4, #12]
 800e42a:	9b00      	ldr	r3, [sp, #0]
 800e42c:	6163      	str	r3, [r4, #20]
 800e42e:	9b01      	ldr	r3, [sp, #4]
 800e430:	6120      	str	r0, [r4, #16]
 800e432:	b15b      	cbz	r3, 800e44c <__smakebuf_r+0x70>
 800e434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e438:	4630      	mov	r0, r6
 800e43a:	f000 f81d 	bl	800e478 <_isatty_r>
 800e43e:	b128      	cbz	r0, 800e44c <__smakebuf_r+0x70>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	f023 0303 	bic.w	r3, r3, #3
 800e446:	f043 0301 	orr.w	r3, r3, #1
 800e44a:	81a3      	strh	r3, [r4, #12]
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	431d      	orrs	r5, r3
 800e450:	81a5      	strh	r5, [r4, #12]
 800e452:	e7cf      	b.n	800e3f4 <__smakebuf_r+0x18>

0800e454 <_fstat_r>:
 800e454:	b538      	push	{r3, r4, r5, lr}
 800e456:	4d07      	ldr	r5, [pc, #28]	; (800e474 <_fstat_r+0x20>)
 800e458:	2300      	movs	r3, #0
 800e45a:	4604      	mov	r4, r0
 800e45c:	4608      	mov	r0, r1
 800e45e:	4611      	mov	r1, r2
 800e460:	602b      	str	r3, [r5, #0]
 800e462:	f7f6 f94c 	bl	80046fe <_fstat>
 800e466:	1c43      	adds	r3, r0, #1
 800e468:	d102      	bne.n	800e470 <_fstat_r+0x1c>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	b103      	cbz	r3, 800e470 <_fstat_r+0x1c>
 800e46e:	6023      	str	r3, [r4, #0]
 800e470:	bd38      	pop	{r3, r4, r5, pc}
 800e472:	bf00      	nop
 800e474:	240027c4 	.word	0x240027c4

0800e478 <_isatty_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4d06      	ldr	r5, [pc, #24]	; (800e494 <_isatty_r+0x1c>)
 800e47c:	2300      	movs	r3, #0
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	f7f6 f94b 	bl	800471e <_isatty>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d102      	bne.n	800e492 <_isatty_r+0x1a>
 800e48c:	682b      	ldr	r3, [r5, #0]
 800e48e:	b103      	cbz	r3, 800e492 <_isatty_r+0x1a>
 800e490:	6023      	str	r3, [r4, #0]
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	240027c4 	.word	0x240027c4

0800e498 <_init>:
 800e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49a:	bf00      	nop
 800e49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e49e:	bc08      	pop	{r3}
 800e4a0:	469e      	mov	lr, r3
 800e4a2:	4770      	bx	lr

0800e4a4 <_fini>:
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a6:	bf00      	nop
 800e4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4aa:	bc08      	pop	{r3}
 800e4ac:	469e      	mov	lr, r3
 800e4ae:	4770      	bx	lr
