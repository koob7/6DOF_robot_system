ogólne ustawienia robota i sterownika (kontrast wyświetlacza, jasność wyświetlacza, itp.)
wprowadzanie nazw nowych plików
sterowanie ruchem robota
tworzenie i edycja plików
wyznaczanie ścieżek prostych oraz łukowych tworzących ruch robota
obsługa gotowych programów
porzadkowanie kodu (rozdzielić klasy między plikami, kolejność metod, itp.)
komentowanie kodu
generowanie Gcode w programie fusion 360

stworzenie dokumentacji:

1.Wstęp - opis projektu
1.1 Wymagania funkcjonalne - robot wykonuje polecenia przekazane w plikach G-code.
1.2 Wymagania niefunkcjonalne - konstrukcja robota, nawigacja robota - kinematyka odwrotna, sterownik robota, system operacyjny jest intuicyjny, cały system jest kompletny (bez oprogramowania/osprzętu zewnętrznego).

2.Konstrukcje techniczne
2.1 Konstrukcja robota
2.1.1 Wymagania techniczne - konstrukcja 6DOF, użyte materiały, mechanika (przełożenia, napędy - silniki).
2.1.2 Technika wykonania elementów, złożenie konstrukcji oraz efekt (zdjęcia).
2.1.3 Rysunki techniczne konstrukcji robota / załączony plik.
2.1.4 Problemy - skomplikowana konstrukcja 6DOF.
2.2 Konstrukcja obudowy wyświetlacza oraz sterownika
2.2.1 Wymagania - wygodne do użytku, zapewniające schludność projektu (cable management itp.).
2.2.2 Technika wykonania elementów oraz efekt (zdjęcia).
2.2.3 Rysunki techniczne / załączony plik.
2.2.4 Problemy - obudowa wyświetlacza generująca przerwania, brak większych problemów.
*Sekcja obliczeń wytrzymałości konstrukcji jest celowo pomijana.

3.Nawigacja robota - kinematyka odwrotna - materiały D:\materialy_studia\przedmioty\smiw\materiały robot, maile do Pana Wieśka, linki na Messengerze.
3.1 Wstęp do kinematyki prostej oraz odwrotnej.
3.2 Wyprowadzenie wzorów kinematyki prostej - do przemyślenia (kinematyka prosta jest podstawą kinematyki odwrotnej).
3.3 Wyprowadzenie wzorów kinematyki odwrotnej.
3.4 Sposób wyznaczania ścieżki ruchu robota (prostych oraz łukowych) - temat do rozeznania w necie oraz między znajomymi.
3.5 Problemy - skomplikowane wyprowadzenie wzorów kinematyki odwrotnej - zapominany przez wszystkich obrót osi (+π/2) przy przejściu z pierwszej do drugiej części kinematyki odwrotnej (z podstawy do nadgarstka).

Płytka sterująca
4.1 Główne wymagania + poglądowy schemat sterownika - szybki zegar procesora, zasilanie elementów sterownika (karta SD, procesor, silniki krokowe itp.), łączność z wyświetlaczem, obsługa FATFS, duży rozmiar pamięci procesora (dla uproszczenia - żeby nie było zewnętrznego RAM-u).
4.2 Schemat sterownika.
4.3 Rozmieszczenie płytki drukowanej.
4.4 Samodzielny montaż oraz testy na poszczególnych etapach.
4.5 Problemy - rezystory podciągające przy czujnikach krańcowych, procesor nie działa powyżej 400 MHz, źle umieszczone złącza (skośnie zamontowane).

4.Oprogramowanie sterownika - ściągawka https://sun.aei.polsl.pl/~cki/pkIII/sprawozdanie/main.html
5.1 Analiza zadania - obiekty w C++ mocno uprościły przepływ sterowania, obsługę plików z karty SD (strumienie danych), szkice wykonane w Figma, środowisko STM32Cube uprościło konfigurację projektu, nacisk na obsługę przerwań (przerwania dotyku, ruszające silnikami robota).
5.2 Specyfikacja zewnętrzna - instrukcja dla użytkownika.
5.3 Przykład działania - zdjęcia głównych stron menu oraz przykładowych operacji.
5.4 Specyfikacja wewnętrzna:
5.4.1 Diagram klas.
5.4.2 Schemat stanów (etapów) programu - ?(maszyna stanów)?
5.4.3 Wykorzystane biblioteki zewnętrzne - biblioteka SSD1963 (w której mocno zmieniłem sposób komunikacji z SSD1963 - jednoczesny zapis 16 bitów), XPT2046 z YouTube oraz biblioteka obsługi kart SD ControllersTech.
5.4.4 Dokumentacja wygenerowana z Doxygena.
5.5 Treść programu w załączniku.
5.6 Problemy - kiepska dokumentacja sterownika dotyku XPT2046 utrudniała obsługę przerwań dotyku.

5.Podsumowanie
6.1 Wnioski.
6.2 Plany na przyszłość - rozbudowa oprogramowania sterującego, nowa konstrukcja robota.
